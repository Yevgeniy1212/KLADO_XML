Функция ПолучитьСписокПроектовТекущегоСотрудника(Сотрудник) Экспорт
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Администратор", Сотрудник);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задачи.Владелец.Проект КАК Проект
	               |ИЗ
	               |	Справочник.Задачи КАК Задачи
	               |ГДЕ
	               |	Задачи.Администратор = &Администратор
	               |	И Задачи.Владелец ССЫЛКА Справочник.Договоры
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Задачи.Владелец.Проект
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	Договоры.Проект
	               |ИЗ
	               |	Справочник.Договоры КАК Договоры
	               |ГДЕ
	               |	Договоры.Администратор = &Администратор
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Договоры.Проект";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Проект");
КонецФункции

Функция ПолучитьСписокДоговоровРуководителяПодразделения(Сотрудник) Экспорт
	СЗ = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Администратор", Сотрудник);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задачи.Владелец КАК Договор
	               |ИЗ
	               |	Справочник.Задачи КАК Задачи
	               |ГДЕ
	               |	Задачи.Владелец ССЫЛКА Справочник.Договоры
	               |	И Задачи.Подразделение.Руководитель = &Администратор
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Задачи.Владелец";
	СЗ.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Договор"));
	Возврат СЗ;	
КонецФункции

Функция ПолучитьСписокДоговоровАдминистраторЗадачи(Сотрудник, Подразделение) Экспорт
	
	СЗ = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Администратор", 	Сотрудник);
	Запрос.УстановитьПараметр("Подразделение", 	Подразделение);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задачи.Владелец КАК Договор
	               |ИЗ
	               |	Справочник.Задачи КАК Задачи
	               |ГДЕ
	               |	Задачи.Владелец ССЫЛКА Справочник.Договоры
	               |	И (Задачи.Администратор = &Администратор
	               |			ИЛИ &Администратор = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	               |	И (Задачи.Подразделение = &Подразделение
	               |			ИЛИ &Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Задачи.Владелец";
	СЗ.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Договор"));
	
	Возврат СЗ;
	
КонецФункции

Функция ПолучитьСписокДоговоровПодразделения(Подразделение) Экспорт
	СЗ = Новый СписокЗначений;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задачи.Владелец КАК Договор
	               |ИЗ
	               |	Справочник.Задачи КАК Задачи
	               |ГДЕ
	               |	Задачи.Владелец ССЫЛКА Справочник.Договоры
	               |	И Задачи.Подразделение = &Подразделение
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	Задачи.Владелец";
	СЗ.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Договор"));
	Возврат СЗ;	
КонецФункции


Процедура ДобавитьОтборыПоПараметрамСеанса(Список, ПолеКомпоновкиДанных, Значение, Использование, ВидСравнения = Неопределено) Экспорт
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ПользовательскийОтбор = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(
			Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	ПользОтбор = Неопределено;
	Для Каждого Эл ИЗ ПользовательскийОтбор.Элементы Цикл
		Если ТипЗнч(Эл) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Эл.ЛевоеЗначение = ПолеКомпоновкиДанных Тогда
				ПользОтбор = Эл;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПользОтбор = Неопределено Тогда
		ЭлементОтбораПользовательский =  ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораПользовательский.ИдентификаторПользовательскойНастройки = Новый УникальныйИдентификатор();
	Иначе
		ЭлементОтбораПользовательский = ПользОтбор;
	КонецЕсли;
	ЭлементОтбораПользовательский.ВидСравнения = ВидСравнения;
	ЭлементОтбораПользовательский.ЛевоеЗначение = ПолеКомпоновкиДанных;
	ЭлементОтбораПользовательский.ПравоеЗначение = Значение;
	ЭлементОтбораПользовательский.Использование = Использование;
	
КонецПроцедуры

