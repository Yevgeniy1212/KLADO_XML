&НаКлиенте
Перем СоответствиеИдентификаторовРазвернутыхСтрокДерева;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТекущийСотрудник = Пользователи.ТекущийПользователь().Сотрудник;
	Если Не ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить текущего сотрудника пользователя!");
	КонецЕсли;
	ОбновитьДерево();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Это соответствие будет хранить идентификаторы строк дерева
    СоответствиеИдентификаторовРазвернутыхСтрокДерева = Новый Массив;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДерево()
	
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СКД");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
    КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
    КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
    Настройки = КомпоновщикНастроек.Настройки;
	
	
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ТекущийСотрудник", ТекущийСотрудник);
	ОтображатьВсеДанные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийСотрудник, "Должность.ОтображатьВсеДанные"); 
	ГруппаОтборов = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Настройки.Отбор, , "Отбор по сотруднику"); 
	Если ГруппаОтборов <> Неопределено 
		И ГруппаОтборов.Количество() <> 0 Тогда
		Для Каждого Эл ИЗ ГруппаОтборов Цикл
			Эл.Использование = Не ЗначениеЗаполнено(ОтображатьВсеДанные);				
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Администратор) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор, "Администратор", Администратор, ,, Истина);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Пользователь) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор, "Пользователь", Пользователь, ,, Истина);	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.СотрудникОтбор) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор, "Администратор", ПараметрыСеанса.СотрудникОтбор, ,, ЗначениеЗаполнено(ПараметрыСеанса.СотрудникОтбор));	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПодразделениеОтбор) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Настройки.Отбор, "Подразделение", ПараметрыСеанса.ПодразделениеОтбор,ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ПараметрыСеанса.ПодразделениеОтбор));	
	КонецЕсли;
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));

    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);

    мДерево = Новый ДеревоЗначений();
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    ПроцессорВывода.УстановитьОбъект(мДерево);

    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	
	Дерево.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьДеревоРекурсивно(мДерево.Строки, Дерево.ПолучитьЭлементы());
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьТаблицуИдентификаторовСтрокДереваНаСервере(ТаблицаРазвернутыхСтрокДерева, ДеревоЗначений, ТекущаяСтрока = Неопределено)
    
    // Получаем все элементы строки дерева значений
    СтрокаДереваЗначений = ДеревоЗначений.ПолучитьЭлементы();
    
    Если СтрокаДереваЗначений.Количество() = 0 Тогда Возврат; КонецЕсли;
    
    // Определяем, нужно ли искать выделенный на форме элемент
    ИскатьТекущуюСтроку = (ТекущаяСтрока <> Неопределено);
    
    СтруктураОтбора = Новый Структура("Идентификатор", Неопределено);
    
    Для Каждого ЭлементСтрокиДерева Из СтрокаДереваЗначений Цикл
        // Обновляем идентификаторы строк
        НайденнаяСтрока = ТаблицаРазвернутыхСтрокДерева.Найти(ЭлементСтрокиДерева.Данные, "Данные");
        Если НайденнаяСтрока <> Неопределено Тогда 
            НайденнаяСтрока.Идентификатор = ЭлементСтрокиДерева.ПолучитьИдентификатор(); 
        КонецЕсли; 
        
        Если ИскатьТекущуюСтроку Тогда
            // Ищем новый индекс выделенной в элементе строки
            Если ЭлементСтрокиДерева.Данные = ТекущаяСтрока Тогда
                ТекущаяСтрока = ЭлементСтрокиДерева.ПолучитьИдентификатор();
            КонецЕсли;
        КонецЕсли;
        
        // Чтобы исключить ситуацию, когда все индексы найдены, а перебор дерева
        // еще идет, проверим строки со значением Неопределено.
        Если НЕ ИскатьТекущуюСтроку И ТаблицаРазвернутыхСтрокДерева.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда
            Прервать;
        КонецЕсли;        
        
        ОбновитьТаблицуИдентификаторовСтрокДереваНаСервере(ТаблицаРазвернутыхСтрокДерева, ЭлементСтрокиДерева, ТекущаяСтрока); 
    КонецЦикла;    
    
КонецПроцедуры
&НаСервере
Процедура ЗаполнитьДеревоРекурсивно(СтрокиИсточник, СтрокиПриемник)
	
	Для Каждого СтрокаИсточник Из СтрокиИсточник Цикл
		Если СтрокаИсточник.СистемныеПоляУровень = 1 Тогда
			СтрокаПриемник = СтрокиПриемник.Добавить();
			СтрокаПриемник.Данные = СтрокаИсточник.Подразделение;
			СтрокаПриемник.Уровень = СтрокаИсточник.СистемныеПоляУровень;
			СтрокаПриемник.ТипДоговор = Ложь;
			ЗаполнитьДеревоРекурсивно(СтрокаИсточник.Строки, СтрокаПриемник.ПолучитьЭлементы());
		ИначеЕсли СтрокаИсточник.СистемныеПоляУровень = 2 Тогда
			СтрокаПриемник = СтрокиПриемник.Добавить();
			СтрокаПриемник.Данные = СтрокаИсточник.ГруппировкаДоговор;
			СтрокаПриемник.Уровень = СтрокаИсточник.СистемныеПоляУровень;
			СтрокаПриемник.ТипДоговор = ?(ТипЗнч(СтрокаИсточник.ГруппировкаДоговор)= Тип("СправочникСсылка.Договоры"), Истина, Ложь);
			ЗаполнитьДеревоРекурсивно(СтрокаИсточник.Строки, СтрокаПриемник.ПолучитьЭлементы());
		ИначеЕсли СтрокаИсточник.СистемныеПоляУровень >= 3 Тогда
			Если СтрокаИсточник.Файл = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаПриемник = СтрокиПриемник.Добавить();
			СтрокаПриемник.Данные = СтрокаИсточник.Файл;
			СтрокаПриемник.Уровень = СтрокаИсточник.СистемныеПоляУровень;
			СтрокаПриемник.ТипДоговор = Ложь;
			СтрокаПриемник.ЭтоГруппа = СтрокаИсточник.ФайлЭтоГруппа;
			ЗаполнитьДеревоРекурсивно(СтрокаИсточник.Строки, СтрокаПриемник.ПолучитьЭлементы());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ТекущиеДанные.Данные) = Тип("Строка") Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Уровень >= 3 Тогда
		Если ТекущиеДанные.ЭтоГруппа Тогда
			ПоказатьЗначение(,ТекущиеДанные.Данные);	
		Иначе
			ОткрытьФайл(ТекущиеДанные.Данные);
		КонецЕсли;
	Иначе
		ПоказатьЗначение(,ТекущиеДанные.Данные);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура мОбновитьДанные(Результат, ДопПараметры) Экспорт
	ОбновитьДерево();	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Данные)
	КакОткрывать = РаботаСФайламиСлужебныйКлиент.ПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, Данные);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Данные,
		Неопределено, УникальныйИдентификатор, Неопределено, );
	
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	// Запоминаем текущий выделенный элемент дерева
	ТекущаяСтрока = Элементы.Дерево.ТекущаяСтрока;
	
	ОбновитьДерево();
	
	//Для Каждого Строка ИЗ Дерево.ПолучитьЭлементы() Цикл
	//	Элементы.Дерево.Развернуть(Строка.ПолучитьИдентификатор());
	//КонецЦикла;
	//// Пробегаемся по списку и восстанавливаем развернутые узлы
	//Для Каждого ЭлементСоответствия Из СоответствиеИдентификаторовРазвернутыхСтрокДерева Цикл
	//    Элементы.Дерево.Развернуть(ЭлементСоответствия.Значение);
	//КонецЦикла;
    
	// Выделяем ранее запомненный элемент
	Если ТекущаяСтрока <> Неопределено И ТекущаяСтрока > -1 Тогда
	    Элементы.Дерево.ТекущаяСтрока = ТекущаяСтрока;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ТекущиеДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если Элементы.Дерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ (ТекущиеДанные.Уровень) >= 3 Тогда
		Возврат;
	КонецЕсли;
	//ОписаниеОповещения = Новый ОписаниеОповещения("мОбновитьДанные", ЭтаФорма);
	ПоказатьЗначение(, ТекущиеДанные.Данные);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередСворачиванием(Элемент, Строка, Отказ)
	//// Если узел свернут, хранить его состояние нам уже не требуется
	//ТекущаяСтрока = Дерево.НайтиПоИдентификатору(Строка);
	//Если ТекущаяСтрока <> Неопределено Тогда
	//    НайденноеЗначение = СоответствиеИдентификаторовРазвернутыхСтрокДерева.Найти(ТекущаяСтрока.Данные);
	//    СоответствиеИдентификаторовРазвернутыхСтрокДерева.Удалить(НайденноеЗначение);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	//// Запоминаем идентификатор строки развернутого узла
	//ТекущаяСтрока = Дерево.НайтиПоИдентификатору(Строка);
	//Если ТекущаяСтрока <> Неопределено Тогда
	//    НайденноеЗначение = СоответствиеИдентификаторовРазвернутыхСтрокДерева.Найти(ТекущаяСтрока.Данные);
	//    
	//    Если НайденноеЗначение = Неопределено Тогда
	//        СоответствиеИдентификаторовРазвернутыхСтрокДерева.Добавить(ТекущаяСтрока.Данные);
	//    КонецЕсли;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьОтборыПоПараметрамСеанса" Тогда
		ОбновитьДерево();
	КонецЕсли;
КонецПроцедуры

