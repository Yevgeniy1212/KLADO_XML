Процедура ЗаполнитьПоОснованиюЗадачи(Объект, ДанныеЗаполнения) Экспорт
	//
	//Запрос = Новый Запрос;
	//Запрос.Текст = 
	//	"ВЫБРАТЬ
	//	|	Задачи.Ссылка КАК Задача,
	//	|	Задачи.Владелец КАК Договор,
	//	|	Задачи.Администратор КАК АдминистраторЗадачи,
	//	|	ВЫРАЗИТЬ(Задачи.Владелец КАК Справочник.Договоры).Администратор КАК АдминистраторДоговора
	//	|ПОМЕСТИТЬ ВТ
	//	|ИЗ
	//	|	Справочник.Задачи КАК Задачи
	//	|ГДЕ
	//	|	Задачи.Ссылка = &ДанныеЗаполнения
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	МАКСИМУМ(ПроектыДоговоры.Ссылка) КАК Проект,
	//	|	ПроектыДоговоры.Договор КАК Договор
	//	|ПОМЕСТИТЬ ВТ_Проекты
	//	|ИЗ
	//	|	Справочник.Проекты.Договоры КАК ПроектыДоговоры
	//	|ГДЕ
	//	|	ПроектыДоговоры.Договор В
	//	|			(ВЫБРАТЬ
	//	|				вт.Договор
	//	|			ИЗ
	//	|				вт)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ПроектыДоговоры.Договор
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ВТ.Задача КАК Задача,
	//	|	ВТ.Договор КАК Договор,
	//	|	ВТ.АдминистраторЗадачи КАК АдминистраторЗадачи,
	//	|	ВТ.АдминистраторДоговора КАК АдминистраторДоговора,
	//	|	ЕСТЬNULL(ВТ_Проекты.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)) КАК Проект
	//	|ИЗ
	//	|	ВТ КАК ВТ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Проекты КАК ВТ_Проекты
	//	|		ПО ВТ.Договор = ВТ_Проекты.Договор
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ЗадачиРесурсы.Ссылка КАК Ссылка,
	//	|	ЗадачиРесурсы.НомерСтроки КАК НомерСтроки,
	//	|	ЗадачиРесурсы.Ресурс КАК Ресурс,
	//	|	ЗадачиРесурсы.Количество КАК Количество
	//	|ИЗ
	//	|	ВТ КАК ВТ
	//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Задачи.Ресурсы КАК ЗадачиРесурсы
	//	|		ПО ВТ.Задача = ЗадачиРесурсы.Ссылка";
	//
	//Запрос.УстановитьПараметр("ДанныеЗаполнения", ДанныеЗаполнения);
	//
	//Результат = Запрос.ВыполнитьПакет();
	//
	//ВыборкаШапка = Результат[Результат.Количество()-2].Выбрать();
	//ВыборкаШапка.Следующий();
	//
	//ЗаполнитьЗначенияСвойств(Объект, ВыборкаШапка);
	//
	//ВыборкаРесурсы = Результат[Результат.Количество()-1].Выбрать();
	//
	//Пока ВыборкаРесурсы.Следующий() Цикл
	//	СтрокаТаблицы = Объект.Ресурсы.Добавить();
	//	СтрокаТаблицы.Ресурс = ВыборкаРесурсы.Ресурс;
	//	СтрокаТаблицы.Количество = ВыборкаРесурсы.Количество;
	//КонецЦикла;
	//
КонецПроцедуры


Процедура ЗаполнитьПоОснованиюДоговора(Объект, ДанныеЗаполнения) Экспорт
	
	Объект.Договор					= ДанныеЗаполнения; 
	Объект.АдминистраторДоговора	= ДанныеЗаполнения.Администратор;
	ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения);
	
КонецПроцедуры

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Перемещение товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_ЗаявкаНаРесурсы";
	КомандаПечати.Представление = НСтр("ru = 'Заявка на ресурсы'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	// Печать накладной на перемещение.
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_ЗаявкаНаРесурсы");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_ЗаявкаНаРесурсы",
			НСтр("ru = 'Заявка на ресурсы'"),
			ПечатнаяФормаДоговора(МассивОбъектов, ОбъектыПечати),
			,
			"Документ.ЗаявкаНаРесурсы.ПФ_ЗаявкаНаРесурсы");
	КонецЕсли;
		
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#Область СлужебныеПроцедурыИФункции

Функция ПечатнаяФормаДоговора(МассивОбъектов, ОбъектыПечати)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаявкаНаРесурсы.Ссылка КАК Ссылка,
	|	ЗаявкаНаРесурсы.Номер КАК Номер,
	|	ЗаявкаНаРесурсы.Дата КАК Дата,
	|	ЗаявкаНаРесурсы.Договор.Представление КАК Договор,
	|	ЗаявкаНаРесурсы.Задача КАК Задача,
	|	ЗаявкаНаРесурсы.Задача.Наименование КАК ЗадачаНаименование,
	|	ЗаявкаНаРесурсы.Задача.Администратор КАК ЗадачаАдминистратор,
	|	ЗаявкаНаРесурсы.Задача.ДатаНачала КАК ЗадачаДатаНачала,
	|	ЗаявкаНаРесурсы.Задача.ДатаОкончания КАК ЗадачаДатаОкончания,
	|	ЗаявкаНаРесурсы.Задача.СтатусЗадачи КАК ЗадачаСтатусЗадачи,
	|	ЗаявкаНаРесурсы.Проект.Наименование КАК ПроектНаименование,
	|	ЗаявкаНаРесурсы.Проект.ДатаНачала КАК ПроектДатаНачала,
	|	ЗаявкаНаРесурсы.Проект.ДатаОкончания КАК ПроектДатаОкончания,
	|	ЗаявкаНаРесурсы.Проект.Администратор КАК ПроектАдминистратор,
	|	ЗаявкаНаРесурсы.АдминистраторДоговора КАК АдминистраторДоговора,
	|	ЗаявкаНаРесурсы.Персонал.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Должность КАК Должность,
	|		КоличествоСтавок КАК КоличествоСтавок,
	|		КоличествоЧасов КАК КоличествоЧасов
	|	) КАК Персонал,
	|	ЗаявкаНаРесурсы.Деньги.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Контрагент КАК Контрагент,
	|		Договор КАК Договор,
	|		Сумма КАК Сумма
	|	) КАК Деньги,
	|	ЗаявкаНаРесурсы.Материалы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Материал КАК Материал,
	|		Количество КАК Количество
	|	) КАК Материалы,
	|	ЗаявкаНаРесурсы.Инструменты.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Инструмент КАК Инструмент,
	|		КоличествоЧасов КАК КоличествоЧасов
	|	) КАК Инструменты,
	|	ЗаявкаНаРесурсы.Согласующие.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Сотрудник КАК Сотрудник
	|	) КАК Согласующие
	|ИЗ
	|	Документ.ЗаявкаНаРесурсы КАК ЗаявкаНаРесурсы
	|ГДЕ
	|	ЗаявкаНаРесурсы.Ссылка В(&Ссылка)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	Пакет = Запрос.Выполнить();
	
	Шапка = Пакет.Выбрать();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПФ_ЗаявкаНаРесурсы";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.ЗаявкаНаРесурсы.ПФ_ЗаявкаНаРесурсы");
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьЗаголовок.Параметры.НомерДокумента = Шапка.Номер;
		ОбластьЗаголовок.Параметры.ДатаДокумента = Формат(Шапка.Дата, "ДФ=dd.MM.yyyy");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, Шапка);
		ОбластьШапка.Параметры.ЗадачаДатаНачала = Формат(ОбластьШапка.Параметры.ЗадачаДатаНачала, "ДФ=dd.MM.yyyy");
		ОбластьШапка.Параметры.ЗадачаДатаОкончания = Формат(ОбластьШапка.Параметры.ЗадачаДатаОкончания, "ДФ=dd.MM.yyyy");
		ОбластьШапка.Параметры.ПроектДатаНачала = Формат(ОбластьШапка.Параметры.ПроектДатаНачала, "ДФ=dd.MM.yyyy");
		ОбластьШапка.Параметры.ПроектДатаОкончания = Формат(ОбластьШапка.Параметры.ПроектДатаОкончания, "ДФ=dd.MM.yyyy");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		//ТЗРесурсы = Шапка.Ресурсы.Выгрузить();
		//Для Каждого Строка из ТЗРесурсы Цикл
		//	ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, Строка);
		//	ТабличныйДокумент.Вывести(ОбластьСтрока);
		//КонецЦикла;
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы3");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы3");
		Строка = Шапка.Персонал.Выбрать();
		Пока Строка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, Строка);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы2");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы2");
		Строка = Шапка.Деньги.Выбрать();
		Пока Строка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, Строка);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы1");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы1");
		Строка = Шапка.Инструменты.Выбрать();
		Пока Строка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, Строка);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		ОбластьШапка = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы");
		Строка = Шапка.Материалы.Выбрать();
		Пока Строка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, Строка);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
	
КонецФункции

#КонецОбласти
#КонецЕсли
