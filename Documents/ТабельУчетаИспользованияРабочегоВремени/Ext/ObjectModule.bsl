Перем СоответствиеПричинОтсутствияКолонкамТабеля;


Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	Месяц = НачалоМесяца(ТекущаяДата());
КонецПроцедуры

Процедура ЗаполнитьПоИспользованиямРесурсов(ПерсоналФильтр = Неопределено) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 		
	"ВЫБРАТЬ
	|	ЕжедневноеИспользованиеРесурсов.Ссылка КАК Ссылка,
	|	ЕжедневноеИспользованиеРесурсов.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.ЕжедневноеИспользованиеРесурсов КАК ЕжедневноеИспользованиеРесурсов
	|ГДЕ
	|	ЕжедневноеИспользованиеРесурсов.ПометкаУдаления = ЛОЖЬ
	|	И ЕжедневноеИспользованиеРесурсов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Персонал.Ссылка КАК Ссылка,
	|	Персонал.Предприятие КАК Предприятие,
	|	Персонал.ПроизводственныйКалендарь КАК ПоПроизводственномуКалендарю,
	|	Персонал.ГрафикРаботы.КоличествоЧасовВДень КАК КоличествоЧасовВДень
	|ПОМЕСТИТЬ ВТ_Персонал
	|ИЗ
	|	Справочник.Персонал КАК Персонал
	|ГДЕ
	|	Персонал.ТиповоеПодразделение = &Подразделение
	|	И Персонал.ПометкаУдаления = ЛОЖЬ
	|	И Персонал.Предприятие = &Предприятие
	|	И ВЫБОР
	|			КОГДА &УказанПерсонал
	|				ТОГДА Персонал.Ссылка = &Персонал
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Персонал.Ссылка КАК Ссылка,
	|	ВТ_Персонал.Предприятие КАК Предприятие,
	|	ВТ_Персонал.ПоПроизводственномуКалендарю КАК РаботаетПоПроизводственномуКалендарю,
	|	ВТ_Персонал.КоличествоЧасовВДень КАК КоличествоЧасовВДень
	|ИЗ
	|	ВТ_Персонал КАК ВТ_Персонал
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Персонал.Ссылка КАК Персонал,
	|	НАЧАЛОПЕРИОДА(ВТ_Документы.Дата, ДЕНЬ) КАК Дата,
	|	СУММА(ЕжедневноеИспользованиеРесурсовПерсонал.НочныеЧасы) КАК НочныеЧасы,
	|	СУММА(ЕжедневноеИспользованиеРесурсовПерсонал.Количество) КАК ДневныеЧасы,
	|	СУММА(ЕжедневноеИспользованиеРесурсовПерсонал.ВыходныеПраздничные) КАК ВыходныеПраздничные
	|ИЗ
	|	ВТ_Персонал КАК ВТ_Персонал
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЕжедневноеИспользованиеРесурсов.Персонал КАК ЕжедневноеИспользованиеРесурсовПерсонал
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|			ПО ЕжедневноеИспользованиеРесурсовПерсонал.Ссылка = ВТ_Документы.Ссылка
	|		ПО ВТ_Персонал.Ссылка = ЕжедневноеИспользованиеРесурсовПерсонал.Персонал
	|ГДЕ
	|	(ЕжедневноеИспользованиеРесурсовПерсонал.НочныеЧасы <> 0
	|			ИЛИ ЕжедневноеИспользованиеРесурсовПерсонал.Количество <> 0
	|			ИЛИ ЕжедневноеИспользованиеРесурсовПерсонал.ВыходныеПраздничные <> 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Персонал.Ссылка,
	|	НАЧАЛОПЕРИОДА(ВТ_Документы.Дата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Персонал.Ссылка КАК Персонал,
	|	НАЧАЛОПЕРИОДА(ВТ_Документы.Дата, ДЕНЬ) КАК Дата,
	|	МАКСИМУМ(ЕжедневноеИспользованиеРесурсовПерсонал.ПричинаОтсутствия) КАК ПричинаОтсутствия
	|ИЗ
	|	ВТ_Персонал КАК ВТ_Персонал
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЕжедневноеИспользованиеРесурсов.Персонал КАК ЕжедневноеИспользованиеРесурсовПерсонал
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Документы КАК ВТ_Документы
	|			ПО ЕжедневноеИспользованиеРесурсовПерсонал.Ссылка = ВТ_Документы.Ссылка
	|		ПО ВТ_Персонал.Ссылка = ЕжедневноеИспользованиеРесурсовПерсонал.Персонал
	|ГДЕ
	|	ЕжедневноеИспользованиеРесурсовПерсонал.ПричинаОтсутствия <> &ПустаяПричинаОтсутствия
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Персонал.Ссылка,
	|	НАЧАЛОПЕРИОДА(ВТ_Документы.Дата, ДЕНЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ДанныеПроизводственногоКалендаря.ВидДня <> ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)";	
	Запрос.УстановитьПараметр("НачалоПериода",           НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("КонецПериода",            КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("Предприятие",             Предприятие);
	Запрос.УстановитьПараметр("Подразделение",           Подразделение);
	Запрос.УстановитьПараметр("ПустаяПричинаОтсутствия", Справочники.ПричиныОтсутствия.ПустаяСсылка());
	Запрос.УстановитьПараметр("УказанПерсонал",          ЗначениеЗаполнено(ПерсоналФильтр));
	Запрос.УстановитьПараметр("Персонал",                ПерсоналФильтр);
	
	РезультатЗапросаПакет = Запрос.ВыполнитьПакет();
	                                                               
	ВыборкаПерсонал = РезультатЗапросаПакет[2].Выбрать(); 
	
	ТаблицаЧасы = РезультатЗапросаПакет[3].Выгрузить();
	ТаблицаПричиныОтсутствия = РезультатЗапросаПакет[4].Выгрузить();
	
	НеРабочиеДниЗаПериод = РезультатЗапросаПакет[5].Выгрузить().ВыгрузитьКолонку("Дата");
	
	НачалоОтсчета = НачалоМесяца(Месяц);
	СтруктураПоиска = Новый Структура("Дата, Персонал");
	
	Пока ВыборкаПерсонал.Следующий() Цикл
		
		СтруктураПоискаСтроки = Новый Структура("Персонал, Предприятие", ВыборкаПерсонал.Ссылка, ВыборкаПерсонал.Предприятие);
		
		НайденныеСтрокиТабеля = Табель.НайтиСтроки(СтруктураПоискаСтроки);
		
		Если НайденныеСтрокиТабеля.Количество() Тогда
			НоваяСтрокаТабеля = НайденныеСтрокиТабеля[0];
		Иначе			
			НоваяСтрокаТабеля = Табель.Добавить();
			НоваяСтрокаТабеля.Персонал    = ВыборкаПерсонал.Ссылка;
			НоваяСтрокаТабеля.Предприятие = ВыборкаПерсонал.Предприятие;			
		КонецЕсли; 
				
		РаботаетПоПроизводственномуКалендарю = ВыборкаПерсонал.РаботаетПоПроизводственномуКалендарю;
		
		Для СчетчикДней = 1 По 31 Цикл
			
			ДатаПоиска = ПрибавитьКДатеДень(НачалоОтсчета, СчетчикДней - 1);
			
			СтруктураПоиска.Персонал = ВыборкаПерсонал.Ссылка;
			СтруктураПоиска.Дата = ДатаПоиска;
			
			НайденныеПричиныОтсутствия = ТаблицаПричиныОтсутствия.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеПричиныОтсутствия.Количество() Тогда
				
				НайденнаяПричинаОтсутствия = НайденныеПричиныОтсутствия[0].ПричинаОтсутствия;
				
				НоваяСтрокаТабеля["ПричинаОтсутствия" + СчетчикДней] = НайденнаяПричинаОтсутствия;
				
				Если НайденнаяПричинаОтсутствия = Справочники.ПричиныОтсутствия.ОтпускССохранениемЗаработнойПлаты Тогда
					
					Если РаботаетПоПроизводственномуКалендарю Тогда
						НоваяСтрокаТабеля["Число" + СчетчикДней] = 8; // Попросили вбить 8 если человек работает по произв. календарю
					Иначе
						НоваяСтрокаТабеля["Число" + СчетчикДней] = ВыборкаПерсонал.КоличествоЧасовВДень;
					КонецЕсли; 
					
					Продолжить;
					
				ИначеЕсли НайденныеПричиныОтсутствия[0].ПричинаОтсутствия <> Справочники.ПричиныОтсутствия.СлужебныеКоммандировки Тогда
					// Командировка считается рабочим временем. Надо получить количество часов в командировке
					Продолжить;
				КонецЕсли; 
				
			КонецЕсли; 
						
			НайденныеЧасы = ТаблицаЧасы.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеЧасы.Количество() Тогда
				
				Если ЗначениеЗаполнено(НайденныеЧасы[0].ВыходныеПраздничные) Тогда
					НоваяСтрокаТабеля.ВсегоОтработанноеКоличествоЧасов = НоваяСтрокаТабеля.ВсегоОтработанноеКоличествоЧасов + 
						НайденныеЧасы[0].ВыходныеПраздничные;
					
					НоваяСтрокаТабеля.ДниФактическойРаботы = НоваяСтрокаТабеля.ДниФактическойРаботы + 1;
					НоваяСтрокаТабеля["Число" + СчетчикДней] = НайденныеЧасы[0].ВыходныеПраздничные;
					НоваяСтрокаТабеля["ПричинаОтсутствия" + СчетчикДней] = Справочники.ПричиныОтсутствия.ВыходныеИПраздничныеДни;
					НоваяСтрокаТабеля.Праздничных = НоваяСтрокаТабеля.Праздничных + НайденныеЧасы[0].ВыходныеПраздничные;
					
					Продолжить;
				КонецЕсли; 
				
				СуммаЧасов = НайденныеЧасы[0].ДневныеЧасы + НайденныеЧасы[0].НочныеЧасы;
				
				НоваяСтрокаТабеля["Число" + СчетчикДней] = СуммаЧасов;
				НоваяСтрокаТабеля.Ночных = НоваяСтрокаТабеля.Ночных + НайденныеЧасы[0].НочныеЧасы;
				
				НоваяСтрокаТабеля.ВсегоОтработанноеКоличествоЧасов = НоваяСтрокаТабеля.ВсегоОтработанноеКоличествоЧасов + СуммаЧасов;
				
				НоваяСтрокаТабеля.ДниФактическойРаботы = НоваяСтрокаТабеля.ДниФактическойРаботы + 1;
				
				Продолжить;
				
			КонецЕсли;
			
			Если РаботаетПоПроизводственномуКалендарю Тогда
				ЭтоНеРабочийДень = Не НеРабочиеДниЗаПериод.Найти(ДатаПоиска) = Неопределено;
				
				Если ЭтоНеРабочийДень Тогда
					НоваяСтрокаТабеля["ПричинаОтсутствия" + СчетчикДней] = Справочники.ПричиныОтсутствия.ВыходныеИПраздничныеДни;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла; 
		
		СобратьИтогПропущенныхДнейВСтрокеТабеля(НоваяСтрокаТабеля);
		
	КонецЦикла; 
		
КонецПроцедуры

Функция ПрибавитьКДатеДень(Дата, Дней)
	
	Возврат Дата + 86400 * Дней;
	
КонецФункции

Процедура СобратьИтогПропущенныхДнейВСтрокеТабеля(СтрокаТабеля) Экспорт
	
	Если СоответствиеПричинОтсутствияКолонкамТабеля = Неопределено Тогда
		
		Соответствие = Новый Соответствие;
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.СлужебныеКоммандировки , "Коммандировки");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.ЕжегодныйТрудовойОтпуск , "ЕжегодныйТрудовойОтпуск");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.ОтпускВСвязиСРождениемРебенка , "ОтпускВСвязиСРождениемРебенка");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.Нетрудоспособность , "Болезнь");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.УчебныйОтпуск , "УчебныйОтпуск");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.НеявкиРазрешенныеЗаконом , "ПрочиеНеявкиРазрешенныеЗаконом");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.Прогул , "Прогул");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.ОтпускБезСохраненияЗаработнойПлаты , "СРазрешенияАдминистрации");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.НевыходНаРаботуДоПриемаИПослеУвольнения , "НаРаботуДоПриемаИПослеУвольнения");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.Неявка , "ОпозданияИПреждевременныйУход");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.ПереводВДругоеПодразделение , "НаРаботуДоПереводаИПослеВозвращенияНаСвоеРабочееМесто");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.ОтпускССохранениемЗаработнойПлаты , "ОтпускССохранениемЗППоКолДоговору");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.ВыходныеИПраздничныеДни , "ВыходныеИПраздничныеДни");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.Простой , "Простой");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.ЛьготныеЧасыПодростков , "ЛьготныеЧасыПодростковДо18Лет");
		Соответствие.Вставить(Справочники.ПричиныОтсутствия.ПерерывыДляКормленияРебенка , "ПерерывДляКормленияРебенка");
		
		СоответствиеПричинОтсутствияКолонкамТабеля = Соответствие;
		
	КонецЕсли;
	
	Для СчетчикДней = 1 По 31 Цикл
		
		ТекущаяПричинаОтсутствия = СтрокаТабеля["ПричинаОтсутствия" + СчетчикДней];
		
		ИмяКолонки = СоответствиеПричинОтсутствияКолонкамТабеля.Получить(ТекущаяПричинаОтсутствия);
		
		Если ИмяКолонки = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		СтрокаТабеля[ИмяКолонки] = СтрокаТабеля[ИмяКолонки] + 1;
		
	КонецЦикла;
	
КонецПроцедуры

 