#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	Если НЕ Объект.Ссылка.Пустая() Тогда 
		ЗаполнитьДеревоДоходовИзТаблицы(Объект.Ссылка);
		ЗаполнитьДеревоРасходовИзТаблицы(Объект.Ссылка);
	ИначеЕсли ЗначениеЗаполнено(параметры.ЗначениеКопирования) Тогда
		ЗаполнитьДеревоДоходовИзТаблицы(параметры.ЗначениеКопирования);
		ЗаполнитьДеревоРасходовИзТаблицы(параметры.ЗначениеКопирования);
	Иначе
		НоваяСтрока = ДеревоДоходов.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ПродуктПроектДоговор = "Доходы";
		НоваяСтрока = ДеревоРасходов.ПолучитьЭлементы().Добавить();
		НоваяСтрока.ВидСтатьяДоговор = "Расходы";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ДеревоДоходов.ПолучитьЭлементы().Количество() > 0 Тогда
		ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);
	КонецЕсли;
	Если ДеревоРасходов.ПолучитьЭлементы().Количество() > 0 Тогда
		ОбновитьИтоговыеСуммыДеревоРасходовРекурсивно(ДеревоРасходов.ПолучитьЭлементы()[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаполнитьТабЧастьДоходы();
	ЗаполнитьТабЧастьРасходы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда 
		ЭтоГруппа = ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ЭтоГруппа");
		Если ЭтоГруппа Тогда
			МассивСтатей = ПолучитьМассивСтатейГруппы(ВыбранноеЗначение);
			Для Каждого ЭлементМассива Из МассивСтатей Цикл 
				ДобавитьСтатьюЗатратРасходыПодбор(ЭлементМассива);	
			КонецЦикла;
		Иначе
			ДобавитьСтатьюЗатратРасходыПодбор(ВыбранноеЗначение)
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ДеревоДоходов

&НаКлиенте
Процедура ЗаполнитьТабЧастьДоходы()
	Объект.Доходы.Очистить();
	СтруктураСтроки = Новый Структура("Проект, Продукт, Договор, Контрагент, Период, ПланДоходов, ФактДоходы, ПланРасходыПоДоговорам, ПланРасходов, ФактРасходы, СуммаПоДоговорамДоходы, СуммаПоДоговорамРасходы");
	СтрокаКорень = ДеревоДоходов.ПолучитьЭлементы()[0];
	Для Каждого Стр ИЗ СтрокаКорень.ПолучитьЭлементы() Цикл
		СтруктураСтроки.Продукт = Стр.ПродуктПроектДоговор;
		СтрокаПродукт = Объект.Доходы.Добавить();
		СтрокаПродукт.Период = Объект.ДатаНачала;
		СтрокаПродукт.Продукт = Стр.ПродуктПроектДоговор;
		СтрокаПродукт.ПланРасходов = Стр.ПланРасходов;
		СтрокаПродукт.ПланПродаж = Стр.ПланПродаж;
		Если Стр.ПолучитьЭлементы().Количество() > 0 Тогда
			Для Каждого Стр ИЗ Стр.ПолучитьЭлементы() Цикл
				СтруктураСтроки.Проект = Стр.ПродуктПроектДоговор;
				Если Стр.ПолучитьЭлементы().Количество() > 0 Тогда
					Для Каждого Стр ИЗ Стр.ПолучитьЭлементы() Цикл
						СтруктураСтроки.Договор = Стр.ПродуктПроектДоговор;
						ЗаполнитьЗначенияСвойств(СтруктураСтроки, Стр, "Контрагент, Период, ПланДоходов, ФактДоходы, ПланРасходыПоДоговорам, ПланРасходов, ФактРасходы, СуммаПоДоговорамДоходы, СуммаПоДоговорамРасходы");
						НоваяСтрока = Объект.Доходы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
					КонецЦикла;
				Иначе
					СтруктураСтроки.Проект = Стр.ПродуктПроектДоговор;
					СтруктураСтроки.Контрагент = Неопределено;
					СтруктураСтроки.Договор = Неопределено;
					ЗаполнитьЗначенияСвойств(СтруктураСтроки, Стр, "Период, ПланДоходов, ФактДоходы, ПланРасходыПоДоговорам, ПланРасходов, ФактРасходы, СуммаПоДоговорамДоходы, СуммаПоДоговорамРасходы");
					НоваяСтрока = Объект.Доходы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ЗаполнитьЗначенияСвойств(СтрокаПродукт, Стр, "ПланДоходов,ФактДоходы,ПланРасходыПоДоговорам, ПланРасходов, ФактРасходы, СуммаПоДоговорамДоходы, СуммаПоДоговорамРасходы");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоДоходовИзТаблицы(СсылкаНаБюджет)
	
	Если Объект.Доходы.Количество() = 0 Тогда
		СтрокаДерево = ДеревоДоходов.ПолучитьЭлементы().Добавить();
		СтрокаДерево.ПродуктПроектДоговор = "Доходы";
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БюджетДоходы.Продукт КАК Продукт,
	|	БюджетДоходы.Проект КАК Проект,
	|	БюджетДоходы.Контрагент КАК Контрагент,
	|	БюджетДоходы.Договор КАК Договор,
	|	БюджетДоходы.Период КАК Период,
	|	БюджетДоходы.ПланПродаж КАК ПланПродаж,
	|	БюджетДоходы.ПланДоходов КАК ПланДоходов,
	|	БюджетДоходы.ФактДоходы КАК ФактДоходы,
	|	БюджетДоходы.ПланРасходов КАК ПланРасходов,
	|	БюджетДоходы.ПланРасходыПоДоговорам КАК ПланРасходыПоДоговорам,
	|	БюджетДоходы.ФактРасходы КАК ФактРасходы,
	|	БюджетДоходы.СуммаПоДоговорамДоходы КАК СуммаПоДоговорамДоходы,
	|	БюджетДоходы.СуммаПоДоговорамРасходы КАК СуммаПоДоговорамРасходы
	|ИЗ
	|	Документ.Бюджет.Доходы КАК БюджетДоходы
	|ГДЕ
	|	БюджетДоходы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Продукт,
	|	Проект,
	|	Договор,
	|	Контрагент,
	|	Период
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	СУММА(ПланПродаж),
	|	СУММА(ПланДоходов),
	|	СУММА(ФактДоходы),
	|	СУММА(ПланРасходов),
	|	СУММА(ПланРасходыПоДоговорам),
	|	СУММА(ФактРасходы),
	|	СУММА(СуммаПоДоговорамДоходы),
	|	СУММА(СуммаПоДоговорамРасходы)
	|ПО
	|	ОБЩИЕ,
	|	Продукт,
	|	Проект";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаБюджет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтог.Следующий() Цикл
		ВыборкаПродукт = ВыборкаИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СтрокаДерево = ДеревоДоходов.ПолучитьЭлементы().Добавить();
		СтрокаДерево.ПродуктПроектДоговор = "Доходы";
		ЗаполнитьЗначенияСвойств(СтрокаДерево, ВыборкаИтог, "ПланПродаж, ФактДоходы, ПланДоходов, ПланРасходов, ПланРасходыПоДоговорам, ФактРасходы, СуммаПоДоговорамДоходы, СуммаПоДоговорамРасходы");
		Пока ВыборкаПродукт.Следующий() Цикл
			СтрокаПродукт = СтрокаДерево.ПолучитьЭлементы().Добавить();
			СтрокаПродукт.ПродуктПроектДоговор = ВыборкаПродукт.Продукт;
			ЗаполнитьЗначенияСвойств(СтрокаПродукт, ВыборкаПродукт, "ПланПродаж, ФактДоходы, ПланДоходов, ПланРасходов, ПланРасходыПоДоговорам, ФактРасходы, СуммаПоДоговорамДоходы, СуммаПоДоговорамРасходы");
			СтрокаПродукт.Период= ВыборкаПродукт.Период;
			СтрокаПродукт.Уровень= 1;
			ВыборкаПроект = ВыборкаПродукт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПроект.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаПроект.Проект) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаПродукт.Период= Неопределено;
				ВыборкаДоговор = ВыборкаПроект.Выбрать();
				СтрокаПроект = СтрокаПродукт.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПроект, ВыборкаПроект, "ФактДоходы, ПланДоходов, ПланРасходов, ПланРасходыПоДоговорам, ФактРасходы, СуммаПоДоговорамДоходы, СуммаПоДоговорамРасходы");
				СтрокаПроект.Период= ВыборкаПроект.Период;
				СтрокаПроект.ПродуктПроектДоговор= ВыборкаПроект.Проект;
				СтрокаПроект.Уровень= 2;
				Пока ВыборкаДоговор.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаДоговор.Договор) Тогда
						Продолжить;
					КонецЕсли;
					СтрокаПроект.Период= Неопределено;
					СтрокаДоговор = СтрокаПроект.ПолучитьЭлементы().Добавить();
					СтрокаДоговор.ПродуктПроектДоговор = ВыборкаДоговор.Договор;
					СтрокаДоговор.Контрагент= ВыборкаДоговор.Контрагент;
					ЗаполнитьЗначенияСвойств(СтрокаДоговор, ВыборкаДоговор, "ФактДоходы, ПланДоходов, ПланРасходов, ПланРасходыПоДоговорам, ФактРасходы, СуммаПоДоговорамДоходы, СуммаПоДоговорамРасходы");
					СтрокаДоговор.Период= ВыборкаДоговор.Период;
					СтрокаДоговор.Уровень= 3;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовПродуктПроектДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛожЬ;
	ТекущиеДанные = Элементы.ДеревоДоходов.ТекущиеДанные;	
	Отбор = Новый Структура();
	мИмяФормы = "";
	Если ТекущиеДанные.Уровень = 1 Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Продукты"));
		Элементы.ДеревоДоходовПродуктПроектДоговор.ОграничениеТипа = новый ОписаниеТипов(Массив); 
	ИначеЕсли ТекущиеДанные.Уровень = 2  Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Проекты"));
		Элементы.ДеревоДоходовПродуктПроектДоговор.ОграничениеТипа = новый ОписаниеТипов(Массив); 
		мИмяФормы = "Проекты";
		Отбор.Вставить("Продукт", ТекущиеДанные.ПолучитьРодителя().ПродуктПроектДоговор);
		//ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПроектаЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные.ПолучитьРодителя()));
		ОткрытьФорму("Справочник."+ мИмяФормы + ".Форма.ФормаВыбора", Новый Структура("Отбор", Отбор), Элемент,,,,);
	ИначеЕсли ТекущиеДанные.Уровень = 3 Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Договоры"));
		Элементы.ДеревоДоходовПродуктПроектДоговор.ОграничениеТипа = новый ОписаниеТипов(Массив); 
		мИмяФормы = "Договоры";
		Отбор.Вставить("Проект", ТекущиеДанные.ПолучитьРодителя().ПродуктПроектДоговор);
		//ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДоговораЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные, Копирование, Доходы", ТекущиеДанные.ПолучитьРодителя(), Ложь, 0));
		ОткрытьФорму("Справочник."+ мИмяФормы + ".Форма.ФормаВыбора", Новый Структура("Отбор", Отбор), Элемент,,,,);
	Иначе
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ТекущиеДанные = Элементы.ДеревоДоходов.ТекущиеДанные;
	Если Копирование Тогда
		Если ТекущиеДанные.Уровень = 3 
			И ЗначениеЗаполнено(ТекущиеДанные.ПродуктПроектДоговор) Тогда
			ВыборДоговораЗавершение(ТекущиеДанные.ПродуктПроектДоговор, Новый Структура("ТекущиеДанные, Копирование, ПланПродаж", 
			ТекущиеДанные.ПолучитьРодителя(), Копирование, ТекущиеДанные.ПланПродаж));	
		Иначе
			Возврат;															
		КонецЕсли;
	Иначе
		Отбор = Новый Структура();
		мИмяФормы = "";
		Если  ТекущиеДанные = Неопределено 
			ИЛИ ТекущиеДанные.Уровень = 0 Тогда
			мИмяФормы = "Продукты";
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПродуктаЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные));
		ИначеЕсли ТекущиеДанные.Уровень = 1 Тогда
			мИмяФормы = "Проекты";
			Отбор.Вставить("Продукт", ТекущиеДанные.ПродуктПроектДоговор);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборПроектаЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные));
		ИначеЕсли ТекущиеДанные.Уровень = 2 ИЛИ ТекущиеДанные.Уровень = 3 Тогда
			мИмяФормы = "Договоры";
			Отбор.Вставить("Проект", ТекущиеДанные.ПродуктПроектДоговор);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДоговораЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные, Копирование, ПланПродаж", ТекущиеДанные, Копирование, ТекущиеДанные.ПланПродаж));
		КонецЕсли; 
		ОткрытьФорму("Справочник."+ мИмяФормы + ".Форма.ФормаВыбора", Новый Структура("Отбор", Отбор), Элемент,,,,ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборДоговораЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		//НоваяСтрока = ДеревоДоходов.ПолучитьЭлементы().Добавить();	
		Возврат;
	КонецЕсли;
	СтрокаРодитель = ДопПараметры.ТекущиеДанные;
	Структура = ПолучитьДанныеСтроки(Результат, 3);
	СтрокаДоговор = СтрокаРодитель.ПолучитьЭлементы().Добавить();
	СтрокаДоговор.Уровень = 3;
	ЗаполнитьЗначенияСвойств(СтрокаДоговор, Структура);
	Если Структура.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1") Тогда
		СтрокаДоговор.ПланДоходов = Структура.СуммаПлан;
		СтрокаДоговор.ПланРасходов = 0;
	Иначе
		СтрокаДоговор.ПланДоходов = 0;
		СтрокаДоговор.ПланРасходов = Структура.СуммаПлан;
	КонецЕсли;
	СтрокаДоговор.ПродуктПроектДоговор = Структура.Ссылка;
	СтрокаДоговор.Период = Объект.ДатаНачала;
	Если ДопПараметры.Свойство("Копирование")
		И ДопПараметры.Копирование Тогда
		СтрокаДоговор.ПланПродаж = ДопПараметры.ПланПродаж;	
	КонецЕсли;
	Элементы.ДеревоДоходов.ТекущаяСтрока = СтрокаДоговор.получитьидентификатор();
КонецПроцедуры

&НаКлиенте
Процедура ВыборПроектаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		//НоваяСтрока = ДеревоДоходов.ПолучитьЭлементы().Добавить();	
		Возврат;
	КонецЕсли;
	//Структура = ПолучитьДанныеСтроки(Результат, 2);
	//ищем продукт
	СтрокаПродукт = ДопПараметры.ТекущиеДанные;
	//ищем проект
	НайденнаяСтрока = Неопределено;
	Для Каждого Стр ИЗ СтрокаПродукт.ПолучитьЭлементы() Цикл
		Если Стр.ПродуктПроектДоговор = Результат Тогда
			НайденнаяСтрока = Стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;		
	Если НайденнаяСтрока = Неопределено Тогда
		СтрокаПроект = СтрокаПродукт.ПолучитьЭлементы().Добавить();
		СтрокаПроект.Уровень = 2;
		СтрокаПроект.ПродуктПроектДоговор = Результат;
	Иначе
		СтрокаПроект = Стр;
	КонецЕсли;
	Элементы.ДеревоДоходов.ТекущаяСтрока = СтрокаПроект.получитьидентификатор();
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ВыборПроектаЗавершениеЗавершение", ЭтотОбъект), "Добавить договоры этого проекта?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПроектаЗавершениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		
		СписокДоговоровПроекта = ПолучитьСписокДоговоровПроекта(Элементы.ДеревоДоходов.ТекущиеДанные.ПродуктПроектДоговор, Объект.Статус);
		
		Для Каждого ЭлементМассива Из СписокДоговоровПроекта Цикл
			
			СтрокаРодитель = Элементы.ДеревоДоходов.ТекущиеДанные;
			Структура = ПолучитьДанныеСтроки(ЭлементМассива, 3);
			СтрокаДоговор = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			СтрокаДоговор.Уровень = 3;
			ЗаполнитьЗначенияСвойств(СтрокаДоговор, Структура);
			Если Структура.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1") Тогда
				СтрокаДоговор.ПланДоходов = Структура.СуммаПлан;
				СтрокаДоговор.ПланРасходов = 0;
			Иначе
				СтрокаДоговор.ПланДоходов = 0;
				СтрокаДоговор.ПланРасходов = Структура.СуммаПлан;
			КонецЕсли;
			СтрокаДоговор.ПродуктПроектДоговор = Структура.Ссылка;
			СтрокаДоговор.Период = Объект.ДатаНачала;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокДоговоровПроекта(Проект, СостояниеИсполнения)
	
	СписокДоговорвПроекта = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Договоры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Договоры КАК Договоры
		|ГДЕ
		|	Договоры.Проект = &Проект
		|	И Договоры.СостояниеИсполнения = &СостояниеИсполнения";
	
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("СостояниеИсполнения", СостояниеИсполнения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокДоговорвПроекта.Добавить(ВыборкаДетальныеЗаписи.Ссылка);	
	КонецЦикла;
	
	Возврат СписокДоговорвПроекта;
	
КонецФункции

&НаКлиенте
Процедура ВыборПродуктаЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		//НоваяСтрока = ДеревоДоходов.ПолучитьЭлементы()[0].Добавить();	
		Возврат;
	КонецЕсли;
	СтрокаРодитель = ДопПараметры.ТекущиеДанные;
	//ищем продукт
	НайденнаяСтрока = Неопределено;
	Для Каждого Стр ИЗ СтрокаРодитель.ПолучитьЭлементы() Цикл
		Если Стр.ПродуктПроектДоговор = Результат Тогда
			НайденнаяСтрока = Стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;		
	Если НайденнаяСтрока = Неопределено Тогда
		СтрокаПродукт = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		СтрокаПродукт.Уровень = 1;
		СтрокаПродукт.ПродуктПроектДоговор = Результат;
	Иначе
		СтрокаПродукт = Стр;
	КонецЕсли;
	Элементы.ДеревоДоходов.ТекущаяСтрока = СтрокаПродукт.получитьидентификатор();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСтроки(Результат, Уровень)
	
	Если Уровень  = 3 Тогда
		Структура = "Проект, Проект.Продукт, Контрагент, Ссылка, СуммаПлан, ТипДоговора, СуммаПоДоговору, СуммаНачисления";
		Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Результат, Структура);	
	ИначеЕсли Уровень = 2 Тогда
		Структура = "Продукт, Ссылка";
		Структура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Результат, Структура);
	КонецЕсли;
	Возврат Структура;
	
КонецФункции

&НаКлиенте
Процедура ДеревоДоходовПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ДеревоДоходов.ТекущиеДанные;
	Если ТекущиеДанные.Уровень = 0 Тогда
		Отказ = Истина
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовДоходыПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоДоходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ПосчитатьСуммуРодителяРекурсивно(ТекущиеДанные, "ПланПродаж");
	
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьСуммуРодителяРекурсивно(ТекущиеДанные, ИмяКолонки)
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	Сумма = 0;
	Для Каждого Строка ИЗ СтрокаРодитель.ПолучитьЭлементы() Цикл
		Сумма = Строка[ИмяКолонки]+ Сумма;		
	КонецЦикла;
	СтрокаРодитель[ИмяКолонки] = Сумма;
	ПосчитатьСуммуРодителяРекурсивно(СтрокаРодитель, ИмяКолонки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.ДеревоДоходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	Если (Элемент.ТекущийЭлемент.Имя = "ДеревоДоходовДоходы" ИЛИ Элемент.ТекущийЭлемент.Имя = "ДеревоДоходовПланРасходов") И Не ТекущиеДанные.Уровень = 1 Тогда
		Отказ = Истина;
	ИначеЕсли НЕ (Элемент.ТекущийЭлемент.Имя = "ДеревоДоходовДоходы" ИЛИ Элемент.ТекущийЭлемент.Имя = "ДеревоДоходовПланРасходов") 
		И ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовПродуктПроектДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Договоры") Тогда
		ТекущиеДанные = Элементы.ДеревоДоходов.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;		
		КонецЕсли;
		РеквДоговор = ПолучитьДанныеСтроки(ВыбранноеЗначение, 3);
		ТекущиеДанные.Контрагент = РеквДоговор.Контрагент;
		Если РеквДоговор.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1") Тогда
			ТекущиеДанные.ПланДоходов = РеквДоговор.СуммаПлан;
		Иначе
			ТекущиеДанные.ПланРасходов = РеквДоговор.СуммаПлан;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПродуктам(Команда)
	
	Если ДеревоДоходов.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество() > 0 Тогда
		ЗаполнитьДоходыПоПродуктамНаСервере(Неопределено, Истина);
		ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);
	Иначе
		мПараметрыВыбора = Новый Структура;
		мПараметрыВыбора.Вставить("РежимВыбора",Истина);
		мПараметрыВыбора.Вставить("МножественныйВыбор",Истина); ///Если хотим несколько значений
		
		ОбработкаВыбора = Новый ОписаниеОповещения("ВыборПродуктовЗавершение", ЭтаФорма);
		
		ОткрытьФорму("Справочник.Продукты.ФормаВыбора",мПараметрыВыбора,
		ЭтаФорма, , , , ОбработкаВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПродуктамПродолжение(Результат, ДопПараметры) Экспорт
	//Если Результат = КодВозвратаДиалога.Нет Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//мПараметрыВыбора = Новый Структура;
	//мПараметрыВыбора.Вставить("РежимВыбора",Истина);
	//мПараметрыВыбора.Вставить("МножественныйВыбор",Истина); ///Если хотим несколько значений
	
	//ОбработкаВыбора = Новый ОписаниеОповещения("ВыборПродуктовЗавершение", ЭтаФорма);
	
	//ОткрытьФорму("Справочник.Продукты.ФормаВыбора",мПараметрыВыбора,
	//        ЭтаФорма, , , , ОбработкаВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПродуктамПлан(Команда)
	
	мПараметрыВыбора = Новый Структура;
	мПараметрыВыбора.Вставить("РежимВыбора",Истина);
	мПараметрыВыбора.Вставить("МножественныйВыбор",Истина); ///Если хотим несколько значений
	
	ОбработкаВыбора = Новый ОписаниеОповещения("ВыборПродуктовЗавершениеПлан", ЭтаФорма);
	
	ОткрытьФорму("Справочник.Продукты.ФормаВыбора",мПараметрыВыбора,
	ЭтаФорма, , , , ОбработкаВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПродуктовЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено 
		ИЛИ Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДоходыПоПродуктамНаСервере(Результат);
	ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПродуктовЗавершениеПлан(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено 
		ИЛИ Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДоходыПоПродуктамНаСервере(Результат,,,Истина);
	ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);
	
КонецПроцедуры

&НаСервере
Процедура стар_ЗаполнитьДоходыПоПродуктамНаСервере(МассивПродуктов, ЗаполнятьПоТекущим = Ложь)
	
	Если ЗаполнятьПоТекущим Тогда
		МассивПродуктов = ОбщегоНазначения.ВыгрузитьКолонку(ДеревоДоходов.ПолучитьЭлементы()[0].ПолучитьЭлементы(), "ПродуктПроектДоговор", Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// |ВЫБРАТЬ
	//|	ЕСТЬNULL(Проекты.Ссылка, НЕОПРЕДЕЛЕНО) КАК Проект,
	//|	Продукты.Ссылка КАК Продукт,
	//|	ЕСТЬNULL(Договоры.Ссылка, НЕОПРЕДЕЛЕНО) КАК Договор,
	//|	ЕСТЬNULL(Договоры.Контрагент, НЕОПРЕДЕЛЕНО) КАК Контрагент,
	//|	ВЫБОР
	//|		КОГДА Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	//|			ТОГДА ЕСТЬNULL(Договоры.СуммаПлан, 0)
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК ПланДоходов,
	//|	ВЫБОР
	//|		КОГДА Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	//|			ТОГДА 0
	//|		ИНАЧЕ ЕСТЬNULL(Договоры.СуммаПлан, 0)
	//|	КОНЕЦ КАК ПланРасходыПоДоговорам,
	//|	ВЫБОР
	//|		КОГДА Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	//|			ТОГДА ЕСТЬNULL(Договоры.СуммаПоДоговору, 0)
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК СуммаПоДоговорамДоходы,
	//|	ВЫБОР
	//|		КОГДА Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	//|			ТОГДА 0
	//|		ИНАЧЕ ЕСТЬNULL(Договоры.СуммаПоДоговору, 0)
	//|	КОНЕЦ КАК СуммаПоДоговорамРасходы,
	//|	ВЫБОР
	//|		КОГДА Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	//|			ТОГДА ЕСТЬNULL(Договоры.СуммаНачисления, 0)
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК ФактДоходы,
	//|	ВЫБОР
	//|		КОГДА Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	//|			ТОГДА 0
	//|		ИНАЧЕ ЕСТЬNULL(Договоры.СуммаНачисления, 0)
	//|	КОНЕЦ КАК ФактРасходы
	//|ИЗ
	//|	Справочник.Продукты КАК Продукты
	//|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	//|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Договоры КАК Договоры
	//|			ПО (Договоры.Проект = Проекты.Ссылка)
	//|		ПО (Проекты.Продукт = Продукты.Ссылка)
	//|ГДЕ
	//|	Продукты.Ссылка В(&МассивПродуктов)
	//|	И Договоры.СостояниеИсполнения В(&МассивСостояний)
	//|	И НЕ(Договоры.ЕстьПодчиненные
	//|				И Договоры.ВестиУчетПоДопДоговору)
	//|ИТОГИ
	//|	СУММА(ПланДоходов),
	//|	СУММА(ПланРасходыПоДоговорам),
	//|	СУММА(СуммаПоДоговорамДоходы),
	//|	СУММА(СуммаПоДоговорамРасходы),
	//|	СУММА(ФактДоходы),
	//|	СУММА(ФактРасходы)
	//|ПО
	//|	ОБЩИЕ,
	//|	Продукт,
	//|	Проект
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	"ВЫБРАТЬ
	|	Договоры.Ссылка КАК Договор,
	|	Договоры.ТипДоговора КАК ТипДоговора,
	|	Договоры.Проект КАК Проект,
	|	Договоры.Проект.Продукт КАК ПроектПродукт,
	|	Договоры.СостояниеИсполнения КАК СостояниеИсполнения,
	|	Договоры.СуммаПлан КАК СуммаПлан,
	|	Договоры.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТ_Договоры
	|ИЗ
	|	Справочник.Договоры КАК Договоры
	|ГДЕ
	|	Договоры.СостояниеИсполнения В(&МассивСостояний)
	|	И НЕ(Договоры.ЕстьПодчиненные
	|				И Договоры.ВестиУчетПоДопДоговору)
	|	И Договоры.Проект.Продукт В(&МассивПродуктов)
	|	//ОТБОР ПЕРИОД//
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Договоры.Договор КАК Договор,
	|	СУММА(ДоговорыОплаты.СуммаНачисления) КАК СуммаНачисления
	|ПОМЕСТИТЬ ВТ_Начисления
	|ИЗ
	|	ВТ_Договоры КАК ВТ_Договоры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Договоры.Оплаты КАК ДоговорыОплаты
	|		ПО ВТ_Договоры.Договор = ДоговорыОплаты.Ссылка
	|		//ОТБОР ПЕРИОД2//
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Договоры.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Договоры.Договор КАК Договор,
	|	СУММА(ДоговорыСуммыПоДоговоруПоПериоду.СуммаПоДоговору) КАК СуммаПоДоговору
	|ПОМЕСТИТЬ ВТ_СуммыДоговора
	|ИЗ
	|	ВТ_Договоры КАК ВТ_Договоры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Договоры.СуммыПоДоговоруПоПериоду КАК ДоговорыСуммыПоДоговоруПоПериоду
	|		ПО ВТ_Договоры.Договор = ДоговорыСуммыПоДоговоруПоПериоду.Ссылка
	|		//ОТБОР ПЕРИОД3//
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Договоры.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Договоры.Договор КАК Договор,
	|	ВТ_Договоры.ТипДоговора КАК ТипДоговора,
	|	ВТ_Договоры.Проект КАК Проект,
	|	ВТ_Договоры.ПроектПродукт КАК ПроектПродукт,
	|	ВТ_Договоры.СостояниеИсполнения КАК СостояниеИсполнения,
	|	ВТ_Договоры.СуммаПлан КАК ПланДоходов,
	|	ВТ_Договоры.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(ВТ_Начисления.СуммаНачисления, 0) КАК ФактДоходы,
	|	ЕСТЬNULL(ВТ_СуммыДоговора.СуммаПоДоговору, 0) КАК СуммаПоДоговорамДоходы,
	|	0 КАК ПланРасходыПоДоговорам,
	|	0 КАК ФактРасходы,
	|	0 КАК СуммаПоДоговорамРасходы
	|ПОМЕСТИТЬ ВТ_Итог
	|ИЗ
	|	ВТ_Договоры КАК ВТ_Договоры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Начисления КАК ВТ_Начисления
	|		ПО ВТ_Договоры.Договор = ВТ_Начисления.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммыДоговора КАК ВТ_СуммыДоговора
	|		ПО ВТ_Договоры.Договор = ВТ_СуммыДоговора.Договор
	|ГДЕ
	|	ВТ_Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Договоры.Договор,
	|	ВТ_Договоры.ТипДоговора,
	|	ВТ_Договоры.Проект,
	|	ВТ_Договоры.ПроектПродукт,
	|	ВТ_Договоры.СостояниеИсполнения,
	|	0,
	|	ВТ_Договоры.Контрагент,
	|	0,
	|	0,
	|	ВТ_Договоры.СуммаПлан,
	|	ЕСТЬNULL(ВТ_Начисления.СуммаНачисления, 0),
	|	ЕСТЬNULL(ВТ_СуммыДоговора.СуммаПоДоговору, 0)
	|ИЗ
	|	ВТ_Договоры КАК ВТ_Договоры
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Начисления КАК ВТ_Начисления
	|		ПО ВТ_Договоры.Договор = ВТ_Начисления.Договор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СуммыДоговора КАК ВТ_СуммыДоговора
	|		ПО ВТ_Договоры.Договор = ВТ_СуммыДоговора.Договор
	|ГДЕ
	|	НЕ ВТ_Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Продукты.Ссылка КАК Продукт,
	|	ЕСТЬNULL(ВТ_Итог.Договор, НЕОПРЕДЕЛЕНО) КАК Договор,
	|	ЕСТЬNULL(ВТ_Итог.Проект, НЕОПРЕДЕЛЕНО) КАК Проект,
	|	ЕСТЬNULL(ВТ_Итог.ПланДоходов, 0) КАК ПланДоходов,
	|	ЕСТЬNULL(ВТ_Итог.Контрагент, НЕОПРЕДЕЛЕНО) КАК Контрагент,
	|	ЕСТЬNULL(ВТ_Итог.ФактДоходы, 0) КАК ФактДоходы,
	|	ЕСТЬNULL(ВТ_Итог.СуммаПоДоговорамДоходы, 0) КАК СуммаПоДоговорамДоходы,
	|	ЕСТЬNULL(ВТ_Итог.ПланРасходыПоДоговорам, 0) КАК ПланРасходыПоДоговорам,
	|	ЕСТЬNULL(ВТ_Итог.ФактРасходы, 0) КАК ФактРасходы,
	|	ЕСТЬNULL(ВТ_Итог.СуммаПоДоговорамРасходы, 0) КАК СуммаПоДоговорамРасходы
	|ИЗ
	|	ВТ_Итог КАК ВТ_Итог
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Продукты КАК Продукты
	|		ПО ВТ_Итог.ПроектПродукт = Продукты.Ссылка
	|ГДЕ
	|	Продукты.Ссылка В(&МассивПродуктов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Договор
	|ИТОГИ ПО
	|	ОБЩИЕ,
	|	Продукт,
	|	Проект";
	Если ЗначениеЗаполнено(Объект.ДатаНачала) И ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОТБОР ПЕРИОД//", " И Договоры.ДатаНачала <= &ДатаОкончания И Договоры.Датаокончания >= &ДатаНачала");	
		Запрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончания);
		Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОТБОР ПЕРИОД2//", " И ДоговорыОплаты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания ");	
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ОТБОР ПЕРИОД3//", " И НАЧАЛОПЕРИОДА(ДоговорыСуммыПоДоговоруПоПериоду.Период, Год) = НачалоПериода(&ДатаНачала, Год)");	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивПродуктов", МассивПродуктов);
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СтатусыДоговоровПроектов.Исполняемый);
	МассивСостояний.Добавить(Перечисления.СтатусыДоговоровПроектов.Просроченный);
	МассивСостояний.Добавить(Перечисления.СтатусыДоговоровПроектов.Приоритетный);
	Запрос.УстановитьПараметр("МассивСостояний", МассивСостояний);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтрокаДерево = ДеревоДоходов.ПолучитьЭлементы()[0];
	СтрокаДерево.ФактДоходы = 0;
	СтрокаДерево.ПланДоходов = 0;
	СтрокаДерево.ФактРасходы = 0;
	СтрокаДерево.ПланРасходыПоДоговорам = 0;
	Если НЕ ЗаполнятьПоТекущим Тогда
		СтрокаДерево.ПолучитьЭлементы().Очистить();
		СтрокаДерево.ПланПродаж = 0;
		СтрокаДерево.ПланРасходов = 0;
	КонецЕсли;
	
	ВыборкаИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтог.Следующий() Цикл
		ВыборкаПродукт = ВыборкаИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		//СтрокаДерево.ПланДоходов= ВыборкаИтог.ПланДоходов;
		//СтрокаДерево.ПланРасходыПоДоговорам= ВыборкаИтог.ПланРасходыПоДоговорам;
		ЗаполнитьЗначенияСвойств(СтрокаДерево, ВыборкаИтог, "ПланРасходыПоДоговорам, ПланДоходов, СуммаПоДоговорамДоходы, СуммаПоДоговорамРасходы, ФактДоходы, ФактРасходы");
		Пока ВыборкаПродукт.Следующий() Цикл
			СтрокаПродукт = Неопределено;
			Если ЗаполнятьПоТекущим Тогда
				Для Каждого Стр ИЗ СтрокаДерево.ПолучитьЭлементы() Цикл
					Если Стр.ПродуктПроектДоговор = Выборкапродукт.Продукт Тогда
						СтрокаПродукт = Стр;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СтрокаПродукт = Неопределено Тогда
				СтрокаПродукт = СтрокаДерево.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			СтрокаПродукт.ПродуктПроектДоговор = ВыборкаПродукт.Продукт;
			//СтрокаПродукт.ПланДоходов= ВыборкаПродукт.ПланДоходов;
			//СтрокаПродукт.ПланРасходыПоДоговорам= ВыборкаПродукт.ПланРасходыПоДоговорам;
			ЗаполнитьЗначенияСвойств(СтрокаПродукт, ВыборкаПродукт, "ПланРасходыПоДоговорам, ПланДоходов, СуммаПоДоговорамДоходы, СуммаПоДоговорамРасходы, ФактДоходы, ФактРасходы");
			СтрокаПродукт.Уровень= 1;
			ВыборкаПроект = ВыборкаПродукт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПроект.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаПроект.Проект) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаПродукт.Период= Неопределено;
				ВыборкаДоговор = ВыборкаПроект.Выбрать();
				СтрокаПроект = Неопределено;
				Если ЗаполнятьПоТекущим Тогда
					Для Каждого Стр ИЗ СтрокаПродукт.ПолучитьЭлементы() Цикл
						Если Стр.ПродуктПроектДоговор = ВыборкаПроект.Проект Тогда
							СтрокаПроект = Стр;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если СтрокаПроект = Неопределено Тогда
					СтрокаПроект = СтрокаПродукт.ПолучитьЭлементы().Добавить();
				КонецЕсли;
				СтрокаПроект.ПродуктПроектДоговор = ВыборкаПроект.Проект;
				//СтрокаПроект.ПланДоходов= ВыборкаПроект.ПланДоходов;
				//СтрокаПроект.ПланРасходыПоДоговорам= ВыборкаПроект.ПланРасходыПоДоговорам;
				ЗаполнитьЗначенияСвойств(СтрокаПроект, ВыборкаПроект, "ПланРасходыПоДоговорам, ПланДоходов, СуммаПоДоговорамДоходы, СуммаПоДоговорамРасходы, ФактДоходы, ФактРасходы");
				СтрокаПроект.Уровень= 2;
				Пока ВыборкаДоговор.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаДоговор.Договор) Тогда
						Продолжить;
					КонецЕсли;
					СтрокаПроект.Период= Неопределено;
					СтрокаДоговор = Неопределено;
					Если ЗаполнятьПоТекущим Тогда
						Для Каждого Стр ИЗ СтрокаПроект.ПолучитьЭлементы() Цикл
							Если Стр.ПродуктПроектДоговор = ВыборкаДоговор.Договор Тогда
								СтрокаДоговор = Стр;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если СтрокаДоговор = Неопределено Тогда
						СтрокаДоговор = СтрокаПроект.ПолучитьЭлементы().Добавить();
					КонецЕсли;
					СтрокаДоговор.ПродуктПроектДоговор = ВыборкаДоговор.Договор;
					СтрокаДоговор.Контрагент= ВыборкаДоговор.Контрагент;
					//СтрокаДоговор.ПланДоходов= ВыборкаДоговор.ПланДоходов;
					//СтрокаДоговор.ПланРасходыПоДоговорам= ВыборкаДоговор.ПланРасходыПоДоговорам;
					ЗаполнитьЗначенияСвойств(СтрокаДоговор, ВыборкаДоговор, "ПланРасходыПоДоговорам, ПланДоходов, СуммаПоДоговорамДоходы, СуммаПоДоговорамРасходы, ФактДоходы, ФактРасходы");
					СтрокаДоговор.Период= Объект.ДатаНачала;
					СтрокаДоговор.Уровень= 3;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоходыПоПродуктамНаСервере(МассивПродуктов, ЗаполнятьПоТекущим = Ложь, СписокПолей = Неопределено, ТолькоПлан = Ложь)
	
	Если СписокПолей = Неопределено Тогда 
		СписокПолей = "ПланРасходыПоДоговорам, ПланДоходов, СуммаПоДоговорамДоходы, СуммаПоДоговорамРасходы, ФактДоходы, ФактРасходы";	
	КонецЕсли;
	
	Если ЗаполнятьПоТекущим Тогда
		МассивПродуктов = ОбщегоНазначения.ВыгрузитьКолонку(ДеревоДоходов.ПолучитьЭлементы()[0].ПолучитьЭлементы(), "ПродуктПроектДоговор", Истина);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Проекты.Ссылка, НЕОПРЕДЕЛЕНО) КАК Проект,
	|	Продукты.Ссылка КАК Продукт,
	|	ЕСТЬNULL(Договоры.Ссылка, НЕОПРЕДЕЛЕНО) КАК Договор,
	|	ЕСТЬNULL(Договоры.Контрагент, НЕОПРЕДЕЛЕНО) КАК Контрагент,
	|	ЕСТЬNULL(Договоры.СуммаПлан, 0) КАК ПланДоходов,
	|	0 КАК ПланРасходыПоДоговорам,
	|	ЕСТЬNULL(Договоры.СуммаПоДоговору, 0) КАК СуммаПоДоговорамДоходы,
	|	0 КАК СуммаПоДоговорамРасходы,
	|	ЕСТЬNULL(Договоры.СуммаНачисления, 0) КАК ФактДоходы,
	|	0 КАК ФактРасходы
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Справочник.Продукты КАК Продукты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК Проекты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Договоры КАК Договоры
	|			ПО Проекты.Ссылка = Договоры.Проект
	|		ПО Продукты.Ссылка = Проекты.Продукт
	|ГДЕ
	|	Продукты.Ссылка В(&МассивПродуктов)
	|	И Договоры.СостояниеИсполнения В(&МассивСостояний)
	|	И НЕ(Договоры.ЕстьПодчиненные
	|				И Договоры.ВестиУчетПоДопДоговору)
	|	И Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	|	И (Договоры.ДатаНачала <= &ДатаОкончания
	|				И Договоры.ДатаОкончания >= &ДатаНачала
	|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Проект КАК Проект,
	|	ВТ.Продукт КАК Продукт,
	|	ВТ.Договор КАК Договор,
	|	ВТ.Контрагент КАК Контрагент,
	|	СУММА(ВТ.ПланДоходов) КАК ПланДоходов,
	|	СУММА(ВТ.ПланРасходыПоДоговорам) КАК ПланРасходыПоДоговорам,
	|	СУММА(ВТ.СуммаПоДоговорамДоходы) КАК СуммаПоДоговорамДоходы,
	|	СУММА(ВТ.СуммаПоДоговорамРасходы) КАК СуммаПоДоговорамРасходы,
	|	СУММА(ВТ.ФактДоходы) КАК ФактДоходы,
	|	СУММА(ВТ.ФактРасходы) КАК ФактРасходы
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	|	И НЕ ВТ.Договор.СостояниеИсполнения = ЗНАЧЕНИЕ(Перечисление.СтатусыДоговоровПроектов.Тестируемый)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Контрагент,
	|	ВТ.Проект,
	|	ВТ.Продукт,
	|	ВТ.Договор
	|ИТОГИ
	|	СУММА(ПланДоходов),
	|	СУММА(ПланРасходыПоДоговорам),
	|	СУММА(СуммаПоДоговорамДоходы),
	|	СУММА(СуммаПоДоговорамРасходы),
	|	СУММА(ФактДоходы),
	|	СУММА(ФактРасходы)
	|ПО
	|	ОБЩИЕ,
	|	Продукт,
	|	Проект";
	
	Запрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("МассивПродуктов", МассивПродуктов);
	
	МассивСостояний = Новый Массив;
	
	Если ТолькоПлан Тогда 
		МассивСостояний.Добавить(Перечисления.СтатусыДоговоровПроектов.Планируемый);
	Иначе
		МассивСостояний.Добавить(Перечисления.СтатусыДоговоровПроектов.Исполняемый);
		МассивСостояний.Добавить(Перечисления.СтатусыДоговоровПроектов.Просроченный);
		МассивСостояний.Добавить(Перечисления.СтатусыДоговоровПроектов.Приоритетный);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСостояний", МассивСостояний);
	РезультатЗапроса = Запрос.Выполнить();
	
	СтрокаДерево = ДеревоДоходов.ПолучитьЭлементы()[0];
	СтрокаДерево.ФактДоходы = 0;
	СтрокаДерево.ПланДоходов = 0;
	СтрокаДерево.ФактРасходы = 0;
	СтрокаДерево.ПланРасходыПоДоговорам = 0;
	
	Если НЕ ЗаполнятьПоТекущим Тогда
		СтрокаДерево.ПолучитьЭлементы().Очистить();
		СтрокаДерево.ПланПродаж = 0;
		СтрокаДерево.ПланРасходов = 0;
	КонецЕсли;
	
	ВыборкаИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтог.Следующий() Цикл
		
		ВыборкаПродукт = ВыборкаИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ЗаполнитьЗначенияСвойств(СтрокаДерево, ВыборкаИтог, СписокПолей);
		
		Пока ВыборкаПродукт.Следующий() Цикл
			
			СтрокаПродукт = Неопределено;
			Если ЗаполнятьПоТекущим Тогда
				Для Каждого Стр ИЗ СтрокаДерево.ПолучитьЭлементы() Цикл
					Если Стр.ПродуктПроектДоговор = Выборкапродукт.Продукт Тогда
						СтрокаПродукт = Стр;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СтрокаПродукт = Неопределено Тогда
				СтрокаПродукт = СтрокаДерево.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			СтрокаПродукт.ПродуктПроектДоговор = ВыборкаПродукт.Продукт;
			ЗаполнитьЗначенияСвойств(СтрокаПродукт, ВыборкаПродукт, СписокПолей);
			
			СтрокаПродукт.Уровень	= 1;
			ВыборкаПроект = ВыборкаПродукт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПроект.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаПроект.Проект) Тогда
					Продолжить;
				КонецЕсли;
				СтрокаПродукт.Период	= Неопределено;
				ВыборкаДоговор	= ВыборкаПроект.Выбрать();
				СтрокаПроект = Неопределено;
				Если ЗаполнятьПоТекущим Тогда
					Для Каждого Стр ИЗ СтрокаПродукт.ПолучитьЭлементы() Цикл
						Если Стр.ПродуктПроектДоговор = ВыборкаПроект.Проект Тогда
							СтрокаПроект = Стр;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если СтрокаПроект = Неопределено Тогда
					СтрокаПроект = СтрокаПродукт.ПолучитьЭлементы().Добавить();
				КонецЕсли;
				СтрокаПроект.ПродуктПроектДоговор = ВыборкаПроект.Проект;
				ЗаполнитьЗначенияСвойств(СтрокаПроект, ВыборкаПроект, СписокПолей);
				СтрокаПроект.Уровень = 2;
				Пока ВыборкаДоговор.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаДоговор.Договор) Тогда
						Продолжить;
					КонецЕсли;
					СтрокаПроект.Период = Неопределено;
					СтрокаДоговор = Неопределено;
					Если ЗаполнятьПоТекущим Тогда
						Для Каждого Стр ИЗ СтрокаПроект.ПолучитьЭлементы() Цикл
							Если Стр.ПродуктПроектДоговор = ВыборкаДоговор.Договор Тогда
								СтрокаДоговор = Стр;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если СтрокаДоговор = Неопределено Тогда
						СтрокаДоговор = СтрокаПроект.ПолучитьЭлементы().Добавить();
					КонецЕсли;
					СтрокаДоговор.ПродуктПроектДоговор = ВыборкаДоговор.Договор;
					СтрокаДоговор.Контрагент = ВыборкаДоговор.Контрагент;
					ЗаполнитьЗначенияСвойств(СтрокаДоговор, ВыборкаДоговор, СписокПолей);
					СтрокаДоговор.Период = Объект.ДатаНачала;
					СтрокаДоговор.Уровень = 3;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовПланДоходовПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоДоходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ПосчитатьСуммуРодителяРекурсивно(ТекущиеДанные, "ПланДоходов");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовФактДоходыПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоДоходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ПосчитатьСуммуРодителяРекурсивно(ТекущиеДанные, "ФактДоходы");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовПланРасходовПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоДоходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ПосчитатьСуммуРодителяРекурсивно(ТекущиеДанные, "ПланРасходов");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовПланРасходыПоДоговорамПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоДоходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ПосчитатьСуммуРодителяРекурсивно(ТекущиеДанные, "ПланРасходыПоДоговорам");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовФактРасходыПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоДоходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ПосчитатьСуммуРодителяРекурсивно(ТекущиеДанные, "ФактРасходы");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовПослеУдаления(Элемент)
	ОбновитьСуммыДерева(ДеревоДоходов.ПолучитьЭлементы()[0]);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммыДерева(СтрокаРодитель)
	
	ПланПродаж = 0;
	ПланДоходов = 0;
	ФактДоходы = 0;
	ПланРасходов = 0;
	ПланРасходыПоДоговорам = 0;
	ФактРасходы = 0;
	СуммаПоДоговорамДоходы = 0;
	СуммаПоДоговорамРасходы = 0;
	Если СтрокаРодитель.получитьЭлементы().Количество() > 0 Тогда
		Для Каждого Строка Из СтрокаРодитель.получитьЭлементы() Цикл
			ОбновитьСуммыДерева(Строка);
			ПланДоходов = ПланДоходов + Строка.ПланДоходов;
			ФактДоходы = ФактДоходы + Строка.ФактДоходы;
			ПланРасходыПоДоговорам = ПланРасходыПоДоговорам + Строка.ПланРасходыПоДоговорам;
			ФактРасходы = ФактРасходы + Строка.ФактРасходы;
			СуммаПоДоговорамДоходы = СуммаПоДоговорамДоходы + Строка.СуммаПоДоговорамДоходы;
			СуммаПоДоговорамРасходы = СуммаПоДоговорамРасходы + Строка.СуммаПоДоговорамРасходы;
		КонецЦикла;
	ИначеЕсли  СтрокаРодитель.Уровень > 0 Тогда
		ПланДоходов = СтрокаРодитель.ПланДоходов;
		ФактДоходы = СтрокаРодитель.ФактДоходы;
		ПланРасходыПоДоговорам = СтрокаРодитель.ПланРасходыПоДоговорам;
		ФактРасходы = СтрокаРодитель.ФактРасходы;
		СуммаПоДоговорамДоходы = СтрокаРодитель.СуммаПоДоговорамДоходы;
		СуммаПоДоговорамРасходы = СтрокаРодитель.СуммаПоДоговорамРасходы;
	КонецЕсли;
	
	Если СтрокаРодитель.Уровень = 0 Тогда
		Для Каждого Строка Из СтрокаРодитель.получитьЭлементы() Цикл
			ПланПродаж = ПланПродаж + Строка.ПланПродаж;		
			ПланРасходов = ПланРасходов + Строка.ПланРасходов;
		КонецЦикла;	
		СтрокаРодитель.ПланПродаж = ПланПродаж;
		СтрокаРодитель.ПланРасходов = ПланРасходов;
	КонецЕсли;
	СтрокаРодитель.ПланДоходов = ПланДоходов;
	СтрокаРодитель.ФактДоходы = ФактДоходы;
	СтрокаРодитель.ПланРасходыПоДоговорам = ПланРасходыПоДоговорам;
	СтрокаРодитель.ФактРасходы = ФактРасходы;
	СтрокаРодитель.СуммаПоДоговорамДоходы = СуммаПоДоговорамДоходы;
	СтрокаРодитель.СуммаПоДоговорамРасходы = СуммаПоДоговорамРасходы;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовСуммаПоДоговорамРасходыПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоДоходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ПосчитатьСуммуРодителяРекурсивно(ТекущиеДанные, "СуммаПоДоговорамРасходы");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоДоходовСуммаПоДоговорамДоходыПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоДоходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ПосчитатьСуммуРодителяРекурсивно(ТекущиеДанные, "СуммаПоДоговорамДоходы");
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьСуммыДоговоровДоходы(Команда)
	МассивДоговоров = Новый Массив;
	ПолучитьРеквизитыДереваРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], МассивДоговоров, "ПродуктПроектДоговор", 3);
	Если МассивДоговоров.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	СоответствиеСуммДоговоров = ПерезаполнитьСуммыДоговоровДоходыНаСервере(МассивДоговоров, Объект.ДатаНачала, Объект.ДатаОкончания);
	ЗаполнитьДеревоРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], СоответствиеСуммДоговоров, 3);
	ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыЗаполнитьПланПродаж(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыЗаполнитьПланДоходыПоДоговорам(Команда)
	//ЗаполнитьДоходыПоПродуктамНаСервере(Неопределено, Истина, "ПланДоходов");
	//ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);
	МассивДоговоров = Новый Массив;
	ПолучитьРеквизитыДереваРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], МассивДоговоров, "ПродуктПроектДоговор", 3);
	Если МассивДоговоров.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	СоответствиеСуммДоговоров = ПерезаполнитьСуммыДоговоровДоходыНаСервере(МассивДоговоров, Объект.ДатаНачала, Объект.ДатаОкончания);
	ЗаполнитьДеревоРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], СоответствиеСуммДоговоров, 3, "ПланДоходов");
	ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыЗаполнитьСуммыПоДоговорамДоходы(Команда)
	//ЗаполнитьДоходыПоПродуктамНаСервере(Неопределено, Истина, "СуммаПоДоговорамДоходы");
	//ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);
	МассивДоговоров = Новый Массив;
	ПолучитьРеквизитыДереваРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], МассивДоговоров, "ПродуктПроектДоговор", 3);
	Если МассивДоговоров.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	СоответствиеСуммДоговоров = ПерезаполнитьСуммыДоговоровДоходыНаСервере(МассивДоговоров, Объект.ДатаНачала, Объект.ДатаОкончания);
	ЗаполнитьДеревоРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], СоответствиеСуммДоговоров, 3, "СуммаПоДоговорамДоходы");
	ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыЗаполнитьФактДоходы(Команда)
	МассивДоговоров = Новый Массив;
	ПолучитьРеквизитыДереваРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], МассивДоговоров, "ПродуктПроектДоговор", 3);
	Если МассивДоговоров.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	СоответствиеСуммДоговоров = ПерезаполнитьСуммыДоговоровДоходыНаСервере(МассивДоговоров, Объект.ДатаНачала, Объект.ДатаОкончания);
	ЗаполнитьДеревоРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], СоответствиеСуммДоговоров, 3, "ФактДоходы");
	ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыЗаполнитьПланРасходы(Команда)
	МассивДоговоров = Новый Массив;
	ПолучитьРеквизитыДереваРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], МассивДоговоров, "ПродуктПроектДоговор", 3);
	Если МассивДоговоров.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	СоответствиеСуммДоговоров = ПерезаполнитьСуммыДоговоровДоходыНаСервере(МассивДоговоров, Объект.ДатаНачала, Объект.ДатаОкончания);
	ЗаполнитьДеревоРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], СоответствиеСуммДоговоров, 3, "ПланРасходов");
	ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыЗаполнитьПланРасходыПоДоговорам(Команда)
	МассивДоговоров = Новый Массив;
	ПолучитьРеквизитыДереваРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], МассивДоговоров, "ПродуктПроектДоговор", 3);
	Если МассивДоговоров.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	СоответствиеСуммДоговоров = ПерезаполнитьСуммыДоговоровДоходыНаСервере(МассивДоговоров, Объект.ДатаНачала, Объект.ДатаОкончания);
	ЗаполнитьДеревоРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], СоответствиеСуммДоговоров, 3, "ПланРасходыПоДоговорам");
	ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыЗаполнитьСуммыПоДоговорамРасходы(Команда)
	МассивДоговоров = Новый Массив;
	ПолучитьРеквизитыДереваРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], МассивДоговоров, "ПродуктПроектДоговор", 3);
	Если МассивДоговоров.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	СоответствиеСуммДоговоров = ПерезаполнитьСуммыДоговоровДоходыНаСервере(МассивДоговоров, Объект.ДатаНачала, Объект.ДатаОкончания);
	ЗаполнитьДеревоРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], СоответствиеСуммДоговоров, 3, "СуммаПоДоговорамРасходы");
	ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);
КонецПроцедуры

&НаКлиенте
Процедура ДоходыЗаполнитьФактРасходы(Команда)
	МассивДоговоров = Новый Массив;
	ПолучитьРеквизитыДереваРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], МассивДоговоров, "ПродуктПроектДоговор", 3);
	Если МассивДоговоров.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	СоответствиеСуммДоговоров = ПерезаполнитьСуммыДоговоровДоходыНаСервере(МассивДоговоров, Объект.ДатаНачала, Объект.ДатаОкончания);
	ЗаполнитьДеревоРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0], СоответствиеСуммДоговоров, 3, "ФактРасходы");
	ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(ДеревоДоходов.ПолучитьЭлементы()[0]);
КонецПроцедуры

#КонецОбласти

#Область ДеревоРасходов

&НаКлиенте
Процедура ЗаполнитьПоСтатьям(Команда)
	
	ЗаполнитьРасходыПоСтатьямНаСервере(Неопределено, ДеревоРасходов.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество() > 0);
	ПерезаполнитьСуммыДоговоровРасходы(Команда);
	ОбновитьИтоговыеСуммыДеревоРасходовРекурсивно(ДеревоРасходов.ПолучитьЭлементы()[0]);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоСтатьямПлан(Команда)
	
	ЗаполнитьРасходыПоСтатьямНаСервере(Неопределено, ДеревоРасходов.ПолучитьЭлементы()[0].ПолучитьЭлементы().Количество() > 0, Истина);
	ПерезаполнитьСуммыДоговоровРасходы(Команда);
	ОбновитьИтоговыеСуммыДеревоРасходовРекурсивно(ДеревоРасходов.ПолучитьЭлементы()[0]);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРасходовИзТаблицы(СсылкаНабюджет)
	
	Если Объект.Расходы.Количество() = 0 Тогда
		СтрокаДерево = ДеревоРасходов.ПолучитьЭлементы().Добавить();
		СтрокаДерево.ВидСтатьяДоговор = "Расходы";
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БюджетРасходы.Контрагент КАК Контрагент,
	|	БюджетРасходы.Договор КАК Договор,
	|	БюджетРасходы.Период КАК Период,
	|	БюджетРасходы.ПланРасходов КАК ПланРасходов,
	|	БюджетРасходы.ПланРасходыПоДоговорам КАК ПланРасходыПоДоговорам,
	|	БюджетРасходы.ФактРасходы КАК ФактРасходы,
	|	БюджетРасходы.СуммаПоДоговорамРасходы КАК СуммаПоДоговорамРасходы,
	|	БюджетРасходы.СтатьяЗатрат.ВидСтатьи КАК ВидСтатьи,
	|	БюджетРасходы.СтатьяЗатрат КАК СтатьяЗатрат
	|ИЗ
	|	Документ.Бюджет.Расходы КАК БюджетРасходы
	|ГДЕ
	|	БюджетРасходы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Договор,
	|	Контрагент,
	|	Период
	|ИТОГИ
	|	МАКСИМУМ(Период),
	|	СУММА(ПланРасходов),
	|	СУММА(ПланРасходыПоДоговорам),
	|	СУММА(ФактРасходы),
	|	СУММА(СуммаПоДоговорамРасходы)
	|ПО
	|	ОБЩИЕ,
	|	ВидСтатьи,
	|	СтатьяЗатрат";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНабюджет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтог.Следующий() Цикл
		СтрокаДерево = ДеревоРасходов.ПолучитьЭлементы().Добавить();
		СтрокаДерево.ВидСтатьяДоговор = "Расходы";
		ЗаполнитьЗначенияСвойств(СтрокаДерево, ВыборкаИтог, "ПланРасходов, ПланРасходыПоДоговорам, ФактРасходы, СуммаПоДоговорамРасходы");
		ВыборкаВидСтатьи = ВыборкаИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидСтатьи.Следующий() Цикл
			СтрокаВид = СтрокаДерево.ПолучитьЭлементы().Добавить();
			СтрокаВид.ВидСтатьяДоговор = ВыборкаВидСтатьи.ВидСтатьи;
			СтрокаВид.Уровень= 1;
			ЗаполнитьЗначенияСвойств(СтрокаВид, ВыборкаВидСтатьи, "ПланРасходов, ПланРасходыПоДоговорам, ФактРасходы, СуммаПоДоговорамРасходы");
			ВыборкаСтатья = ВыборкаВидСтатьи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСтатья.Следующий() Цикл
				СтрокаСтатья = СтрокаВид.ПолучитьЭлементы().Добавить();
				СтрокаСтатья.ВидСтатьяДоговор = ВыборкаСтатья.СтатьяЗатрат;
				ЗаполнитьЗначенияСвойств(СтрокаСтатья, ВыборкаСтатья, "ПланРасходов, ПланРасходыПоДоговорам, ФактРасходы, СуммаПоДоговорамРасходы");
				СтрокаСтатья.Период= ВыборкаСтатья.Период;
				СтрокаСтатья.Уровень= 2;
				СтрокаСтатья.ВидСтатьи= ВыборкаСтатья.ВидСтатьи;
				ВыборкаДоговор = ВыборкаСтатья.Выбрать();
				Пока ВыборкаДоговор.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаДоговор.Договор) Тогда
						Продолжить;
					КонецЕсли;
					СтрокаСтатья.Период= Неопределено;
					СтрокаДоговор = СтрокаСтатья.ПолучитьЭлементы().Добавить();
					СтрокаДоговор.ВидСтатьяДоговор = ВыборкаДоговор.Договор;
					СтрокаДоговор.Контрагент= ВыборкаДоговор.Контрагент;
					ЗаполнитьЗначенияСвойств(СтрокаДоговор, ВыборкаДоговор, "ПланРасходыПоДоговорам, ФактРасходы, СуммаПоДоговорамРасходы");
					СтрокаДоговор.Период= ВыборкаДоговор.Период;
					СтрокаДоговор.Уровень= 3;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабЧастьРасходы()
	Объект.Расходы.Очистить();
	СтруктураСтроки = Новый Структура("СтатьяЗатрат, Договор,  Контрагент, Период, ПланРасходыПоДоговорам, ФактРасходы, СуммаПоДоговорамРасходы");
	СтрокаКорень = ДеревоРасходов.ПолучитьЭлементы()[0];
	Для Каждого СтрВиды ИЗ СтрокаКорень.ПолучитьЭлементы() Цикл
		Для Каждого Стр ИЗ СтрВиды.ПолучитьЭлементы() Цикл
			СтруктураСтроки.СтатьяЗатрат = Стр.ВидСтатьяДоговор;
			СтрокаСтатья = Объект.Расходы.Добавить();
			СтрокаСтатья.Период = Объект.ДатаНачала;
			СтрокаСтатья.СтатьяЗатрат = Стр.ВидСтатьяДоговор;
			СтрокаСтатья.ПланРасходов = Стр.ПланРасходов;
			Если Стр.ПолучитьЭлементы().Количество() > 0 Тогда
				Если Стр.ПолучитьЭлементы().Количество() > 0 Тогда
					Для Каждого Стр ИЗ Стр.ПолучитьЭлементы() Цикл
						СтруктураСтроки.Договор = Стр.ВидСтатьяДоговор;
						ЗаполнитьЗначенияСвойств(СтруктураСтроки, Стр, "Контрагент, Период, ПланРасходыПоДоговорам, ФактРасходы, СуммаПоДоговорамРасходы");
						НоваяСтрока = Объект.Расходы.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
					КонецЦикла;
				Иначе
					СтруктураСтроки.Контрагент = Неопределено;
					СтруктураСтроки.Договор = Неопределено;
					ЗаполнитьЗначенияСвойств(СтруктураСтроки, Стр, "Период, ПланРасходыПоДоговорам, ФактРасходы, СуммаПоДоговорамРасходы");
					НоваяСтрока = Объект.Расходы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСтроки);
				КонецЕсли;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаСтатья, Стр, "ПланРасходыПоДоговорам,ФактРасходы, СуммаПоДоговорамРасходы");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыборСтатейЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено 
		ИЛИ Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРасходыПоСтатьямНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРасходыПоСтатьямНаСервере(МассивСтатей, ЗаполнятьПоТекущим = Ложь, ТолькоПлан = Ложь)
	
	Если ЗаполнятьПоТекущим Тогда
		МассивСтатей = Новый мАссив;
		Для Каждого Вид Из ДеревоРасходов.ПолучитьЭлементы()[0].ПолучитьЭлементы() Цикл
			мМассивСтатей = ОбщегоНазначения.ВыгрузитьКолонку(Вид.ПолучитьЭлементы(), "ВидСтатьяДоговор", Истина);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивСтатей, мМассивСтатей, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиЗатрат.Ссылка КАК СтатьяЗатрат,
	|	СтатьиЗатрат.ВидСтатьи КАК ВидСтатьи
	|ПОМЕСТИТЬ ВТ_Статьи
	|ИЗ
	|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
	|ГДЕ
	|	НЕ СтатьиЗатрат.ПометкаУдаления
	|	И СтатьиЗатрат.Ссылка В(&МассивСтатей)
	|	И НЕ СтатьиЗатрат.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРесурсыПерсонал.Ссылка.Проект КАК Проект,
	|	ЗаявкаНаРесурсыПерсонал.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ЗаявкаНаРесурсыПерсонал.Ссылка КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Контрагент,
	|	ЗаявкаНаРесурсыПерсонал.Сумма КАК ПланРасходы,
	|	0 КАК СуммаПоДоговорамРасходы,
	|	0 КАК ФактРасходы,
	|	ВТ_Статьи.ВидСтатьи КАК ВидСтатьи
	|ПОМЕСТИТЬ ВТ_ЗаявкиНаРесурсы
	|ИЗ
	|	ВТ_Статьи КАК ВТ_Статьи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРесурсы.Персонал КАК ЗаявкаНаРесурсыПерсонал
	|		ПО ВТ_Статьи.СтатьяЗатрат = ЗаявкаНаРесурсыПерсонал.СтатьяЗатрат
	|ГДЕ
	|	ЗаявкаНаРесурсыПерсонал.Ссылка.Проведен
	|	И (ЗаявкаНаРесурсыПерсонал.Ссылка.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|	И ЗаявкаНаРесурсыПерсонал.Сумма > 0
	|	И ЗаявкаНаРесурсыПерсонал.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРесурсыДеньги.Ссылка.Проект,
	|	ЗаявкаНаРесурсыДеньги.СтатьяЗатрат,
	|	ЗаявкаНаРесурсыДеньги.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаявкаНаРесурсыДеньги.Сумма,
	|	0,
	|	0,
	|	ВТ_Статьи.ВидСтатьи
	|ИЗ
	|	ВТ_Статьи КАК ВТ_Статьи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРесурсы.Деньги КАК ЗаявкаНаРесурсыДеньги
	|		ПО ВТ_Статьи.СтатьяЗатрат = ЗаявкаНаРесурсыДеньги.СтатьяЗатрат
	|ГДЕ
	|	ЗаявкаНаРесурсыДеньги.Ссылка.Проведен
	|	И (ЗаявкаНаРесурсыДеньги.Ссылка.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|	И ЗаявкаНаРесурсыДеньги.Сумма > 0
	|	И ЗаявкаНаРесурсыДеньги.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРесурсыИнструменты.Ссылка.Проект,
	|	ЗаявкаНаРесурсыИнструменты.СтатьяЗатрат,
	|	ЗаявкаНаРесурсыИнструменты.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаявкаНаРесурсыИнструменты.Сумма,
	|	0,
	|	0,
	|	ВТ_Статьи.ВидСтатьи
	|ИЗ
	|	ВТ_Статьи КАК ВТ_Статьи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРесурсы.Инструменты КАК ЗаявкаНаРесурсыИнструменты
	|		ПО ВТ_Статьи.СтатьяЗатрат = ЗаявкаНаРесурсыИнструменты.СтатьяЗатрат
	|ГДЕ
	|	ЗаявкаНаРесурсыИнструменты.Ссылка.Проведен
	|	И (ЗаявкаНаРесурсыИнструменты.Ссылка.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|	И ЗаявкаНаРесурсыИнструменты.Сумма > 0
	|	И ЗаявкаНаРесурсыИнструменты.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРесурсыМатериалы.Ссылка.Проект,
	|	ЗаявкаНаРесурсыМатериалы.СтатьяЗатрат,
	|	ЗаявкаНаРесурсыМатериалы.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаявкаНаРесурсыМатериалы.Сумма,
	|	0,
	|	0,
	|	ВТ_Статьи.ВидСтатьи
	|ИЗ
	|	ВТ_Статьи КАК ВТ_Статьи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРесурсы.Материалы КАК ЗаявкаНаРесурсыМатериалы
	|		ПО ВТ_Статьи.СтатьяЗатрат = ЗаявкаНаРесурсыМатериалы.СтатьяЗатрат
	|ГДЕ
	|	ЗаявкаНаРесурсыМатериалы.Ссылка.Проведен
	|	И (ЗаявкаНаРесурсыМатериалы.Ссылка.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|	И ЗаявкаНаРесурсыМатериалы.Сумма > 0
	|	И ЗаявкаНаРесурсыМатериалы.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыПерсонал.Ссылка.Проект,
	|	ДоговорыПерсонал.СтатьяЗатрат,
	|	ДоговорыПерсонал.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	ДоговорыПерсонал.Сумма,
	|	0,
	|	0,
	|	ВТ_Статьи.ВидСтатьи
	|ИЗ
	|	ВТ_Статьи КАК ВТ_Статьи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Договоры.Персонал КАК ДоговорыПерсонал
	|		ПО ВТ_Статьи.СтатьяЗатрат = ДоговорыПерсонал.СтатьяЗатрат
	|ГДЕ
	|	(ДоговорыПерсонал.Ссылка.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|	И ДоговорыПерсонал.Сумма > 0
	|	И ДоговорыПерсонал.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыДеньги.Ссылка.Проект,
	|	ДоговорыДеньги.СтатьяЗатрат,
	|	ДоговорыДеньги.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	ДоговорыДеньги.Сумма,
	|	0,
	|	0,
	|	ВТ_Статьи.ВидСтатьи
	|ИЗ
	|	ВТ_Статьи КАК ВТ_Статьи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Договоры.Деньги КАК ДоговорыДеньги
	|		ПО ВТ_Статьи.СтатьяЗатрат = ДоговорыДеньги.СтатьяЗатрат
	|ГДЕ
	|	(ДоговорыДеньги.Ссылка.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|	И ДоговорыДеньги.Сумма > 0
	|	И ДоговорыДеньги.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыИнструменты.Ссылка.Проект,
	|	ДоговорыИнструменты.СтатьяЗатрат,
	|	ДоговорыИнструменты.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	ДоговорыИнструменты.Сумма,
	|	0,
	|	0,
	|	ВТ_Статьи.ВидСтатьи
	|ИЗ
	|	ВТ_Статьи КАК ВТ_Статьи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Договоры.Инструменты КАК ДоговорыИнструменты
	|		ПО ВТ_Статьи.СтатьяЗатрат = ДоговорыИнструменты.СтатьяЗатрат
	|ГДЕ
	|	(ДоговорыИнструменты.Ссылка.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|	И ДоговорыИнструменты.Сумма > 0
	|	И ДоговорыИнструменты.Ссылка.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыМатериалы.Ссылка.Проект,
	|	ДоговорыМатериалы.СтатьяЗатрат,
	|	ДоговорыМатериалы.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	ДоговорыМатериалы.Сумма,
	|	0,
	|	0,
	|	ВТ_Статьи.ВидСтатьи
	|ИЗ
	|	ВТ_Статьи КАК ВТ_Статьи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Договоры.Материалы КАК ДоговорыМатериалы
	|		ПО ВТ_Статьи.СтатьяЗатрат = ДоговорыМатериалы.СтатьяЗатрат
	|ГДЕ
	|	(ДоговорыМатериалы.Ссылка.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|	И ДоговорыМатериалы.Сумма > 0
	|	И ДоговорыМатериалы.Ссылка.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Договоры.Проект, НЕОПРЕДЕЛЕНО) КАК Проект,
	|	ВТ_Статьи.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ЕСТЬNULL(Договоры.Ссылка, НЕОПРЕДЕЛЕНО) КАК Договор,
	|	ЕСТЬNULL(Договоры.Контрагент, НЕОПРЕДЕЛЕНО) КАК Контрагент,
	|	ЕСТЬNULL(Договоры.СуммаПлан, 0) КАК ПланРасходыПоДоговорам,
	|	0 КАК СуммаПоДоговорамРасходы,
	|	0 КАК ФактРасходы,
	|	ВТ_Статьи.ВидСтатьи КАК ВидСтатьи,
	|	0 КАК ПланРасходы
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	ВТ_Статьи КАК ВТ_Статьи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Договоры КАК Договоры
	|		ПО ВТ_Статьи.СтатьяЗатрат = Договоры.СтатьяЗатрат
	|			И (НЕ Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1))
	|			И (Договоры.СостояниеИсполнения В (&МассивСостояний))
	|			И (НЕ(Договоры.ЕстьПодчиненные
	|					И Договоры.ВестиУчетПоДопДоговору))
	|			И (Договоры.ДатаНачала <= &ДатаОкончания
	|					И Договоры.ДатаОкончания >= &ДатаНачала
	|				ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|					И &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыОплаты.Ссылка.Проект,
	|	ДоговорыОплаты.СтатьяЗатрат,
	|	ДоговорыОплаты.Ссылка,
	|	ДоговорыОплаты.Ссылка.Контрагент,
	|	0,
	|	0,
	|	ДоговорыОплаты.СуммаНачисления,
	|	ВТ_Статьи.ВидСтатьи,
	|	0
	|ИЗ
	|	ВТ_Статьи КАК ВТ_Статьи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Договоры.Оплаты КАК ДоговорыОплаты
	|		ПО ВТ_Статьи.СтатьяЗатрат = ДоговорыОплаты.СтатьяЗатрат
	|ГДЕ
	|	ДоговорыОплаты.Ссылка.СостояниеИсполнения В(&МассивСостояний)
	|	И НЕ ДоговорыОплаты.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	|	И НЕ(ДоговорыОплаты.Ссылка.ЕстьПодчиненные
	|				И ДоговорыОплаты.Ссылка.ВестиУчетПоДопДоговору)
	|	И (ДоговорыОплаты.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыСуммыПоДоговоруПоПериоду.Ссылка.Проект,
	|	ВТ_Статьи.СтатьяЗатрат,
	|	ДоговорыСуммыПоДоговоруПоПериоду.Ссылка,
	|	ДоговорыСуммыПоДоговоруПоПериоду.Ссылка.Контрагент,
	|	0,
	|	ДоговорыСуммыПоДоговоруПоПериоду.СуммаПоДоговору,
	|	0,
	|	ВТ_Статьи.ВидСтатьи,
	|	0
	|ИЗ
	|	ВТ_Статьи КАК ВТ_Статьи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Договоры.СуммыПоДоговоруПоПериоду КАК ДоговорыСуммыПоДоговоруПоПериоду
	|		ПО ВТ_Статьи.СтатьяЗатрат = ДоговорыСуммыПоДоговоруПоПериоду.Ссылка.СтатьяЗатрат
	|ГДЕ
	|	ДоговорыСуммыПоДоговоруПоПериоду.Ссылка.СостояниеИсполнения В(&МассивСостояний)
	|	И НЕ ДоговорыСуммыПоДоговоруПоПериоду.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	|	И НЕ(ДоговорыСуммыПоДоговоруПоПериоду.Ссылка.ЕстьПодчиненные
	|				И ДоговорыСуммыПоДоговоруПоПериоду.Ссылка.ВестиУчетПоДопДоговору)
	|	И (НАЧАЛОПЕРИОДА(ДоговорыСуммыПоДоговоруПоПериоду.Период, ГОД) = НАЧАЛОПЕРИОДА(&ДатаНачала, ГОД)
	|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				И &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ЗаявкиНаРесурсы.Проект,
	|	ВТ_ЗаявкиНаРесурсы.СтатьяЗатрат,
	|	ВТ_ЗаявкиНаРесурсы.Договор,
	|	ВТ_ЗаявкиНаРесурсы.Контрагент,
	|	0,
	|	ВТ_ЗаявкиНаРесурсы.СуммаПоДоговорамРасходы,
	|	ВТ_ЗаявкиНаРесурсы.ФактРасходы,
	|	ВТ_ЗаявкиНаРесурсы.ВидСтатьи,
	|	ВТ_ЗаявкиНаРесурсы.ПланРасходы
	|ИЗ
	|	ВТ_ЗаявкиНаРесурсы КАК ВТ_ЗаявкиНаРесурсы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Проект КАК Проект,
	|	ВТ.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ВТ.Договор КАК Договор,
	|	ВТ.Контрагент КАК Контрагент,
	|	СУММА(0) КАК ПланРасходыПоДоговорам,
	|	СУММА(0) КАК СуммаПоДоговорамРасходы,
	|	СУММА(0) КАК ФактРасходы,
	|	ВТ.ВидСтатьи КАК ВидСтатьи,
	|	СУММА(0) КАК ПланРасходов
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	(ВТ.ПланРасходыПоДоговорам > 0
	|			ИЛИ ВТ.СуммаПоДоговорамРасходы > 0
	|			ИЛИ ВТ.ФактРасходы > 0
	|			ИЛИ ВТ.ПланРасходы > 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.Проект,
	|	ВТ.СтатьяЗатрат,
	|	ВТ.Контрагент,
	|	ВТ.ВидСтатьи,
	|	ВТ.Договор
	|ИТОГИ
	|	СУММА(ПланРасходыПоДоговорам),
	|	СУММА(СуммаПоДоговорамРасходы),
	|	СУММА(ФактРасходы)
	|ПО
	|	ОБЩИЕ,
	|	ВидСтатьи,
	|	СтатьяЗатрат";
	Если НЕ ЗаполнятьПоТекущим Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И СтатьиЗатрат.Ссылка В(&МассивСтатей)", "");
	Иначе
		Запрос.УстановитьПараметр("МассивСтатей", МассивСтатей);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаОкончания", Объект.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаНачала);
	
	МассивСостояний = Новый Массив;
	
	Если ТолькоПлан Тогда 
		МассивСостояний.Добавить(Перечисления.СтатусыДоговоровПроектов.Планируемый);
	Иначе
		МассивСостояний.Добавить(Перечисления.СтатусыДоговоровПроектов.Исполняемый);
		МассивСостояний.Добавить(Перечисления.СтатусыДоговоровПроектов.Просроченный);
		МассивСостояний.Добавить(Перечисления.СтатусыДоговоровПроектов.Приоритетный);
	КонецЕсли;
	Запрос.УстановитьПараметр("МассивСостояний", МассивСостояний);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);

	РезультатЗапроса = Запрос.Выполнить();
	
	СтрокаДерево = ДеревоРасходов.ПолучитьЭлементы()[0];
	СтрокаДерево.ФактРасходы = 0;
	СтрокаДерево.ПланРасходыПоДоговорам = 0;
	СтрокаДерево.СуммаПоДоговорамРасходы = 0;
	Если НЕ ЗаполнятьПоТекущим Тогда
		СтрокаДерево.ПолучитьЭлементы().Очистить();
		СтрокаДерево.ПланРасходов = 0;
	КонецЕсли;
	
	ВыборкаИтог = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИтог.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтрокаДерево, ВыборкаИтог, "ПланРасходов, ПланРасходыПоДоговорам, СуммаПоДоговорамРасходы, ФактРасходы");
		ВыборкаВидСтатьи = ВыборкаИтог.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидСтатьи.Следующий() Цикл
			СтрокаВидСтатьи = Неопределено;
			Если ЗаполнятьПоТекущим Тогда
				Для Каждого Стр ИЗ СтрокаДерево.ПолучитьЭлементы() Цикл
					Если Стр.ВидСтатьяДоговор = ВыборкаВидСтатьи.ВидСтатьи Тогда
						СтрокаВидСтатьи = Стр;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если СтрокаВидСтатьи = Неопределено Тогда
				СтрокаВидСтатьи = СтрокаДерево.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			СтрокаВидСтатьи.ВидСтатьяДоговор = ВыборкаВидСтатьи.ВидСтатьи;
			ЗаполнитьЗначенияСвойств(СтрокаВидСтатьи, ВыборкаВидСтатьи, "ПланРасходов, ПланРасходыПоДоговорам, СуммаПоДоговорамРасходы, ФактРасходы");
			СтрокаВидСтатьи.Уровень= 1;
			ВыборкаСтатья = ВыборкаВидСтатьи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаСтатья.Следующий() Цикл
				СтрокаСтатья = Неопределено;
				Если ЗаполнятьПоТекущим Тогда
					Для Каждого Стр ИЗ СтрокаВидСтатьи.ПолучитьЭлементы() Цикл
						Если Стр.ВидСтатьяДоговор = ВыборкаСтатья.СтатьяЗатрат Тогда
							СтрокаСтатья = Стр;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если СтрокаСтатья = Неопределено Тогда
					СтрокаСтатья = СтрокаВидСтатьи.ПолучитьЭлементы().Добавить();
				КонецЕсли;
				СтрокаСтатья.ВидСтатьяДоговор = ВыборкаСтатья.СтатьяЗатрат;
				СтрокаСтатья.ВидСтатьи = ВыборкаВидСтатьи.ВидСтатьи;
				ЗаполнитьЗначенияСвойств(СтрокаСтатья, ВыборкаСтатья, "ПланРасходов, ПланРасходыПоДоговорам, СуммаПоДоговорамРасходы, ФактРасходы");
				СтрокаСтатья.Уровень= 2;
				ВыборкаДоговор = ВыборкаСтатья.Выбрать();
				Пока ВыборкаДоговор.Следующий() Цикл
					Если НЕ ЗначениеЗаполнено(ВыборкаДоговор.Договор) Тогда
						Продолжить;
					КонецЕсли;
					СтрокаСтатья.Период= Неопределено;
					СтрокаДоговор = Неопределено;
					Если ЗаполнятьПоТекущим Тогда
						Для Каждого Стр ИЗ СтрокаСтатья.ПолучитьЭлементы() Цикл
							Если Стр.ВидСтатьяДоговор = ВыборкаДоговор.Договор Тогда
								СтрокаДоговор = Стр;
								Прервать;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
					Если СтрокаДоговор = Неопределено Тогда
						СтрокаДоговор = СтрокаСтатья.ПолучитьЭлементы().Добавить();
					КонецЕсли;
					СтрокаДоговор.ВидСтатьяДоговор = ВыборкаДоговор.Договор;
					СтрокаДоговор.Контрагент= ВыборкаДоговор.Контрагент;
					ЗаполнитьЗначенияСвойств(СтрокаДоговор, ВыборкаДоговор, "ПланРасходов, ПланРасходыПоДоговорам, СуммаПоДоговорамРасходы, ФактРасходы");
					СтрокаДоговор.Период= Объект.ДатаНачала;
					СтрокаДоговор.Уровень= 3;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРасходовВидСтатьяДоговорНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = ЛожЬ;
	ТекущиеДанные = Элементы.ДеревоРасходов.ТекущиеДанные;	
	Отбор = Новый Структура();
	мИмяФормы = "";
	Если ТекущиеДанные.Уровень = 1 Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("ПеречислениеСсылка.ВидыСтатейРасходов"));
		Элементы.ДеревоРасходовВидСтатьяДоговор.ОграничениеТипа = новый ОписаниеТипов(Массив); 
	ИначеЕсли ТекущиеДанные.Уровень = 2  Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.СтатьиЗатрат"));
		Элементы.ДеревоРасходовВидСтатьяДоговор.ОграничениеТипа = новый ОписаниеТипов(Массив); 
		мИмяФормы = "СтатьиЗатрат";
		Отбор.Вставить("ВидСтатьи", ТекущиеДанные.ПолучитьРодителя().ВидСтатьяДоговор);
		ОткрытьФорму("Справочник."+ мИмяФормы + ".Форма.ФормаВыбора", Новый Структура("Отбор", Отбор), Элемент,,,,);
	ИначеЕсли ТекущиеДанные.Уровень = 3 Тогда
		Массив = Новый Массив;
		Массив.Добавить(Тип("СправочникСсылка.Договоры"));
		Элементы.ДеревоРасходовВидСтатьяДоговор.ОграничениеТипа = новый ОписаниеТипов(Массив); 
		мИмяФормы = "Договоры";
		Отбор.Вставить("СтатьяЗатрат", ТекущиеДанные.ПолучитьРодителя().ВидСтатьяДоговор);
		ОткрытьФорму("Справочник."+ мИмяФормы + ".Форма.ФормаВыбора", Новый Структура("Отбор", Отбор), Элемент,,,,);
	Иначе
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРасходовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ТекущиеДанные = Элементы.ДеревоРасходов.ТекущиеДанные;
	Если Копирование Тогда
		Если ТекущиеДанные.Уровень = 3 
			И ЗначениеЗаполнено(ТекущиеДанные.ВидСтатьяДоговор) Тогда
			ВыборДоговораРасходыЗавершение(ТекущиеДанные.ВидСтатьяДоговор, Новый Структура("ТекущиеДанные, Копирование, ПланПродаж", 
			ТекущиеДанные.ПолучитьРодителя(), Копирование, 0));	
		Иначе
			Возврат;															
		КонецЕсли;
	Иначе
		Отбор = Новый Структура();
		мИмяФормы = "";
		Если  ТекущиеДанные = Неопределено 
			ИЛИ ТекущиеДанные.Уровень = 0 Тогда
			мИмяФормы = "ВидСтатьи";
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборВидаСтатьиЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные));
			ОткрытьФорму("Перечисление.ВидыСтатейРасходов.ФормаВыбора", Новый Структура("Отбор", Отбор), Элемент,,,,ОписаниеОповещения);
		ИначеЕсли ТекущиеДанные.Уровень = 1 Тогда
			мИмяФормы = "СтатьиЗатрат";
			Отбор.Вставить("ВидСтатьи", ТекущиеДанные.ВидСтатьяДоговор);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборСтатьиРасходыЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные));
			ОткрытьФорму("Справочник."+ мИмяФормы + ".Форма.ФормаВыбора", Новый Структура("Отбор, Отображение", Отбор, ОтображениеТаблицы.Список), Элемент,,,,ОписаниеОповещения);
		ИначеЕсли ТекущиеДанные.Уровень = 2 ИЛИ ТекущиеДанные.Уровень = 3 Тогда
			мИмяФормы = "Договоры";
			Отбор.Вставить("СтатьяЗатрат", ТекущиеДанные.ВидСтатьяДоговор);
			ОписаниеОповещения = Новый ОписаниеОповещения("ВыборДоговораРасходыЗавершение", ЭтаФорма, Новый Структура("ТекущиеДанные, Копирование, ПланПродаж", ТекущиеДанные, Копирование, 0));
			ОткрытьФорму("Справочник."+ мИмяФормы + ".Форма.ФормаВыбора", Новый Структура("Отбор", Отбор), Элемент,,,,ОписаниеОповещения);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборДоговораРасходыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		//НоваяСтрока = ДеревоРасходов.ПолучитьЭлементы().Добавить();	
		Возврат;
	КонецЕсли;
	СтрокаРодитель = ДопПараметры.ТекущиеДанные;
	Структура = ПолучитьДанныеСтроки(Результат, 3);
	СтрокаДоговор = СтрокаРодитель.ПолучитьЭлементы().Добавить();
	СтрокаДоговор.Уровень = 3;
	ЗаполнитьЗначенияСвойств(СтрокаДоговор, Структура);
	СтрокаДоговор.ПланРасходыПоДоговорам = Структура.СуммаПлан;
	СтрокаДоговор.ФактРасходы = Структура.СуммаНачисления;
	СтрокаДоговор.СуммаПоДоговорамРасходы = Структура.СуммаПоДоговору;
	
	СтрокаДоговор.ВидСтатьяДоговор = Структура.Ссылка;
	СтрокаДоговор.Период = Объект.ДатаНачала;
	Элементы.ДеревоРасходов.ТекущаяСтрока = СтрокаДоговор.получитьидентификатор();
КонецПроцедуры

&НаКлиенте
Процедура ВыборВидаСтатьиЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаРодитель = ДопПараметры.ТекущиеДанные;
	НайденнаяСтрока = Неопределено;
	Для Каждого Стр ИЗ СтрокаРодитель.ПолучитьЭлементы() Цикл
		Если Стр.ВидСтатьяДоговор = Результат Тогда
			НайденнаяСтрока = Стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;		
	Если НайденнаяСтрока = Неопределено Тогда
		СтрокаСтатья = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		СтрокаСтатья.Уровень = 1;
		СтрокаСтатья.ВидСтатьяДоговор = Результат;
	Иначе
		СтрокаСтатья = Стр;
	КонецЕсли;
	Элементы.ДеревоРасходов.ТекущаяСтрока = СтрокаСтатья.получитьидентификатор();
КонецПроцедуры

&НаКлиенте
Процедура ВыборСтатьиРасходыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаРодитель = ДопПараметры.ТекущиеДанные;
	НайденнаяСтрока = Неопределено;
	Для Каждого Стр ИЗ СтрокаРодитель.ПолучитьЭлементы() Цикл
		Если Стр.ВидСтатьяДоговор = Результат Тогда
			НайденнаяСтрока = Стр;
			Прервать;
		КонецЕсли;
	КонецЦикла;		
	Если НайденнаяСтрока = Неопределено Тогда
		СтрокаСтатья = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		СтрокаСтатья.Уровень = 2;
		СтрокаСтатья.ВидСтатьяДоговор = Результат;
	Иначе
		СтрокаСтатья = Стр;
	КонецЕсли;
	Элементы.ДеревоРасходов.ТекущаяСтрока = СтрокаСтатья.получитьидентификатор();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРасходовПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ДеревоРасходов.ТекущиеДанные;
	Если ТекущиеДанные.Уровень = 0 Тогда
		Отказ = Истина
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРасходовПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.ДеревоРасходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	Если (Элемент.ТекущийЭлемент.Имя = "ДеревоРасходовПланРасходов" ) И Не ТекущиеДанные.Уровень = 2 Тогда
		Отказ = Истина;
	ИначеЕсли НЕ (Элемент.ТекущийЭлемент.Имя = "ДеревоРасходовПланРасходов") 
		И ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРасходовВидСтатьяДоговорОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Договоры") Тогда
		ТекущиеДанные = Элементы.ДеревоРасходов.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;		
		КонецЕсли;
		РеквДоговор = ПолучитьДанныеСтроки(ВыбранноеЗначение, 3);
		ТекущиеДанные.Контрагент = РеквДоговор.Контрагент;
		ТекущиеДанные.ПланРасходов = РеквДоговор.СуммаПлан;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРасходовПослеУдаления(Элемент)
	ОбновитьСуммыДереваРасходов(ДеревоРасходов.ПолучитьЭлементы()[0]);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммыДереваРасходов(СтрокаРодитель)
	
	ПланРасходов = 0;
	ПланРасходыПоДоговорам = 0;
	ФактРасходы = 0;
	СуммаПоДоговорамРасходы = 0;
	Если СтрокаРодитель.получитьЭлементы().Количество() > 0 Тогда
		Для Каждого Строка Из СтрокаРодитель.получитьЭлементы() Цикл
			ОбновитьСуммыДереваРасходов(Строка);
			ПланРасходыПоДоговорам = ПланРасходыПоДоговорам + Строка.ПланРасходыПоДоговорам;
			ФактРасходы = ФактРасходы + Строка.ФактРасходы;
			СуммаПоДоговорамРасходы = СуммаПоДоговорамРасходы + Строка.СуммаПоДоговорамРасходы;
		КонецЦикла;
	ИначеЕсли  СтрокаРодитель.Уровень > 0 Тогда
		ПланРасходыПоДоговорам = СтрокаРодитель.ПланРасходыПоДоговорам;
		ФактРасходы = СтрокаРодитель.ФактРасходы;
		СуммаПоДоговорамРасходы = СтрокаРодитель.СуммаПоДоговорамРасходы;
	КонецЕсли;
	
	Если СтрокаРодитель.Уровень = 0 Тогда
		Для Каждого Строка Из СтрокаРодитель.получитьЭлементы() Цикл
			ПланРасходов = ПланРасходов + Строка.ПланРасходов;
		КонецЦикла;	
		СтрокаРодитель.ПланРасходов = ПланРасходов;
	КонецЕсли;
	СтрокаРодитель.ПланРасходыПоДоговорам = ПланРасходыПоДоговорам;
	СтрокаРодитель.ФактРасходы = ФактРасходы;
	СтрокаРодитель.СуммаПоДоговорамРасходы = СуммаПоДоговорамРасходы;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРасходовПланРасходовПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоРасходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ПосчитатьСуммуРодителяРекурсивно(ТекущиеДанные, "ПланРасходов");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРасходовПланРасходыПоДоговорамПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоРасходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ПосчитатьСуммуРодителяРекурсивно(ТекущиеДанные, "ПланРасходыПоДоговорам");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРасходовФактРасходыПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоРасходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ПосчитатьСуммуРодителяРекурсивно(ТекущиеДанные, "ФактРасходы");
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРасходовСуммаПоДоговорамРасходыПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоРасходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;		
	КонецЕсли;
	
	ПосчитатьСуммуРодителяРекурсивно(ТекущиеДанные, "СуммаПоДоговорамРасходы");
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьСуммыДоговоровРасходы(Команда)
	МассивДоговоров = Новый Массив;
	ПолучитьРеквизитыДереваРекурсивно(ДеревоРасходов.ПолучитьЭлементы()[0], МассивДоговоров, "ВидСтатьяДоговор", 3);
	Если МассивДоговоров.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	МассивСуммДоговоров = стар_ПерезаполнитьСуммыДоговоровДоходыНаСервере(МассивДоговоров, Объект.ДатаНачала, Объект.ДатаОкончания);
	СтрокиПервогоУровня = ДеревоРасходов.ПолучитьЭлементы();
	Для Каждого Строка1уровня Из СтрокиПервогоУровня Цикл
		СтрокиВторогоУровня = Строка1уровня.ПолучитьЭлементы();
		Для Каждого Строка2уровня Из СтрокиВторогоУровня Цикл
			СтрокиТретьегоУровня = Строка2уровня.ПолучитьЭлементы();
			Для Каждого Строка3уровня Из СтрокиТретьегоУровня Цикл
				СтрокиЧетвертогоУровня = Строка3уровня.ПолучитьЭлементы();
				Для Каждого Строка4уровня Из СтрокиЧетвертогоУровня Цикл
					Для Каждого ЭлМассива Из МассивСуммДоговоров Цикл
						Если ЭлМассива.Ссылка = Строка4уровня.ВидСтатьяДоговор И ЭлМассива.СтатьяЗатрат = Строка3уровня.ВидСтатьяДоговор Тогда 
							Строка4уровня.ПланРасходыПоДоговорам = ЭлМассива.СуммаПлан;	
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ОбновитьИтоговыеСуммыДеревоРасходовРекурсивно(ДеревоРасходов.ПолучитьЭлементы()[0]);
КонецПроцедуры

&НаКлиенте
Процедура ПодборСтатейЗатратРасходы(Команда)
	СтруктураПараметры = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, ВыборГруппИЭлементов", Ложь, Истина, ИспользованиеГруппИЭлементов.ГруппыИЭлементы);	
	
	ОткрытьФорму("Справочник.СтатьиЗатрат.ФормаВыбора",СтруктураПараметры, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтатьюЗатратРасходыПодбор(ВыбранноеЗначение) 
	ВидСтатьи = ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ВидСтатьи");
	СтрокиПервогоУровня = ДеревоРасходов.ПолучитьЭлементы();
	Если СтрокиПервогоУровня.Количество() > 0 И СтрокиПервогоУровня[0].ВидСтатьяДоговор = "Расходы" Тогда
		СтрокиВторогоУровня = СтрокиПервогоУровня[0].ПолучитьЭлементы();
		СтрокаВидаСтатьи = Неопределено;
		Для Каждого Стр2уровня Из СтрокиВторогоУровня Цикл
			Если Стр2уровня.ВидСтатьяДоговор = ВидСтатьи Тогда 
				СтрокаВидаСтатьи = Стр2уровня;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаВидаСтатьи = Неопределено Тогда 
			СтрокаВидаСтатьи = СтрокиВторогоУровня.Добавить();
			СтрокаВидаСтатьи.Уровень = 1;
			СтрокаВидаСтатьи.ВидСтатьяДоговор = ВидСтатьи;
		КонецЕсли;
		СтрокаСтатьи = Неопределено;
		Для Каждого Стр3уровня Из СтрокаВидаСтатьи.ПолучитьЭлементы() Цикл
			Если Стр3уровня.ВидСтатьяДоговор = ВыбранноеЗначение Тогда 
				СтрокаСтатьи = Стр3уровня;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаСтатьи = Неопределено Тогда 
			СтрокаСтатьи = СтрокаВидаСтатьи.ПолучитьЭлементы().Добавить();
			СтрокаСтатьи.Уровень = 2;
			СтрокаСтатьи.ВидСтатьяДоговор = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаСервере
Процедура УдалитьДоговораСПодчиненнымиДоговорамиНаСервере()
	МассивДоговоров = Новый Массив;
	//Для Каждого СтрокаДерева ИЗ 
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДоговораСПодчиненнымиДоговорами(Команда)
	УдалитьДоговораСПодчиненнымиДоговорамиНаСервере();
КонецПроцедуры

&НаСервереБезКонтекста
Функция стар_ПерезаполнитьСуммыДоговоровДоходыНаСервере(МассивДоговоров, ДатаНачала = Неопределено, датаОкончания = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ДоговорыПерсонал.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ДоговорыПерсонал.Ссылка КАК Ссылка,
	|	ДоговорыПерсонал.Сумма КАК СуммаПлан
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Справочник.Договоры.Персонал КАК ДоговорыПерсонал
	|ГДЕ
	|	(ДоговорыПерсонал.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Дт1)
	|			ИЛИ ДоговорыПерсонал.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Дт4))
	|	И ДоговорыПерсонал.Ссылка В(&СписокДоговоров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыИнструменты.СтатьяЗатрат,
	|	ДоговорыИнструменты.Ссылка,
	|	ДоговорыИнструменты.Сумма
	|ИЗ
	|	Справочник.Договоры.Инструменты КАК ДоговорыИнструменты
	|ГДЕ
	|	(ДоговорыИнструменты.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Дт1)
	|			ИЛИ ДоговорыИнструменты.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Дт4))
	|	И ДоговорыИнструменты.Ссылка В(&СписокДоговоров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыМатериалы.СтатьяЗатрат,
	|	ДоговорыМатериалы.Ссылка,
	|	ДоговорыМатериалы.Сумма
	|ИЗ
	|	Справочник.Договоры.Материалы КАК ДоговорыМатериалы
	|ГДЕ
	|	(ДоговорыМатериалы.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Дт1)
	|			ИЛИ ДоговорыМатериалы.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Дт4))
	|	И ДоговорыМатериалы.Ссылка В(&СписокДоговоров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.СтатьяЗатрат,
	|	Договоры.Ссылка,
	|	Договоры.СуммаПлан
	|ИЗ
	|	Справочник.Договоры КАК Договоры
	|ГДЕ
	|	Договоры.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.Дт2)
	|	И Договоры.Ссылка В(&СписокДоговоров)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.СтатьяЗатрат КАК СтатьяЗатрат,
	|	ВТ.Ссылка КАК Ссылка,
	|	СУММА(ВТ.СуммаПлан) КАК СуммаПлан
	|ИЗ
	|	ВТ КАК ВТ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ.СтатьяЗатрат,
	|	ВТ.Ссылка";
	
	Запрос.УстановитьПараметр("СписокДоговоров", МассивДоговоров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	МассивДанных = Новый Массив;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураРеквизитов = Новый Структура("СуммаПлан, СуммаПоДоговору, СуммаНачисления, ТипДоговора, СтатьяЗатрат, Ссылка", 0, 0, 0, Неопределено, Неопределено, Неопределено);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ВыборкаДетальныеЗаписи);
		МассивДанных.Добавить(СтруктураРеквизитов);
	КонецЦикла;
	
	Возврат МассивДанных;
КонецФункции

&НаСервереБезКонтекста
Функция ПерезаполнитьСуммыДоговоровДоходыНаСервере(МассивДоговоров, ДатаНачала = Неопределено, датаОкончания = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.СуммаПлан КАК ПланДоходов,
	|	Договоры.СуммаПоДоговору КАК СуммаПоДоговорамДоходы,
	|	Договоры.СуммаНачисления КАК ФактДоходы,
	|	0 КАК ФактРасходы,
	|	0 КАК СуммаПоДоговорамРасходы,
	|	0 КАК ПланРасходыПоДоговорам
	|ПОМЕСТИТЬ вт
	|ИЗ
	|	Справочник.Договоры КАК Договоры
	|ГДЕ
	|	Договоры.Ссылка В(&МассивДоговоров)
	|	И Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	|
	|СГРУППИРОВАТЬ ПО
	|	Договоры.Ссылка,
	|	Договоры.СуммаПлан,
	|	Договоры.СуммаПоДоговору,
	|	Договоры.СуммаНачисления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыРаспределения.Договор,
	|	0,
	|	0,
	|	0,
	|	ДоговорыРаспределения.Сумма,
	|	ДоговорыРаспределения.СуммаДоговора,
	|	ДоговорыРаспределения.СуммаПлан
	|ИЗ
	|	Справочник.Договоры.Распределения КАК ДоговорыРаспределения
	|ГДЕ
	|	ДоговорыРаспределения.Договор.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	|	И ДоговорыРаспределения.Договор В(&МассивДоговоров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Договоры.Ссылка,
	|	0,
	|	0,
	|	0,
	|	Договоры.СуммаНачисления,
	|	Договоры.СуммаПоДоговору,
	|	Договоры.СуммаПлан
	|ИЗ
	|	Справочник.Договоры КАК Договоры
	|ГДЕ
	|	Договоры.Ссылка В(&МассивДоговоров)
	|	И НЕ Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	|
	|СГРУППИРОВАТЬ ПО
	|	Договоры.Ссылка,
	|	Договоры.СуммаПлан,
	|	Договоры.СуммаПоДоговору,
	|	Договоры.СуммаНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт.Ссылка КАК Ссылка,
	|	СУММА(вт.ПланДоходов) КАК ПланДоходов,
	|	СУММА(вт.СуммаПоДоговорамДоходы) КАК СуммаПоДоговорамДоходы,
	|	СУММА(вт.ФактДоходы) КАК ФактДоходы,
	|	СУММА(вт.ФактРасходы) КАК ФактРасходы,
	|	СУММА(вт.СуммаПоДоговорамРасходы) КАК СуммаПоДоговорамРасходы,
	|	СУММА(вт.ПланРасходыПоДоговорам) КАК ПланРасходыПоДоговорам
	|ПОМЕСТИТЬ ВТ_Сгруппированная
	|ИЗ
	|	вт КАК вт
	|
	|СГРУППИРОВАТЬ ПО
	|	вт.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаНаРесурсы.Договор КАК Договор,
	|	ЗаявкаНаРесурсы.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТ_ЗаявкиНаРесурсы
	|ИЗ
	|	Документ.ЗаявкаНаРесурсы КАК ЗаявкаНаРесурсы
	|ГДЕ
	|	ЗаявкаНаРесурсы.Договор В(&МассивДоговоров)
	|	И ЗаявкаНаРесурсы.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыПерсонал.Ссылка,
	|	ДоговорыПерсонал.Сумма
	|ИЗ
	|	Справочник.Договоры.Персонал КАК ДоговорыПерсонал
	|ГДЕ
	|	ДоговорыПерсонал.Ссылка В(&МассивДоговоров)
	|	И ДоговорыПерсонал.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыДеньги.Ссылка,
	|	ДоговорыДеньги.Сумма
	|ИЗ
	|	Справочник.Договоры.Деньги КАК ДоговорыДеньги
	|ГДЕ
	|	ДоговорыДеньги.Ссылка В(&МассивДоговоров)
	|	И ДоговорыДеньги.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыИнструменты.Ссылка,
	|	ДоговорыИнструменты.Сумма
	|ИЗ
	|	Справочник.Договоры.Инструменты КАК ДоговорыИнструменты
	|ГДЕ
	|	ДоговорыИнструменты.Ссылка В(&МассивДоговоров)
	|	И ДоговорыИнструменты.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыМатериалы.Ссылка,
	|	ДоговорыМатериалы.Сумма
	|ИЗ
	|	Справочник.Договоры.Материалы КАК ДоговорыМатериалы
	|ГДЕ
	|	ДоговорыМатериалы.Ссылка В(&МассивДоговоров)
	|	И ДоговорыМатериалы.Ссылка.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыСубподряды.Ссылка,
	|	ДоговорыСубподряды.ДоговорСубподряда.СуммаПлан
	|ИЗ
	|	Справочник.Договоры.Субподряды КАК ДоговорыСубподряды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЗаявкиНаРесурсы.Договор КАК Договор,
	|	СУММА(ВТ_ЗаявкиНаРесурсы.СуммаДокумента) КАК СуммаДокумента
	|ПОМЕСТИТЬ ВТ_ЗаявкиНаРесурсыСгруппированные
	|ИЗ
	|	ВТ_ЗаявкиНаРесурсы КАК ВТ_ЗаявкиНаРесурсы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ЗаявкиНаРесурсы.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Сгруппированная.Ссылка КАК Ссылка,
	|	СУММА(ВТ_Сгруппированная.ПланДоходов) КАК ПланДоходов,
	|	СУММА(ВТ_Сгруппированная.СуммаПоДоговорамДоходы) КАК СуммаПоДоговорамДоходы,
	|	СУММА(ВТ_Сгруппированная.ФактДоходы) КАК ФактДоходы,
	|	СУММА(ВТ_Сгруппированная.ФактРасходы) КАК ФактРасходы,
	|	СУММА(ВТ_Сгруппированная.СуммаПоДоговорамРасходы) КАК СуммаПоДоговорамРасходы,
	|	СУММА(ВТ_Сгруппированная.ПланРасходыПоДоговорам) КАК ПланРасходыПоДоговорам,
	|	СУММА(ЕСТЬNULL(ВТ_ЗаявкиНаРесурсыСгруппированные.СуммаДокумента, 0)) КАК ПланРасходов
	|ИЗ
	|	ВТ_Сгруппированная КАК ВТ_Сгруппированная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаявкиНаРесурсыСгруппированные КАК ВТ_ЗаявкиНаРесурсыСгруппированные
	|		ПО ВТ_Сгруппированная.Ссылка = ВТ_ЗаявкиНаРесурсыСгруппированные.Договор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Сгруппированная.Ссылка";
	Запрос.УстановитьПараметр("МассивДоговоров", МассивДоговоров);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Соответствие = Новый Соответствие;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураРеквизитов = Новый Структура("ПланДоходов, СуммаПоДоговорамДоходы, ФактДоходы, ФактРасходы, СуммаПоДоговорамРасходы, ПланРасходыПоДоговорам, ПланРасходов", 0, 0, 0, 0, 0, 0, 0);
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ВыборкаДетальныеЗаписи);
		Соответствие.Вставить(ВыборкаДетальныеЗаписи.Ссылка, СтруктураРеквизитов);
	КонецЦикла;
	
	Возврат Соответствие;
КонецФункции

&НаКлиенте
Процедура ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(СтрокаДерева)
	СуммыСтрокиДерева = Новый Структура("ПланДоходов, СуммаПоДоговорамДоходы, ФактДоходы, ПланРасходыПоДоговорам, СуммаПоДоговорамРасходы, ФактРасходы, ПланРасходов", 0, 0, 0, 0, 0, 0, 0);
	Для Каждого СтрокаПодчиненная ИЗ СтрокаДерева.ПолучитьЭлементы() Цикл
		Если СтрокаПодчиненная.Уровень < 3 Тогда 
			ОбновитьИтоговыеСуммыДеревоДоходовРекурсивно(СтрокаПодчиненная);
		КонецЕсли;
		СуммыСтрокиДерева.ПланДоходов				= СуммыСтрокиДерева.ПланДоходов + СтрокаПодчиненная.ПланДоходов;
		СуммыСтрокиДерева.СуммаПоДоговорамДоходы	= СуммыСтрокиДерева.СуммаПоДоговорамДоходы + СтрокаПодчиненная.СуммаПоДоговорамДоходы;
		СуммыСтрокиДерева.ФактДоходы				= СуммыСтрокиДерева.ФактДоходы + СтрокаПодчиненная.ФактДоходы;
		СуммыСтрокиДерева.ПланРасходыПоДоговорам	= СуммыСтрокиДерева.ПланРасходыПоДоговорам + СтрокаПодчиненная.ПланРасходыПоДоговорам;
		СуммыСтрокиДерева.СуммаПоДоговорамРасходы	= СуммыСтрокиДерева.СуммаПоДоговорамРасходы + СтрокаПодчиненная.СуммаПоДоговорамРасходы;
		СуммыСтрокиДерева.ФактРасходы				= СуммыСтрокиДерева.ФактРасходы + СтрокаПодчиненная.ФактРасходы;
		СуммыСтрокиДерева.ПланРасходов				= СуммыСтрокиДерева.ПланРасходов + СтрокаПодчиненная.ПланРасходов;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СтрокаДерева, СуммыСтрокиДерева);
КонецПроцедуры

&НаКлиенте
Функция ПолучитьРеквизитыДереваРекурсивно(СтрокаДерева, МассивЭлементов, ИмяРеквизита, Уровень = Неопределено)
	Если Уровень = Неопределено ИЛИ СтрокаДерева.Уровень = Уровень Тогда
		МассивЭлементов.Добавить(СтрокаДерева[ИмяРеквизита]);
	КонецЕсли;
	Для Каждого СтрокаПодчиненная ИЗ СтрокаДерева.ПолучитьЭлементы() Цикл
		ПолучитьРеквизитыДереваРекурсивно(СтрокаПодчиненная, МассивЭлементов, ИмяРеквизита, Уровень);
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДеревоРекурсивно(СтрокаДерева, СоответствиеСуммДоговоров, Уровень, СписокПолей = Неопределено)
	
	Если СписокПолей = Неопределено Тогда 
		СписокПолей = "ПланДоходов, СуммаПоДоговорамДоходы, ФактДоходы, ФактРасходы, СуммаПоДоговорамРасходы, ПланРасходыПоДоговорам, ПланРасходов";
	КонецЕсли;
	
	Если НЕ СтрокаДерева.Уровень = Уровень Тогда
		Для Каждого СтрокаПодчиненная ИЗ СтрокаДерева.ПолучитьЭлементы() Цикл
			ЗаполнитьДеревоРекурсивно(СтрокаПодчиненная, СоответствиеСуммДоговоров, Уровень, СписокПолей);
		КонецЦикла;
	Иначе
		ЭлементСоответствия = СоответствиеСуммДоговоров.Получить(СтрокаДерева.ПродуктПроектДоговор);
		Если ЭлементСоответствия = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтрокаДерева, ЭлементСоответствия, СписокПолей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИтоговыеСуммыДеревоРасходовРекурсивно(СтрокаДерева)
	СуммыСтрокиДерева = Новый Структура("ПланРасходов, ПланРасходыПоДоговорам, СуммаПоДоговорамРасходы, ФактРасходы", 0, 0, 0, 0);
	Для Каждого СтрокаПодчиненная ИЗ СтрокаДерева.ПолучитьЭлементы() Цикл
		Если СтрокаПодчиненная.Уровень < 3 Тогда 
			ОбновитьИтоговыеСуммыДеревоРасходовРекурсивно(СтрокаПодчиненная);
		КонецЕсли;
		СуммыСтрокиДерева.ПланРасходыПоДоговорам = СуммыСтрокиДерева.ПланРасходыПоДоговорам + СтрокаПодчиненная.ПланРасходыПоДоговорам;
		СуммыСтрокиДерева.СуммаПоДоговорамРасходы = СуммыСтрокиДерева.СуммаПоДоговорамРасходы + СтрокаПодчиненная.СуммаПоДоговорамРасходы;
		СуммыСтрокиДерева.ФактРасходы = СуммыСтрокиДерева.ФактРасходы + СтрокаПодчиненная.ФактРасходы;
		СуммыСтрокиДерева.ПланРасходов = СуммыСтрокиДерева.ПланРасходов + СтрокаПодчиненная.ПланРасходов;
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(СтрокаДерева, СуммыСтрокиДерева);
КонецПроцедуры

&НаКлиенте
Процедура  ЗаполнитьДеревоРасходовРекурсивно(СтрокаДерева, СоответствиеСуммДоговоров, Уровень)
	Если НЕ СтрокаДерева.Уровень = Уровень Тогда
		Для Каждого СтрокаПодчиненная ИЗ СтрокаДерева.ПолучитьЭлементы() Цикл
			ЗаполнитьДеревоРасходовРекурсивно(СтрокаПодчиненная, СоответствиеСуммДоговоров, Уровень);
		КонецЦикла;
	Иначе
		ЭлементСоответствия = СоответствиеСуммДоговоров.Получить(СтрокаДерева.ВидСтатьяДоговор);
		Если ЭлементСоответствия = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтрокаДерева.ПланРасходыПоДоговорам = ЭлементСоответствия.СуммаПлан;
		СтрокаДерева.СуммаПоДоговорамРасходы = ЭлементСоответствия.СуммаПоДоговору;
		СтрокаДерева.ФактРасходы = ЭлементСоответствия.СуммаНачисления;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, ИмяРеквизита);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивСтатейГруппы(ВыбранноеЗначение)
	
	МассивСтатей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиЗатрат.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
		|ГДЕ
		|	СтатьиЗатрат.Ссылка В ИЕРАРХИИ(&СсылкаГруппа)
		|	И НЕ СтатьиЗатрат.ПометкаУдаления
		|	И НЕ СтатьиЗатрат.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("СсылкаГруппа", ВыбранноеЗначение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСтатей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат МассивСтатей;
	
КонецФункции

#КонецОбласти

