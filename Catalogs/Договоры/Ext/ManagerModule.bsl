#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("НаименованиеДоговора");
	Поля.Добавить("ТипДоговора");
	Поля.Добавить("ДатаНачала");
	Поля.Добавить("ДатаОкончания");
	Поля.Добавить("Контрагент");
	Поля.Добавить("Администратор");
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
    
    Если НЕ Данные.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4") Тогда 
        Вид = "Р1 - ";
	КонецЕсли;
	
	Представление = Строка(Данные.ТипДоговора) 
					+ " - " + Данные.НаименованиеДоговора 
					+ ?(Данные.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4"), "", " - " + Данные.Контрагент)
					+ " - " + Формат(Данные.ДатаНачала, "ДЛФ=D") 
					+ " - " + Формат(Данные.ДатаОкончания, "ДЛФ=D")  
					+ " - " + Данные.Администратор;
КонецПроцедуры


// Заполняет список команд печати.
// 
// Параметры:
//  КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Перемещение товаров
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "ПФ_Договор";
	КомандаПечати.Представление = НСтр("ru = 'Печать договора'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	// Печать накладной на перемещение.
	НужноПечататьМакет = УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_Договор");
	Если НужноПечататьМакет Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ПФ_Договор",
			НСтр("ru = 'Печать договора'"),
			ПечатнаяФормаДоговора(МассивОбъектов, ОбъектыПечати),
			,
			"Справочник.Договоры.ПФ_Договор");
	КонецЕсли;
		
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

#Область СлужебныеПроцедурыИФункции

Функция ПечатнаяФормаДоговора(МассивОбъектов, ОбъектыПечати)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Договоры.Ссылка КАК Ссылка,
	|	Договоры.Код КАК Код,
	|	Договоры.Наименование КАК Наименование,
	|	Договоры.Администратор КАК Администратор,
	|	Договоры.ТипДоговора КАК ТипДоговора,
	|	Договоры.ДатаНачала КАК ДатаНачала,
	|	Договоры.ДатаОкончания КАК ДатаОкончания,
	|	Договоры.Контрагент КАК Контрагент,
	|	Договоры.НаименованиеДоговора КАК НаименованиеДоговора,
	|	Договоры.СостояниеИсполнения КАК СостояниеИсполнения,
	|	Договоры.Администратор.Представление КАК АдминистраторПредставление,
	|	ВЫБОР
	|		КОГДА Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ3)
	|			ТОГДА Договоры.НаименованиеСтороны1
	|		ИНАЧЕ ""Заказчик""
	|	КОНЕЦ КАК НаименованиеСтороны1,
	|	ВЫБОР
	|		КОГДА Договоры.ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ДТ3)
	|			ТОГДА Договоры.НаименованиеСтороны2
	|		ИНАЧЕ ""Исполнитель""
	|	КОНЕЦ КАК НаименованиеСтороны2,
	|	Договоры.Представление КАК Представление
	|ИЗ
	|	Справочник.Договоры КАК Договоры
	|ГДЕ
	|	Договоры.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Задачи.Ссылка КАК Ссылка,
	|	Задачи.Владелец КАК Договор,
	|	Задачи.ЭтапДоговора КАК ЭтапДоговора,
	|	Задачи.СторонаЗадачи КАК СторонаЗадачи,
	|	Задачи.Представление КАК Наименование,
	|	Задачи.Администратор КАК Администратор,
	|	Задачи.ДатаНачала КАК ДатаНачала,
	|	Задачи.ДатаОкончания КАК ДатаОкончания,
	|	Задачи.СтатусЗадачи КАК СтатусЗадачи
	|ИЗ
	|	Справочник.Задачи КАК Задачи
	|ГДЕ
	|	Задачи.Владелец В(&Ссылка)
	|	И НЕ Задачи.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Договор,
	|	ЭтапДоговора,
	|	СторонаЗадачи,
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Шапка = Пакет[0].Выбрать();
	
	ТаблицаЗадачи = Пакет[1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПФ_Договор";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.Договоры.ПФ_Договор");
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		Если  Шапка.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4") Тогда
			ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаДТ4");
		Иначе
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.НаименованиеДоговора = Шапка.Представление;
		//ОбластьЗаголовок.Параметры.Администратор = Шапка.АдминистраторПредставление;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если  Шапка.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1")
			ИЛИ   Шапка.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ2") Тогда

			//Формирование
			ОбластьШапка.Параметры.Этап = "Этап формирования";
			ОбластьШапка.Параметры.НаименованиеСТороны1 = Шапка.НаименованиеСТороны1;
			ОбластьШапка.Параметры.НаименованиеСТороны2 = Шапка.НаименованиеСТороны2;
			ТабличныйДокумент.Вывести(ОбластьШапка);
			
			СтрокиТаблицыЗадачи = ТаблицаЗадачи.Строки.НайтиСтроки(Новый Структура("Договор, ЭтапДоговора, СторонаЗадачи", Шапка.Ссылка, Перечисления.ЭтапыДоговора.Формирование, 1));
			Таб1 = ПолучитьНовуюТЗЗадач();
			ЗаполнитьТаблицуРекурсивно(Таб1, СтрокиТаблицыЗадачи);
			СтрокиТаблицыЗадачи = ТаблицаЗадачи.Строки.НайтиСтроки(Новый Структура("Договор, ЭтапДоговора, СторонаЗадачи", Шапка.Ссылка, Перечисления.ЭтапыДоговора.Формирование, 2));
			Таб2 = ПолучитьНовуюТЗЗадач();
			ЗаполнитьТаблицуРекурсивно(Таб2, СтрокиТаблицыЗадачи);
			
			Кол1 = Таб1.Количество();
			Кол2 = Таб2.Количество();
			Для Инд = 1 По Макс(Кол1, Кол2) Цикл
				
				Если Инд <= Кол1 Тогда
					Задача1 = СтрШаблон("%1 - %2 - %3 - %4 - %5",  Таб1[Инд-1].Наименование , Формат(Таб1[Инд-1].ДатаНачала, "ДФ=dd.MM.yyyy"), Формат(Таб1[Инд-1].ДатаОкончания, "ДФ=dd.MM.yyyy"), Таб1[Инд-1].Администратор, Таб1[Инд-1].СтатусЗадачи);
					ОбластьСтрока.Параметры.Задача1 = Задача1;
				Иначе
					ОбластьСтрока.Параметры.Задача1 = "";
				КонецЕсли;
				
				Если Инд <= Кол2 Тогда
					Задача2 = СтрШаблон("%1 - %2 - %3 - %4 - %5",  Таб2[Инд-1].Наименование , Формат(Таб2[Инд-1].ДатаНачала, "ДФ=dd.MM.yyyy"), Формат(Таб2[Инд-1].ДатаОкончания, "ДФ=dd.MM.yyyy"), Таб2[Инд-1].Администратор, Таб2[Инд-1].СтатусЗадачи);
					ОбластьСтрока.Параметры.Задача2 = Задача2;
				Иначе
					ОбластьСтрока.Параметры.Задача2 = "";
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			КонецЦикла;
		КонецЕсли;	
		
		Если НЕ  Шапка.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4") Тогда
			//исполнение
			ОбластьШапка.Параметры.Этап = "Этап исполнения";
			ОбластьШапка.Параметры.НаименованиеСТороны1 = Шапка.НаименованиеСТороны1;
			ОбластьШапка.Параметры.НаименованиеСТороны2 = Шапка.НаименованиеСТороны2;
			ТабличныйДокумент.Вывести(ОбластьШапка);
		КонецЕсли;
		
		Если  Шапка.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4") Тогда
			СтрокиТаблицыЗадачи = ТаблицаЗадачи.Строки.НайтиСтроки(Новый Структура("Договор, ЭтапДоговора, СторонаЗадачи", Шапка.Ссылка, Перечисления.ЭтапыДоговора.Исполнение, 1));
			Таб1 = ПолучитьНовуюТЗЗадач();
			ЗаполнитьТаблицуРекурсивно(Таб1, СтрокиТаблицыЗадачи);
			
			Для Инд = 1 По Таб1.Количество() Цикл
				Задача1 = СтрШаблон("%1 - %2 - %3 - %4 - %5",  Таб1[Инд-1].Наименование , Формат(Таб1[Инд-1].ДатаНачала, "ДФ=dd.MM.yyyy"), Формат(Таб1[Инд-1].ДатаОкончания, "ДФ=dd.MM.yyyy"), Таб1[Инд-1].Администратор, Таб1[Инд-1].СтатусЗадачи);
				ОбластьСтрока.Параметры.Задача1 = Задача1;
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			КонецЦикла;
		Иначе
			СтрокиТаблицыЗадачи = ТаблицаЗадачи.Строки.НайтиСтроки(Новый Структура("Договор, ЭтапДоговора, СторонаЗадачи", Шапка.Ссылка, Перечисления.ЭтапыДоговора.Исполнение, 1));
			Таб1 = ПолучитьНовуюТЗЗадач();
			ЗаполнитьТаблицуРекурсивно(Таб1, СтрокиТаблицыЗадачи);
			СтрокиТаблицыЗадачи = ТаблицаЗадачи.Строки.НайтиСтроки(Новый Структура("Договор, ЭтапДоговора, СторонаЗадачи", Шапка.Ссылка, Перечисления.ЭтапыДоговора.Исполнение, 2));
			Таб2 = ПолучитьНовуюТЗЗадач();
			ЗаполнитьТаблицуРекурсивно(Таб2, СтрокиТаблицыЗадачи);
			
			
			Кол1 = Таб1.Количество();
			Кол2 = Таб2.Количество();
			Для Инд = 1 По Макс(Кол1, Кол2) Цикл
				
				Если Инд <= Кол1 Тогда
					Задача1 = СтрШаблон("%1 - %2 - %3 - %4 - %5",  Таб1[Инд-1].Наименование , Формат(Таб1[Инд-1].ДатаНачала, "ДФ=dd.MM.yyyy"), Формат(Таб1[Инд-1].ДатаОкончания, "ДФ=dd.MM.yyyy"), Таб1[Инд-1].Администратор, Таб1[Инд-1].СтатусЗадачи);
					ОбластьСтрока.Параметры.Задача1 = Задача1;
				Иначе
					ОбластьСтрока.Параметры.Задача1 = "";
				КонецЕсли;
				
				Если Инд <= Кол2 Тогда
					Задача2 = СтрШаблон("%1 - %2 - %3 - %4 - %5",  Таб2[Инд-1].Наименование , Формат(Таб2[Инд-1].ДатаНачала, "ДФ=dd.MM.yyyy"), Формат(Таб2[Инд-1].ДатаОкончания, "ДФ=dd.MM.yyyy"), Таб2[Инд-1].Администратор, Таб2[Инд-1].СтатусЗадачи);
					ОбластьСтрока.Параметры.Задача2 = Задача2;
					//ОбластьСтрока.Параметры.Задача2 = Таб2[Инд-1].Наименование;
				Иначе
					ОбластьСтрока.Параметры.Задача2 = "";
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
	
КонецФункции

Процедура ЗаполнитьТаблицуРекурсивно(Таб1, Выборка)
	Для Каждого Строка Из Выборка Цикл
		Стр = Таб1.Добавить();
		Стр.Уровень = Строка.Уровень();
		Стр.Наименование = Строка.Наименование;
		Для ин = 1 по Стр.Уровень Цикл
			Стр.Наименование = Символы.Таб + Стр.Наименование;
		КонецЦикла;
		Стр.СтатусЗадачи = Строка.СтатусЗадачи;
		Стр.Администратор = Строка.Администратор;
		Стр.ДатаНачала = Строка.ДатаНачала;
		Стр.ДатаОкончания = Строка.ДатаОкончания;
		ЗаполнитьТаблицуРекурсивно(Таб1, Строка.Строки);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьНовуюТЗЗадач()
	Таб = Новый ТаблицаЗначений;
	Таб.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	Таб.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	Таб.Колонки.Добавить("СтатусЗадачи", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыЗадач"));
	Таб.Колонки.Добавить("Администратор", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	Таб.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	Таб.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Возврат ТАб
КонецФункции

Функция ЕстьПодчиненныеДоговоры(ДоговорОснование) Экспорт
	
	СтруктураВозврата = Новый Структура("ЕстьПодчиненные,СуммаПоДоговоруПодчиненная, СуммаПоДоговоруПодчиненная, СуммаНачисленияПодчиненная, СуммаДоговораПодчиненная", Ложь);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Договоры.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Договоры КАК Договоры
		|ГДЕ
		|	Договоры.ДоговорОснование = &ДоговорОснование
		|	И НЕ Договоры.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДоговорОснование", ДоговорОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();

КонецФункции

#КонецОбласти
#КонецЕсли
