
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.ЗначенияЗаполнения.Свойство("ТипДоговора")Тогда
		Объект.ТипДоговора = Параметры.ЗначенияЗаполнения.ТипДоговора;	
	КонецЕсли;
	ЗаполнитьОтборыДерева();
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайлами = ОбщегоНазначения.ОбщийМодуль("РаботаСФайлами");
		ГиперссылкаФайлов = МодульРаботаСФайлами.ГиперссылкаФайлов();
		ГиперссылкаФайлов.Размещение = "КоманднаяПанель";
		МодульРаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ГиперссылкаФайлов);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ТекущийСотрудник = ТекущийПользователь.Сотрудник;
	ЭтоПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь(ТекущийПользователь);
	
	Если Параметры.Ключ.Пустая() Тогда
		Объект.Инициатор = ТекущийСотрудник;	
		Объект.Администратор = ТекущийСотрудник;	
		Объект.Подразделение = ТекущийСотрудник.Подразделение;	
	КонецЕсли;
	ЗапретИзмененияНаименований = НЕ (ЭтоПолноправныйПользователь ИЛИ Объект.Администратор = ТекущийСотрудник ИЛИ Объект.Ссылка.Пустая());
	Элементы.Наименование.ТолькоПросмотр = ЗапретИзмененияНаименований;
	Элементы.Наименование1.ТолькоПросмотр = ЗапретИзмененияНаименований;
	Элементы.ОбновитьНаименование.Видимость = НЕ ЗапретИзмененияНаименований;
	//Элементы.Администратор.ТолькоПросмотр = НЕ (ЭтоПолноправныйПользователь ИЛИ (НЕ Объект.Ссылка.Пустая() И Объект.Администратор <> ТекущийСотрудник));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РаспределенияДоговоров, "Договор", Объект.Ссылка);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодчиненныеДоговоры, "ДоговорОснование", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено),);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодчиненныеДоговоры, "ЕстьПодчиненные", Ложь);
	Если НЕ Объект.Ссылка.Пустая() Тогда
		СтруктураВозврата = Неопределено;
		ЗаполнитьПодчиненныеДоговоры(СтруктураВозврата, Объект.Ссылка);
		Если НЕ СтруктураВозврата = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураВозврата);
		КонецЕсли;
	КонецЕсли;
	
	//временно
	ПолноправныйПольователь = Пользователи.РолиДоступны("КЛадо_Администрирование, КЛАДО_ДобавлениеДоговоров", Пользователи.ТекущийПользователь());
	//Элементы.ГруппаСуммыЛево.ТолькоПросмотр = НЕ ПолноправныйПольователь;
	Элементы.Код.ТолькоПросмотр = НЕ ПолноправныйПольователь;
	Элементы.ГруппаДоговорОснование.ТолькоПросмотр = НЕ ПолноправныйПольователь;
	Элементы.Родитель.ТолькоПросмотр = НЕ ПолноправныйПольователь;
	Элементы.Группа5.ТолькоПросмотр = НЕ ПолноправныйПольователь;
	Элементы.Наименование1.ТолькоПросмотр = НЕ ПолноправныйПольователь;
	Элементы.ГруппаПериод.ТолькоПросмотр = НЕ ПолноправныйПольователь;
	//Элементы.ОтнестиНаПериод.Доступность = ЭтоПолноправныйПользователь;
	//Элементы.Оплаты.Доступность = ЭтоПолноправныйПользователь;
	Элементы.ЗаполнитьСуммыПоРодителю.Доступность = ПолноправныйПольователь;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаполнитьДеревоРесурсовНаСервере();	
	КонецЕсли;
	
	ЗаполнитьСуммыВРаспределении();
	ЗаполнитьСуммуОплаты();
	// Автор: Кочетков П.А.
	// Дата: 30.11.2022 10:49:58
	// Комментарий: Попросили дать возможность редактировать сумму начисления вручную
	// -------- Удаленный код:
	//ЗаполнитьСуммуНачисления();
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда 
		Если ЗначениеЗаполнено(Объект.Проект) И ТипЗнч(Объект.Проект) = Тип("СправочникСсылка.Проекты") Тогда 
			Объект.Организация = Объект.Проект.Владелец;	
		Иначе 
			Объект.Организация = Константы.ОрганизацияПоУмолчанию.Получить();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьМТО();
	УстановитьВидимостьТОИР();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступность();
	
	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПриОткрытии(ЭтотОбъект, Отказ);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	РассчитатьСуммыИнструменты();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.Доходы.Количество() Тогда
		Объект.СуммаНачисленийИзУС = Объект.Доходы.Итог("СуммаНачисленийИзУС");
	КонецЕсли; 
	
	//// Начало Изменение реквизитов
	//Если ПараметрыЗаписи.Свойство("ИзмененияОбработаны") Тогда
	//	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИзмененияОбработаны",  ПараметрыЗаписи.ИзмененияОбработаны);
	//КонецЕсли;
	//// Конец Изменение реквизитов
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	// СтандартныеПодсистемы.РаботаСФайлами
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
	Если ИмяСобытия = "ИнструментыВыбраныНастройкиПоДням" Тогда 
		Если Параметр.ВладелецФормы = ЭтаФорма Тогда
			
			Если Параметр.НачальнаяДата < 1 Или Параметр.КоличествоДней < 1 Тогда 
				Возврат
			КонецЕсли;
			
			НужнаПроверкаНаИспользованиеВВыходные = Параметр.СУчетомВыходных;
			
			Для Каждого ИдСтр Из Элементы.ИнструментыДинамическая.ВыделенныеСтроки Цикл
				Стр = ИнструментыДинамическая.НайтиПоИдентификатору(ИдСтр);
				Если Стр <> Неопределено Тогда 
					ТекМесяц = НачалоМесяца(Объект.ДатаНачала);
					Пока ТекМесяц <= Объект.ДатаОкончания Цикл
						НомерДаты = Параметр.НачальнаяДата;
						Для КоличествоИтераций = 1 По Параметр.КоличествоДней Цикл
							ТекДата = НачалоМесяца(ТекМесяц) + (НомерДаты-1)*86400;
							Если НачалоМесяца(ТекДата) <> НачалоМесяца(ТекМесяц) Тогда 
								Прервать;
							КонецЕсли;
							Попытка
								Если НужнаПроверкаНаИспользованиеВВыходные Тогда 
									Пока ТекДата <= КонецМесяца(ТекМесяц) Цикл
										Если НЕ ЭтоВыходной(ТекДата) Тогда 
											Стр["КоличествоДин"+Формат(ТекДата,"ЧГ=; ДФ=ггггММдд")] = Параметр.КоличествоЧасов;
											Прервать;
										Иначе
											Стр["КоличествоДин"+Формат(ТекДата,"ЧГ=; ДФ=ггггММдд")] = 0;
											НомерДаты = НомерДаты + 1;
											ТекДата = НачалоМесяца(ТекМесяц) + (НомерДаты-1)*86400;											
										КонецЕсли;
									КонецЦикла;
								Иначе
									Стр["КоличествоДин"+Формат(ТекДата,"ЧГ=; ДФ=ггггММдд")] = Параметр.КоличествоЧасов;	
								КонецЕсли;
							Исключение
							КонецПопытки;
							НомерДаты = НомерДаты + 1;
						КонецЦикла;
						ТекМесяц = ДобавитьМесяц(ТекМесяц,1);	
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			РассчитатьСуммыИнструменты();
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	//// Начало Изменение реквизитов
	//Если НЕ ПараметрыЗаписи.Свойство("ИзмененияОбработаны") 
	//	И Модифицированность И НЕ Объект.Ссылка.Пустая() Тогда
	//	Отказ = Истина;
	//	ПолучитьИзмененныеРеквизиты();
	//	Если ИзмененияРеквизитов.Количество() > 0 Тогда
	//		ПараметрыОткрытия = Новый Структура();
	//		ПараметрыОткрытия.Вставить("Объект", Объект.Ссылка);
	//		ПараметрыОткрытия.Вставить("АдресХранилища", ПоместитьИзмененияВХранилище(ИзмененияРеквизитов));
	//		ОткрытьФорму("РегистрСведений.ИсторияИзменения.Форма.ФормаИсторииИзменения", ПараметрыОткрытия, ЭтаФорма,,,,Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//	Иначе
	//		Записать(Новый Структура("ИзмененияОбработаны", Истина));
	//	КонецЕсли;
	//КонецЕсли;
	//// Конец Изменение реквизитов
	Если НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1") 
		И Объект.Распределения.Итог("Сумма") > Объект.СуммаНачисления Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сумма начисления меньше, чем распределенная сумма по договорам ДТ1!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1") 
		И Объект.СуммаПоДоговору > 0 
		И Объект.Оплаты.Итог("СуммаНачисления") = 0
		И НЕ ПараметрыЗаписи.Свойство("СуммыПроверены") Тогда
		Отказ = Истина;
        ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьСуммуНачисленияЗавершение", ЭтаФорма, ПараметрыЗаписи), 
						"Добавить сумму начисления в табличную часть взаиморасчетов?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого Стр Из Объект.Оплаты Цикл
			Если Стр.ПометкаУдаления Тогда 
				МассивУдаляемыхСтрок.Добавить(Стр);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементМассивУдаляемыхСтрок Из МассивУдаляемыхСтрок Цикл
			Объект.Оплаты.Удалить(ЭлементМассивУдаляемыхСтрок);
		КонецЦикла;
		
		МассивУдаляемыхСтрок = Новый Массив;
		Для Каждого Стр Из Объект.СуммыПоДоговоруПоПериоду Цикл
			Если Стр.ПометкаУдаления Тогда 
				МассивУдаляемыхСтрок.Добавить(Стр);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементМассивУдаляемыхСтрок Из МассивУдаляемыхСтрок Цикл
			Объект.СуммыПоДоговоруПоПериоду.Удалить(ЭлементМассивУдаляемыхСтрок);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаПерсоналИнструментыЗаполнены Тогда 
		
		ЗаполнитьТаблицуПерсоналВОбъекте();
		
		ЗаполнитьТаблицуИнструментыВОбъекте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(Результат, ДопПараметры) Экспорт
	//// Начало Изменение реквизитов
	//Если Результат = Неопределено Тогда
	//	Возврат;
	//Иначе
	//	 ЗагрузитьТаблицуИзменений(Результат);
	//	 Записать(Новый Структура("ИзмененияОбработаны", Истина));
	//КонецЕсли;
	//// Конец Изменение реквизитов
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//// Начало Изменение реквизитов
	//Если НЕ Отказ Тогда
	//	ИзменениеРеквизитовСервер.ЗаписатьИзмененияРеквизитов(ТекущийОбъект.Ссылка, ИзмененияРеквизитов);
	//КонецЕсли;
	//// Конец Изменение реквизитов
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(РаспределенияДоговоров, "Договор", Объект.Ссылка);
	ЗаполнитьОтборыДерева();
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ПодчиненныеДоговоры, "Родитель", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено),);
	Оповестить("ОбновитьДоговорыПроекта");
	//// Начало Изменение реквизитов
	//ИзмененияРеквизитов.Очистить();
	//// Конец Изменение реквизитов
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаПланПоРесурсам Тогда 
		Если Не ТаблицаПерсоналИнструментыЗаполнены Тогда 
			
			ДобавитьВТаблицуКолонкиНаСервере();
			ЗаполнитьТаблицуНаФормеИзОбъекта();
			ЗаполнитьДоступныеЧасыПерсонала();
			
			ДобавитьВТаблицуИнструментыКолонкиНаСервере();
			ЗаполнитьТаблицуИнструментыНаФормеИзОбъекта();
			
			ТаблицаПерсоналИнструментыЗаполнены = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраНажатие(Элемент, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент,
			ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("РаботаСФайламиКлиент");
		МодульРаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент,
			ПараметрыПеретаскивания, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

&НаКлиенте
Процедура ТипДоговораПриИзменении(Элемент)
	СформироватьНаименование();
	УстановитьВидимостьДоступность();
	УстановитьВидимостьМТО();
	УстановитьВидимостьТОИР();
КонецПроцедуры

&НаКлиенте
Процедура Наименование1ПриИзменении(Элемент)
	СформироватьНаименование();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	СформироватьНаименование();
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	СформироватьНаименование();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	СформироватьНаименование();
КонецПроцедуры

&НаКлиенте
Процедура АдминистраторПриИзменении(Элемент)
	СформироватьНаименование();
	ТекПодр = ПолучитьПодразделение(Объект.Администратор);
	Если ЗначениеЗаполнено(ТекПодр) Тогда
		Объект.Подразделение = ТекПодр;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеСтороны1ПриИзменении(Элемент)
	Элементы.ГруппаСторона3.Заголовок = "Сторона 1 (" + ?(ЗначениеЗаполнено(Объект.НаименованиеСтороны1), Объект.НаименованиеСтороны1, "Заказчик") + ")";
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеСтороны2ПриИзменении(Элемент)
	Элементы.ГруппаСторона4.Заголовок = "Сторона 2 (" + ?(ЗначениеЗаполнено(Объект.НаименованиеСтороны2), Объект.НаименованиеСтороны2, "Исполнитель") + ")";
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИзмененияДаты(Команда)
	ТекущаяТаблица = Сред(Команда.Имя, 22); 
	ТекущиеДанные = Элементы[ТекущаяТаблица].ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрана строка.");
		Возврат;
	КонецЕсли;
	Отбор = Новый Структура("НазваниеРеквизита, Объект", "ДатаОкончания", ТекущиеДанные.Ссылка);
	ОткрытьФорму("РегистрСведений.ИсторияИзменения.ФормаСписка", Новый Структура("Отбор", Отбор), ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаименование(Команда)
	СформироватьНаименование(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если Записать(Новый Структура("ЗаписатьиЗакрыть", Истина)) Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВестиУчетПоДопДоговоруПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура АдминистраторЗадачиОтборПриИзменении(Элемент)
	Если ЗначениеЗаполнено(АдминистраторЗадачиОтбор) Тогда
		Элементы.ЗадачиЗаказчика.Отображение = ОтображениеТаблицы.Список;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона1, "Администратор", АдминистраторЗадачиОтбор);
	Иначе	
		Элементы.ЗадачиЗаказчика.Отображение = ОтображениеТаблицы.Дерево;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона1, "Администратор", АдминистраторЗадачиОтбор,,,Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдминистраторЗадачиОтбор1ПриИзменении(Элемент)
	Если ЗначениеЗаполнено(АдминистраторЗадачиОтбор1) Тогда
		Элементы.ЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Список;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона2, "Администратор", АдминистраторЗадачиОтбор1);
	Иначе	
		Элементы.ЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Дерево;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона2, "Администратор", АдминистраторЗадачиОтбор1,,,Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдминистраторЗадачиОтбор2ПриИзменении(Элемент)
	Если ЗначениеЗаполнено(АдминистраторЗадачиОтбор2) Тогда
		Элементы.ИЗадачиЗаказчика.Отображение = ОтображениеТаблицы.Список;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона1, "Администратор", АдминистраторЗадачиОтбор2);
	Иначе	
		Элементы.ИЗадачиЗаказчика.Отображение = ОтображениеТаблицы.Дерево;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона1, "Администратор", АдминистраторЗадачиОтбор2,,,Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдминистраторЗадачиОтбор3ПриИзменении(Элемент)
	Если ЗначениеЗаполнено(АдминистраторЗадачиОтбор3) Тогда
		Элементы.ИЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Список;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона2, "Администратор", АдминистраторЗадачиОтбор3);
	Иначе	
		Элементы.ИЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Дерево;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона2, "Администратор", АдминистраторЗадачиОтбор3,,,Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтнестиНаПериод(Команда)
	ОткрытьФорму("Справочник.Договоры.Форма.ФормаСуммыПоДоговору", Новый Структура("АдресТЗ", СформироватьАдресТЗ("СуммыПоДоговоруПоПериоду")), ЭтаФорма,
				,,,Новый ОписаниеОповещения("ОтнестиНаПериодЗавершение", ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

&НаКлиенте
Процедура ОтнестиНаПериодЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	ЗагрузитьСуммыПоДоговоруПоПериодуПоАдресу(Результат);
	//Объект.СуммаПоДоговору = Объект.СуммыПоДоговоруПоПериоду.Итог("СуммаПоДоговору");
	Объект.СуммаПоДоговору = 0;
	Для Каждого Стр Из Объект.СуммыПоДоговоруПоПериоду Цикл
		Если НЕ Стр.ПометкаУдаления	Тогда 
			Объект.СуммаПоДоговору	= Объект.СуммаПоДоговору + Стр.СуммаПоДоговору;		
		КонецЕсли;
	КонецЦикла;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	Если Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1") Тогда 
		ПересчитатьЦены();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1") Тогда 
		ПересчитатьЦены();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоДоговору(Команда)
	
	СтрПараметры = Новый Структура;
    СтрПараметры.Вставить("Ссылка", Объект.Ссылка);
    
    ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("ОтчетПоДоговору",СтрПараметры);
    
    ПараметрыФормы = Новый Структура("ПользовательскиеНастройки, СформироватьПриОткрытии", ПользовательскиеНастройки, Истина);
    
    ОткрытьФорму("Отчет.ОтчетПоДоговору.Форма", ПараметрыФормы); 

КонецПроцедуры

#КонецОбласти

#Область Страница_Основное

&НаКлиенте
Процедура Оплаты(Команда)
	ОткрытьФорму("Справочник.Договоры.Форма.ФормаОплаты", Новый Структура("АдресТЗ, ТипДоговора, СтатьяЗатрат, Родитель, Ссылка", СформироватьАдресТЗ("Оплаты"), Объект.ТипДоговора, Объект.СтатьяЗатрат, Объект.ДоговорОснование, Объект.Ссылка), ЭтаФорма,
				,,,Новый ОписаниеОповещения("ОплатыЗавершение", ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

&НаКлиенте
Процедура ОплатыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	ЗагрузитьОплатыПоАдресу(Результат);
	
	//Объект.СуммаДоговора = Объект.Оплаты.Итог("СуммаОплаты");
	//Объект.СуммаНачисления = Объект.Оплаты.Итог("СуммаНачисления");
	
	Объект.СуммаДоговора	= 0;
	Объект.СуммаНачисления	= 0;
	
	Для Каждого Стр Из Объект.Оплаты Цикл
		Если НЕ Стр.ПометкаУдаления	Тогда 
			Объект.СуммаДоговора	= Объект.СуммаДоговора + Стр.СуммаОплаты;		
			Объект.СуммаНачисления	= Объект.СуммаНачисления + Стр.СуммаНачисления;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	Объект.Организация = ПолучитьОрганизациюПроекта(Объект.Проект);
КонецПроцедуры

#КонецОбласти

#Область Страница_Исполнение

&НаКлиенте
Процедура ЗадачиИсполнителяПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.Ссылка.Пустая() Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачиПередНачаломДобавленияЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Перед добавлением задач необходимо записать договор. 
										|Записать?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередНачаломДобавленияЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да тогда
		Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуЗаказчика(Команда)
	ТекущиеДанные = Элементы.ЗадачиЗаказчика.ТекущиеДанные;
	Родитель = Неопределено;
	Если НЕ ТекущиеДанные = Неопределено тогда
		Родитель = ТекущиеДанные.Ссылка;
	КонецЕсли;
	СоздатьЗадачу(1, ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Формирование"), Родитель, 1);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуЗавершение(Результат, ДопПараметры) Экспорт
	Если ДопПараметры = 1 Тогда	
		Элементы.ЗадачиЗаказчика.Обновить();
	ИначеЕсли ДопПараметры = 2 Тогда	
		Элементы.ЗадачиИсполнителя.Обновить();
	ИначеЕсли ДопПараметры = 3 Тогда	
		Элементы.ИЗадачиЗаказчика.Обновить();
	ИначеЕсли ДопПараметры = 4 Тогда	
		Элементы.ИЗадачиИсполнителя.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуИсполнителя(Команда)
	ТекущиеДанные = Элементы.ЗадачиИсполнителя.ТекущиеДанные;
	Родитель = Неопределено;
	Если НЕ ТекущиеДанные = Неопределено тогда
		Родитель = ТекущиеДанные.Ссылка;
	КонецЕсли;
	СоздатьЗадачу(2, ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Формирование"), Родитель, 2);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачу(Сторона, Этап, Родитель, НомерТаблицы)
	Если Объект.Ссылка.Пустая() Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачиПередНачаломДобавленияЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Перед добавлением задач необходимо записать договор. 
										|Записать?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ПараметрыОткрытия = Новый Структура("СторонаЗадачи, Владелец, Инициатор, ЭтапДоговора", Сторона, Объект.Ссылка, ТекущийСотрудник, Этап);
		Если НЕ Родитель = Неопределено тогда
			ПараметрыОткрытия.Вставить("Родитель", Родитель);
			ПараметрыОткрытия.Вставить("КодовоеНаименование", ПредопределенноеЗначение("Перечисление.УровниClado.РезультатВторогоУровня"));
		Иначе
			ПараметрыОткрытия.Вставить("КодовоеНаименование", ПредопределенноеЗначение("Перечисление.УровниClado.РезультатыПервогоУровня"));
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЗадачуЗавершение", ЭтаФорма, НомерТаблицы);
		ОткрытьФорму("Справочник.Задачи.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения, СозданаИзДоговора", ПараметрыОткрытия, Истина), ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте  
Процедура ИСоздатьЗадачуЗаказчика(Команда)
	ТекущиеДанные = Элементы.ИЗадачиЗаказчика.ТекущиеДанные;
	Родитель = Неопределено;
	Если НЕ ТекущиеДанные = Неопределено тогда
		Родитель = ТекущиеДанные.Ссылка;
	КонецЕсли;
	СоздатьЗадачу(1, ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Исполнение"), родитель, 3);
КонецПроцедуры

&НаКлиенте
Процедура ИСоздатьЗадачуИсполнителя(Команда)
	ТекущиеДанные = Элементы.ИЗадачиИсполнителя.ТекущиеДанные;
	Родитель = Неопределено;
	Если НЕ ТекущиеДанные = Неопределено тогда
		Родитель = ТекущиеДанные.Ссылка;
	КонецЕсли;
	СоздатьЗадачу(2, ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Исполнение"), родитель, 4);
КонецПроцедуры

&НаСервере
Процедура СкопироватьВБиблиотекуПроцессовНаСервере(Ссылка, СписокЗадач, Подразделение, НаименованиеДоговора)
	
	НовыйШаблон = Справочники.БиблиотекаПроцессов.СоздатьЭлемент();
	НовыйШаблон.Подразделение = Подразделение;
	НовыйШаблон.ТипДоговора = Объект.ТипДоговора;
	НовыйШаблон.НаименованиеДоговора = НаименованиеДоговора;
	НовыйШаблон.Наименование = Строка(Объект.ТипДоговора) + " - " + Объект.НаименованиеДоговора;
	НовыйШаблон.Записать();
	
	ШаблонСсылка = НовыйШаблон.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", Ссылка);
	Запрос.УстановитьПараметр("СписокЗадач", СписокЗадач);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задачи.Ссылка КАК Ссылка,
	               |	Задачи.Родитель КАК Родитель,
	               |	Задачи.Наименование КАК Наименование,
	               |	Задачи.КодовоеНаименование КАК КодовоеНаименование,
	               |	Задачи.СторонаЗадачи КАК СторонаЗадачи,
	               |	Задачи.ЭтапДоговора КАК ЭтапДоговора,
	               |	Задачи.Ресурсы.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Ресурс КАК Ресурс,
	               |		Количество КАК Количество
	               |	) КАК Ресурсы
	               |ИЗ
	               |	Справочник.Задачи КАК Задачи
	               |ГДЕ
	               |	Задачи.Владелец = &Владелец
	               |	И НЕ Задачи.ПометкаУдаления
	               |	И Задачи.Ссылка В (&СписокЗадач)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Задачи.Ссылка ИЕРАРХИЯ";
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеСсылок = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Родитель = ПредопределенноеЗначение("Справочник.Задачи.ПустаяСсылка");
		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			Родитель = СоответствиеСсылок.Получить(Выборка.Родитель);				
		КонецЕсли;
		НоваяЗадача = СоздатьЗадачи(ШаблонСсылка, Родитель, Выборка);
		СоответствиеСсылок.Вставить(Выборка.Ссылка, НоваяЗадача);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Создан новый процесс в библиотеке процессов: " + НовыйШаблон.Наименование, ШаблонСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВБиблиотекуПроцессовНаСервереЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Копирование отменено.");
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.СписокЗадач.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрано ни одной задачи для копирования.");
			Возврат;
		КонецЕсли;
		СкопироватьВБиблиотекуПроцессовНаСервере(Объект.Ссылка, Результат.СписокЗадач, Результат.Подразделение, Результат.НаименованиеДоговора);
		Элементы.ЗадачиЗаказчика.Обновить();
		Элементы.ЗадачиИсполнителя.Обновить();
		Элементы.ИЗадачиЗаказчика.Обновить();
		Элементы.ИЗадачиИсполнителя.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьЗадачи(Владелец, Родитель, Выборка)
	НоваяЗадача = Справочники.Задачи.СоздатьЭлемент();
	НоваяЗадача.Владелец = Владелец;
	НоваяЗадача.Родитель = Родитель;
	НоваяЗадача.СтатусЗадачи = ПредопределенноеЗначение("Перечисление.СтатусыЗадач.Планируемая");
	ЗаполнитьЗначенияСвойств(НоваяЗадача, Выборка, "Наименование, КодовоеНаименование, СторонаЗадачи, ЭтапДоговора");
	ВыборкаРесурсы = Выборка.Ресурсы.выбрать();
	Пока ВыборкаРесурсы.Следующий() Цикл
		СтрокаРесурс = НоваяЗадача.Ресурсы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРесурс, ВыборкаРесурсы);
	КонецЦикла;
	НоваяЗадача.Записать();
	Возврат НоваяЗадача.Ссылка;
КонецФункции

&НаКлиенте
Процедура СкопироватьВБиблиотекуПроцессов(Команда)
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СкопироватьВБиблиотекуПроцессовЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Перед копированием необходимо записать договор. 
										|Записать?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьФорму("Справочник.БиблиотекаПроцессов.Форма.ФормаКопированияЭлемента", Новый Структура("Объект, ЭтоИмпорт, Подразделение", Объект.Ссылка, Истина, Объект.Подразделение), ЭтаФорма,
				,,,Новый ОписаниеОповещения("СкопироватьВБиблиотекуПроцессовНаСервереЗавершение", ЭтаФорма));	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьВБиблиотекуПроцессовЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да тогда
		РезультатЗаписи = Записать();
		Если РезультатЗаписи Тогда
			ОткрытьФорму("Справочник.БиблиотекаПроцессов.Форма.ФормаКопированияЭлемента", Новый Структура("Объект, ЭтоИмпорт, Подразделение", Объект.Ссылка, Истина, Объект.Подразделение), ЭтаФорма,
					,,,Новый ОписаниеОповещения("СкопироватьВБиблиотекуПроцессовНаСервереЗавершение", ЭтаФорма));	
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтруктуруПоПроцессу(Команда)
	Если Модифицированность 
		ИЛИ Объект.Ссылка.Пустая() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СкопироватьИзБиблиотекиПроцессовЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Перед заполнением структуры задач из процесса необходимо записать договор. 
										|Записать?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ВыборПроцесса();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьИзБиблиотекиПроцессовЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да тогда
		РезультатЗаписи = Записать();
		Если РезультатЗаписи Тогда
			ВыборПроцесса();
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборПроцесса() Экспорт
	//Отбор = Новый Структура("ТипДоговора", Объект.ТипДоговора);
	ОткрытьФорму("Справочник.БиблиотекаПроцессов.ФормаВыбора", , ЭтаФорма,
			,,,Новый ОписаниеОповещения("ВыборПроцессаЗавершение", ЭтаФорма));	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПроцессаЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Копирование отменено.");
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.БиблиотекаПроцессов.Форма.ФормаКопированияЭлемента", Новый Структура("Объект, ЭтоИмпорт, Подразделение, ТипДоговора", 
																			Результат, Ложь, Объект.Подразделение, Объект.ТипДоговора), ЭтаФорма,
			,,,Новый ОписаниеОповещения("КопированиеИзПроцессаЗавершение", ЭтаФорма));	
КонецПроцедуры

&НаКлиенте
Процедура КопированиеИзПроцессаЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Копирование отменено.");
		Возврат;
	КонецЕсли;
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.СписокЗадач.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбрано ни одной задачи для копирования.");
			Возврат;
		КонецЕсли;
		СкопироватьИзБиблиотекиПроцессовНаСервере(Результат.Процесс, Результат.СписокЗадач);
		Элементы.ЗадачиЗаказчика.Обновить();
		Элементы.ЗадачиИсполнителя.Обновить();
		Элементы.ИЗадачиЗаказчика.Обновить();
		Элементы.ИЗадачиИсполнителя.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СкопироватьИзБиблиотекиПроцессовНаСервере(ШаблонСсылка, СписокЗадач)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", ШаблонСсылка);
	Запрос.УстановитьПараметр("СписокЗадач", СписокЗадач);
	Запрос.Текст = "ВЫБРАТЬ
	               |	Задачи.Ссылка КАК Ссылка,
	               |	Задачи.Родитель КАК Родитель,
	               |	Задачи.Наименование КАК Наименование,
	               |	Задачи.КодовоеНаименование КАК КодовоеНаименование,
	               |	Задачи.СторонаЗадачи КАК СторонаЗадачи,
	               |	Задачи.ЭтапДоговора КАК ЭтапДоговора,
	               |	Задачи.Ресурсы.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Ресурс КАК Ресурс,
	               |		Количество КАК Количество
	               |	) КАК Ресурсы
	               |ИЗ
	               |	Справочник.Задачи КАК Задачи
	               |ГДЕ
	               |	Задачи.Владелец = &Владелец
	               |	И НЕ Задачи.ПометкаУдаления
	               |	И Задачи.Ссылка В (&СписокЗадач)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Задачи.Ссылка ИЕРАРХИЯ";
	Выборка = Запрос.Выполнить().Выбрать();
	СоответствиеСсылок = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		Родитель = ПредопределенноеЗначение("Справочник.Задачи.ПустаяСсылка");
		Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
			Родитель = СоответствиеСсылок.Получить(Выборка.Родитель);				
		КонецЕсли;
		НоваяЗадача = СоздатьЗадачи(Объект.Ссылка, Родитель, Выборка);
		СоответствиеСсылок.Вставить(Выборка.Ссылка, НоваяЗадача);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиЗаказчикаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьПеретаскивание(ПараметрыПеретаскивания.Значение, Строка, 1);
	КонецЕсли;
	Элементы.ЗадачиЗаказчика.Обновить();
	Элементы.ЗадачиИсполнителя.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиИсполнителяПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьПеретаскивание(ПараметрыПеретаскивания.Значение, Строка, 2);
	КонецЕсли;
	Элементы.ЗадачиИсполнителя.Обновить();
	Элементы.ЗадачиЗаказчика.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьПеретаскивание(ЗадачаИст, ЗадачаРодитель, СторонаПриемник)
	ЗадачаОб = ЗадачаИст.ПолучитьОбъект();
	ЗадачаОб.Родитель = ЗадачаРодитель;
	ЗадачаОб.СторонаЗадачи = СторонаПриемник;
	Если ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.РезультатыПервогоУровня
		И ЗначениеЗаполнено(ЗадачаРодитель) Тогда
		ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.РезультатВторогоУровня;
	ИначеЕсли НЕ ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.РезультатыПервогоУровня
		И НЕ ЗначениеЗаполнено(ЗадачаРодитель) Тогда
		ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.РезультатыПервогоУровня;
	ИначеЕсли ЗадачаРодитель.КодовоеНаименование = Перечисления.УровниClado.РезультатВторогоУровня
		И НЕ ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.ГруппаРезультатовВторогоУровня Тогда
		ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.ГруппаРезультатовВторогоУровня;
	ИначеЕсли ЗадачаРодитель.КодовоеНаименование = Перечисления.УровниClado.РезультатыПервогоУровня
		И НЕ (ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.РезультатВторогоУровня
			ИЛИ ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.ГруппаРезультатовВторогоУровня) Тогда
			ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.РезультатВторогоУровня;
	КонецЕсли;
	ЗадачаОб.Записать();
КонецФункции

&НаКлиенте
Процедура ИЗадачиЗаказчикаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьПеретаскивание(ПараметрыПеретаскивания.Значение, Строка, 1);
	КонецЕсли;
	Элементы.ИЗадачиЗаказчика.Обновить();
	Элементы.ИЗадачиИсполнителя.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ИЗадачиИсполнителяПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьПеретаскивание(ПараметрыПеретаскивания.Значение, Строка, 2);
	КонецЕсли;
	Элементы.ИЗадачиИсполнителя.Обновить();
	Элементы.ИЗадачиЗаказчика.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ИЗадачиИсполнителяВыгрузитьВЭксель(Команда)
	
	 Диалог = Новый ДиалогРедактированияСтандартногоПериода();
     Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
		  
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт  
	
	ТабДок = Новый  ТабличныйДокумент;
	ВывестиСКДВТабличныйДокумент(Табдок, Объект.Ссылка, Период);
	
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ТекущиеЗадачи");
	КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок;
	КоллекцияПечатныхФорм[0].ИмяФайлаПечатнойФормы = "Задачи по договору " + Строка(Объект.Ссылка);
	КоллекцияПечатныхФорм[0].СинонимМакета = "Задачи по договору " + Строка(Объект.Ссылка);
	УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм);
	
КонецПроцедуры

&НаКлиенте
Процедура ИЗадачиЗаказчикаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если РежимРедактированияЗадач Тогда
		СтандартнаяОбработка = Ложь;
		Если Элемент.ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ИЗадачиЗаказчикаСсылка" Тогда
			ВведеннаяСтрока = ПолучитьНаименованиеЗадачи(Элемент.ТекущиеДанные.Ссылка);
			ПоказатьВводСтроки(Новый ОписаниеОповещения("ИЗадачиЗаказчикаВыборЗавершение", ЭтотОбъект, Новый Структура("ИмяЭлемента, Задача", Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные.Ссылка)), ВведеннаяСтрока, "Введите наименование:");	
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ИЗадачиЗаказчикаАдминистратор" Тогда
			ВыбранныйАдминистратор = Элемент.ТекущиеДанные.Администратор;
			ПоказатьВводЗначения(Новый ОписаниеОповещения("ИЗадачиЗаказчикаВыборЗавершение", ЭтотОбъект, Новый Структура("ИмяЭлемента, Задача", Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные.Ссылка)), ВыбранныйАдминистратор, "Выберите администратора:", Тип("СправочникСсылка.Сотрудники"));	
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ИЗадачиЗаказчикаДатаНачала" Тогда
			ВыбраннаяДата = Элемент.ТекущиеДанные.ДатаНачала;
			ПоказатьВводДаты(Новый ОписаниеОповещения("ИЗадачиЗаказчикаВыборЗавершение", ЭтотОбъект, Новый Структура("ИмяЭлемента, Задача", Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные.Ссылка)), ВыбраннаяДата, "Выберите дату начала:", ЧастиДаты.Дата);	
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ИЗадачиЗаказчикаДатаОкончания" Тогда
			ВыбраннаяДата = Элемент.ТекущиеДанные.ДатаОкончания;
			ПоказатьВводДаты(Новый ОписаниеОповещения("ИЗадачиЗаказчикаВыборЗавершение", ЭтотОбъект, Новый Структура("ИмяЭлемента, Задача", Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные.Ссылка)), ВыбраннаяДата, "Выберите дату окончания:", ЧастиДаты.Дата);	
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ИЗадачиЗаказчикаСтатусЗадачи" Тогда
			ВыбранныйАдминистратор = Элемент.ТекущиеДанные.СтатусЗадачи;
			ПоказатьВводЗначения(Новый ОписаниеОповещения("ИЗадачиЗаказчикаВыборЗавершение", ЭтотОбъект, Новый Структура("ИмяЭлемента, Задача", Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные.Ссылка)), ВыбранныйАдминистратор, "Выберите статус:", Тип("ПеречислениеСсылка.СтатусыЗадач"));	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИЗадачиЗаказчикаВыборЗавершение(ВведеноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВведеноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗадачаОбъект = ДополнительныеПараметры.Задача.ПолучитьОбъект();
	Если ДополнительныеПараметры.ИмяЭлемента = "ИЗадачиЗаказчикаСсылка" Тогда
		ЗадачаОбъект.Наименование = ВведеноеЗначение;
	ИначеЕсли ДополнительныеПараметры.ИмяЭлемента = "ИЗадачиЗаказчикаАдминистратор" Тогда
		ЗадачаОбъект.Администратор = ВведеноеЗначение;
	ИначеЕсли ДополнительныеПараметры.ИмяЭлемента = "ИЗадачиЗаказчикаДатаНачала" Тогда
		ЗадачаОбъект.ДатаНачала = ВведеноеЗначение;
	ИначеЕсли ДополнительныеПараметры.ИмяЭлемента = "ИЗадачиЗаказчикаДатаОкончания" Тогда
		ЗадачаОбъект.ДатаОкончания = ВведеноеЗначение;
	ИначеЕсли ДополнительныеПараметры.ИмяЭлемента = "ИЗадачиЗаказчикаСтатусЗадачи" Тогда
		ЗадачаОбъект.СтатусЗадачи = ВведеноеЗначение;
	КонецЕсли;
	ЗадачаОбъект.Записать();
	
	Элементы.ИЗадачиЗаказчика.Обновить();	

КонецПроцедуры

&НаКлиенте
Процедура ИЗадачиИсполнителяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если РежимРедактированияЗадач Тогда
		СтандартнаяОбработка = Ложь;
		Если Элемент.ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ИЗадачиИсполнителяСсылка" Тогда
			ВведеннаяСтрока = ПолучитьНаименованиеЗадачи(Элемент.ТекущиеДанные.Ссылка);
			ПоказатьВводСтроки(Новый ОписаниеОповещения("ИЗадачиИсполнителяВыборЗавершение", ЭтотОбъект, Новый Структура("ИмяЭлемента, Задача", Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные.Ссылка)), ВведеннаяСтрока, "Введите наименование:");	
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ИЗадачиИсполнителяАдминистратор" Тогда
			ВыбранныйАдминистратор = Элемент.ТекущиеДанные.Администратор;
			ПоказатьВводЗначения(Новый ОписаниеОповещения("ИЗадачиИсполнителяВыборЗавершение", ЭтотОбъект, Новый Структура("ИмяЭлемента, Задача", Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные.Ссылка)), ВыбранныйАдминистратор, "Выберите администратора:", Тип("СправочникСсылка.Сотрудники"));	
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ИЗадачиИсполнителяДатаНачала" Тогда
			ВыбраннаяДата = Элемент.ТекущиеДанные.ДатаНачала;
			ПоказатьВводДаты(Новый ОписаниеОповещения("ИЗадачиИсполнителяВыборЗавершение", ЭтотОбъект, Новый Структура("ИмяЭлемента, Задача", Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные.Ссылка)), ВыбраннаяДата, "Выберите дату начала:", ЧастиДаты.Дата);	
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ИЗадачиИсполнителяДатаОкончания" Тогда
			ВыбраннаяДата = Элемент.ТекущиеДанные.ДатаОкончания;
			ПоказатьВводДаты(Новый ОписаниеОповещения("ИЗадачиИсполнителяВыборЗавершение", ЭтотОбъект, Новый Структура("ИмяЭлемента, Задача", Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные.Ссылка)), ВыбраннаяДата, "Выберите дату окончания:", ЧастиДаты.Дата);	
		ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ИЗадачиИсполнителяСтатусЗадачи" Тогда
			ВыбранныйАдминистратор = Элемент.ТекущиеДанные.СтатусЗадачи;
			ПоказатьВводЗначения(Новый ОписаниеОповещения("ИЗадачиИсполнителяВыборЗавершение", ЭтотОбъект, Новый Структура("ИмяЭлемента, Задача", Элемент.ТекущийЭлемент.Имя, Элемент.ТекущиеДанные.Ссылка)), ВыбранныйАдминистратор, "Выберите статус:", Тип("ПеречислениеСсылка.СтатусыЗадач"));	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИЗадачиИсполнителяВыборЗавершение(ВведеноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВведеноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗадачаОбъект = ДополнительныеПараметры.Задача.ПолучитьОбъект();
	Если ДополнительныеПараметры.ИмяЭлемента = "ИЗадачиИсполнителяСсылка" Тогда
		ЗадачаОбъект.Наименование = ВведеноеЗначение;
	ИначеЕсли ДополнительныеПараметры.ИмяЭлемента = "ИЗадачиИсполнителяАдминистратор" Тогда
		ЗадачаОбъект.Администратор = ВведеноеЗначение;
	ИначеЕсли ДополнительныеПараметры.ИмяЭлемента = "ИЗадачиИсполнителяДатаНачала" Тогда
		ЗадачаОбъект.ДатаНачала = ВведеноеЗначение;
	ИначеЕсли ДополнительныеПараметры.ИмяЭлемента = "ИЗадачиИсполнителяДатаОкончания" Тогда
		ЗадачаОбъект.ДатаОкончания = ВведеноеЗначение;
	ИначеЕсли ДополнительныеПараметры.ИмяЭлемента = "ИЗадачиИсполнителяСтатусЗадачи" Тогда
		ЗадачаОбъект.СтатусЗадачи = ВведеноеЗначение;
	КонецЕсли;
	ЗадачаОбъект.Записать();
	
	Элементы.ИЗадачиИсполнителя.Обновить();	

КонецПроцедуры

#КонецОбласти

#Область Страница_Распределение

&НаКлиенте
Процедура РаспределитьПоКоэффициентам(Команда)
	
	ОчиститьСообщения();
	Если Объект.Распределения.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить договоры распределения!");		
		Возврат;	
	КонецЕсли;
	
	КоэффициентыИтог = Объект.Распределения.Итог("Коэффициент");
	
	СуммаИтог				= Объект.СуммаНачисления;
	СуммаИтогПоДоговору 	= Объект.СуммаПоДоговору;
	СуммаИтогПлан			= Объект.СуммаПлан;
	СуммаИтогОплаты			= Объект.СуммаОплаты;
	СуммаИтогНачисленияУС	= Объект.СуммаНачисленийИзУС;
	
	Если КоэффициентыИтог = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо указать коэффициенты распределения!");		
		Возврат;	
	КонецЕсли;
	Если КоэффициентыИтог > 100 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сумма коэффициентов превышает 100!");		
		Возврат;	
	КонецЕсли;
	
	Для Каждого Стр Из Объект.Распределения Цикл
		Если Стр.Коэффициент = 0 Тогда
			Стр.Сумма = 0;
			Стр.СуммаДоговора = 0;
			Стр.СуммаПлан = 0;
			Стр.СуммаОплаты = 0;
			Стр.СуммаНачисленияИзУС = 0;
		Иначе
			Стр.Сумма					= Окр(Стр.Коэффициент / 100* СуммаИтог,2);
			Стр.СуммаДоговора			= Окр(Стр.Коэффициент / 100* СуммаИтогПоДоговору,2);
			Стр.СуммаПлан				= Окр(Стр.Коэффициент / 100* СуммаИтогПлан,2);
			Стр.СуммаОплаты				= Окр(Стр.Коэффициент / 100* СуммаИтогОплаты,2);
			Стр.СуммаНачисленияИзУС		= Окр(Стр.Коэффициент / 100* СуммаИтогНачисленияУС,2);
		КонецЕсли;
	КонецЦикла;
	
	Если Стр <> Неопределено Тогда
		Стр.Сумма					= Стр.Сумма + (СуммаИтог - Объект.Распределения.Итог("Сумма")); 
		Стр.СуммаДоговора			= Стр.СуммаДоговора + (СуммаИтогПоДоговору - Объект.Распределения.Итог("СуммаДоговора")); 
		Стр.СуммаПлан				= Стр.СуммаПлан + (СуммаИтогПлан - Объект.Распределения.Итог("СуммаПлан")); 
		Стр.СуммаОплаты				= Стр.СуммаОплаты + (СуммаИтогОплаты - Объект.Распределения.Итог("СуммаОплаты")); 
		Стр.СуммаНачисленияИзУС		= Стр.СуммаНачисленияИзУС + (СуммаИтогНачисленияУС - Объект.Распределения.Итог("СуммаНачисленияИзУС"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоСуммам(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.Распределения.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить договоры распределения!");		
		Возврат;	
	КонецЕсли;
	
	КоэффициентыИтог = 100;
	СуммаИтог = Объект.Распределения.Итог("Сумма");
	
	Если СуммаИтог = 0 тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо указать суммы распределения!");		
		Возврат;	
	КонецЕсли;
	
	Если СуммаИтог > Объект.СуммаНачисления Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Сумма начисления меньше, чем сумма распределения!");		
		Возврат;	
	КонецЕсли;
	
	КоэффициентыИтог = 100 - окр((Объект.СуммаНачисления - СуммаИтог)/Объект.СуммаНачисления*100, 3);
	
	Для Каждого Стр Из Объект.Распределения Цикл
		Стр.Коэффициент = Окр(Стр.Сумма/СуммаИтог * КоэффициентыИтог, 3);
	КонецЦикла;
	
	Если Стр <> Неопределено Тогда
		Стр.Коэффициент = Стр.Коэффициент + (100 - Объект.Распределения.Итог("Коэффициент"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоговоры(Команда)
	ОчиститьСообщения();
	ОткрытьФорму("Справочник.Договоры.Форма.ФормаОтбораРаспределения", , ЭтаФорма,
				,,,Новый ОписаниеОповещения("ЗаполнитьДоговорыЗавершение", ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоговорыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	ЗагрузитьДоговорыПоАдресу(Результат);
	Модифицированность = Истина;
	ЗаполнитьСуммыВРаспределении();
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоСуммамДоговоров(Команда)
	
	СуммаРаспределения				= Объект.СуммаНачисления;
	СуммаРаспределенияПоДоговору	= Объект.СуммаПоДоговору;
	СуммаИтог						= Объект.Распределения.Итог("СуммаРаспределения");
	СуммаИтогПлан					= Объект.СуммаПлан;
	СуммаИтогОплаты					= Объект.СуммаОплаты;
	СуммаИтогНачисленияУС			= Объект.СуммаНачисленийИзУС;
	КоэффициентыИтог = 100;
	
	Если СуммаИтог = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Суммы договоров в строках таблицы не заполнены.");
		Возврат;
	КонецЕсли;
	//исключаем все строки, которые введены вручную
	Для Каждого Стр Из Объект.Распределения Цикл
		Если Стр.ВведеноВручную Тогда
			КоэффициентыИтог				= КоэффициентыИтог - Стр.Коэффициент;
			СуммаРаспределения				= СуммаРаспределения - Стр.Сумма;
			СуммаРаспределенияПоДоговору	= СуммаРаспределенияПоДоговору - Стр.СуммаДоговора;
			СуммаИтог						= СуммаИтог - Стр.СуммаРаспределения;
			СуммаИтогПлан					= СуммаИтогПлан - Стр.СуммаПлан;
			СуммаИтогОплаты					= СуммаИтогОплаты - Стр.СуммаОплаты;
			СуммаИтогНачисленияУС			= СуммаИтогНачисленияУС - Стр.СуммаНачисленияИзУС;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаРаспределения ИЗ Объект.Распределения Цикл
		Если СтрокаРаспределения.ВведеноВручную Тогда
			Продолжить;
		КонецЕсли;
		СтрокаРаспределения.Коэффициент = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог * КоэффициентыИтог, 3);
		СтрокаРаспределения.Сумма = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог* СуммаРаспределения, 2);
		СтрокаРаспределения.СуммаДоговора = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог* СуммаРаспределенияПоДоговору, 2);
		СтрокаРаспределения.СуммаПлан = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог* СуммаИтогПлан, 2);
		СтрокаРаспределения.СуммаОплаты  = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог* СуммаИтогОплаты, 2);
		СтрокаРаспределения.СуммаНачисленияИзУС  = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог* СуммаИтогНачисленияУС, 2);
	КонецЦикла;
	
	Если СуммаИтог <> 0  И СтрокаРаспределения <> Неопределено Тогда
		СтрокаРаспределения.Сумма = СтрокаРаспределения.Сумма + (Объект.СуммаНачисления - Объект.Распределения.Итог("Сумма"));
		СтрокаРаспределения.СуммаДоговора = СтрокаРаспределения.СуммаДоговора + (Объект.СуммаПоДоговору - Объект.Распределения.Итог("СуммаДоговора"));
		СтрокаРаспределения.СуммаПлан = СтрокаРаспределения.СуммаПлан + (Объект.СуммаПлан - Объект.Распределения.Итог("СуммаПлан"));
		СтрокаРаспределения.СуммаОплаты = СтрокаРаспределения.СуммаОплаты + (Объект.СуммаОплаты - Объект.Распределения.Итог("СуммаОплаты"));
		СтрокаРаспределения.СуммаНачисленияИзУС = СтрокаРаспределения.СуммаНачисленияИзУС + (Объект.СуммаНачисленийИзУС - Объект.Распределения.Итог("СуммаНачисленияИзУС"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределитьПоСуммамДоговоровНаСервере()
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммыПоРодителюНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Договоры.СуммаПлан КАК СуммаПлан,
		|	Договоры.СуммаПоДоговору КАК СуммаПоДоговору,
		|	Договоры.СуммаПоДоговоруБезУчетаНДС КАК СуммаПоДоговоруБезУчетаНДС,
		|	Договоры.Оплаты.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Период КАК Период,
		|		СтатьяЗатрат КАК СтатьяЗатрат,
		|		СуммаНачисления КАК СуммаНачисления,
		|		СуммаОплаты КАК СуммаОплаты
		|	) КАК Оплаты,
		|	Договоры.СуммаНачисления КАК СуммаНачисления,
		|	Договоры.СуммаДоговора КАК СуммаДоговора
		|ИЗ
		|	Справочник.Договоры КАК Договоры
		|ГДЕ
		|	Договоры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ДоговорОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//Объект.СуммаПлан = Объект.СуммаПлан + ВыборкаДетальныеЗаписи.СуммаПлан;	
		Объект.СуммаНачисления = Объект.СуммаНачисления + ВыборкаДетальныеЗаписи.СуммаНачисления;	
		Объект.СуммаДоговора = Объект.СуммаДоговора + ВыборкаДетальныеЗаписи.СуммаДоговора;	
		//Объект.СуммаПоДоговору = Объект.СуммаПоДоговору + ВыборкаДетальныеЗаписи.СуммаПоДоговору;	
		//Объект.СуммаПоДоговоруБезУчетаНДС = ВыборкаДетальныеЗаписи.СуммаПоДоговоруБезУчетаНДС;	
		ВыборкаОплаты = ВыборкаДетальныеЗаписи.Оплаты.Выбрать();
		Пока ВыборкаОплаты.Следующий() Цикл
			НоваяСтрока = Объект.Оплаты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаОплаты);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммыПоРодителю(Команда)
	//добавляет к текущим суммам суммы родителя 
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСуммыПоРодителюПродолжение", ЭтаФорма), 
					"Суммы из договора-родителя будут добавлены к текущим суммам. Продолжить?",
					РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммыПоРодителюПродолжение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьСуммыПоРодителюНаСервере();
	КонецЕсли;		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаспределенияПоРодителюНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Договоры.СуммаРаспределенная КАК СуммаРаспределенная,
		|	Договоры.Распределения.(
		|		Ссылка КАК Ссылка,
		|		НомерСтроки КАК НомерСтроки,
		|		Договор КАК Договор,
		|		Коэффициент КАК Коэффициент,
		|		Сумма КАК Сумма,
		|		СуммаРаспределения КАК СуммаРаспределения,
		|		ВведеноВручную КАК ВведеноВручную
		|	) КАК Распределения
		|ИЗ
		|	Справочник.Договоры КАК Договоры
		|ГДЕ
		|	Договоры.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ДоговорОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Объект.Распределения.Очистить();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект.СуммаРаспределенная = ВыборкаДетальныеЗаписи.СуммаРаспределенная;	
		ВыборкаРаспределение = ВыборкаДетальныеЗаписи.Распределения.Выбрать();
		Пока ВыборкаРаспределение.Следующий() Цикл
			НоваяСтрока = Объект.Распределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаРаспределение);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаспределенияПоРодителю(Команда)
	//добавляет к текущим суммам суммы родителя 
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРаспределенияПоРодителюПродолжение", ЭтаФорма), 
					"Таблица распределения будет заполнена распределениями из договора-родителя. Продолжить?",
					РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаспределенияПоРодителюПродолжение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьРаспределенияПоРодителюНаСервере();
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ДоговорОснованиеПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура РаспределенияДоговорПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Распределения.ТекущиеДанные;
	ТекущиеДанные.СуммаРаспределения = ПолучитьРеквизитДоговора(ТекущиеДанные.Договор, "СуммаПоДоговору");
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПоСуммамДоговоровСРучными(Команда)
	
	СуммаРаспределения = Объект.СуммаНачисления;
	СуммаРаспределенияПоДоговору = Объект.СуммаПоДоговору;
	СуммаИтог = Объект.Распределения.Итог("СуммаРаспределения");
	СуммаПлан = Объект.СуммаПлан;
	СуммаОплаты  = Объект.СуммаОплаты;
	СуммаНачисленийИзУС  = Объект.СуммаНачисленийИзУС;
	КоэффициентыИтог = 100;
	
	Если СуммаИтог = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Суммы договоров в строках таблицы не заполнены.");
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРаспределения ИЗ Объект.Распределения Цикл
		СтрокаРаспределения.Коэффициент = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог * КоэффициентыИтог, 3);
		СтрокаРаспределения.Сумма = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог* СуммаРаспределения, 2);
		СтрокаРаспределения.СуммаДоговора = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог* СуммаРаспределенияПоДоговору, 2);
		СтрокаРаспределения.СуммаПлан = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог* СуммаПлан, 2);
		СтрокаРаспределения.СуммаОплаты = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог* СуммаОплаты, 2);
		СтрокаРаспределения.СуммаНачисленияИзУС = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог* СуммаНачисленийИзУС, 2);
	КонецЦикла;
	
	Если СуммаИтог <> 0  И СтрокаРаспределения <> Неопределено Тогда
		СтрокаРаспределения.Сумма = СтрокаРаспределения.Сумма + (Объект.СуммаНачисления - Объект.Распределения.Итог("Сумма"));
		СтрокаРаспределения.СуммаДоговора = СтрокаРаспределения.СуммаДоговора + (Объект.СуммаПоДоговору - Объект.Распределения.Итог("СуммаДоговора"));
		СтрокаРаспределения.СуммаПлан = СтрокаРаспределения.СуммаПлан + (Объект.СуммаПлан - Объект.Распределения.Итог("СуммаПлан"));
		СтрокаРаспределения.СуммаОплаты = СтрокаРаспределения.СуммаОплаты + (Объект.СуммаОплаты - Объект.Распределения.Итог("СуммаОплаты"));
		СтрокаРаспределения.СуммаНачисленияИзУС = СтрокаРаспределения.СуммаНачисленияИзУС + (Объект.СуммаНачисленийИзУС - Объект.Распределения.Итог("СуммаНачисленияИзУС"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьРаспределениеИзДоговоров(Команда)
	ВыделенныеСтроки = Элементы.РаспределенияДоговоров.ВыделенныеСтроки;
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Строки не выделены!");
		Возврат;
	КонецЕсли;
	Для Каждого Стр Из ВыделенныеСтроки Цикл
		СтрокаДоговор = Элементы.РаспределенияДоговоров.ДанныеСтроки(Стр).Ссылка;
		УдалитьРаспределениеИзДоговоровНаСервере(СтрокаДоговор);
	КонецЦикла;
	Элементы.РаспределенияДоговоров.Обновить();
КонецПроцедуры

&НаСервере
Процедура УдалитьРаспределениеИзДоговоровНаСервере(СтрокаДоговор)
	
	ДоговорОб = СтрокаДоговор.ПолучитьОбъект();
	//удаляем строки из таблицы
	СтрокиТекущегоДоговора = ДоговорОб.Распределения.НайтиСтроки(Новый Структура("Договор",Объект.Ссылка));
	Для Каждого Стр ИЗ СтрокиТекущегоДоговора Цикл
		ДоговорОб.Распределения.Удалить(Стр);			
	КонецЦикла;
	
	//делаем перераспределение с учетов удаленных строк по коэффициентам без учета введенных вручную
	СуммаРаспределения = ДоговорОб.СуммаНачисления;
	СуммаИтог = ДоговорОб.Распределения.Итог("СуммаРаспределения");
	КоэффициентыИтог = 100;
	Для Каждого Стр Из ДоговорОб.Распределения Цикл
		Если Стр.ВведеноВручную Тогда
			КоэффициентыИтог = КоэффициентыИтог - Стр.Коэффициент;
			СуммаРаспределения = СуммаРаспределения - Стр.Сумма;
			СуммаИтог = СуммаИтог - Стр.СуммаРаспределения;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаРаспределения ИЗ ДоговорОб.Распределения Цикл
		Если СтрокаРаспределения.ВведеноВручную Тогда
			Продолжить;
		КонецЕсли;
		Если СуммаИтог <> 0 Тогда   
			СтрокаРаспределения.Коэффициент = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог * КоэффициентыИтог, 3);
			СтрокаРаспределения.Сумма = Окр(СтрокаРаспределения.СуммаРаспределения / СуммаИтог* СуммаРаспределения, 2);
		КонецЕсли;
	КонецЦикла;
	Если СуммаИтог <> 0  И СтрокаРаспределения <> Неопределено Тогда
		СтрокаРаспределения.Сумма = СтрокаРаспределения.Сумма + (ДоговорОб.СуммаНачисления - ДоговорОб.Распределения.Итог("Сумма"));
	КонецЕсли;
	
	//пересчитываем сумму распределения
	ДоговорОб.СуммаРаспределенная = ДоговорОб.Распределения.Итог("Сумма");
	ДоговорОб.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределенияДоговоровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, Элементы.РаспределенияДоговоров.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРаспределенияИзДругогоДоговора(Команда)
	ДоговорДляКопирования = ПредопределенноеЗначение("Справочник.Договоры.ПустаяСсылка");
	ПоказатьВводЗначения(Новый ОписаниеОповещения("СкопироватьРаспределенияИзДругогоДоговораЗавершение", ЭтотОбъект, Новый Структура("ДоговорДляКопирования", ДоговорДляКопирования)), ДоговорДляКопирования, "Выберите договор, из которого будут скопированы распределения", Тип("СправочникСсылка.Договоры"));
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьРаспределенияИзДругогоДоговораЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ДоговорДляКопирования = ?(Значение = Неопределено, ДополнительныеПараметры.ДоговорДляКопирования, Значение);
	
	Если ЗначениеЗаполнено(ДоговорДляКопирования) Тогда 
		СкопироватьРаспределенияИзДругогоДоговораЗавершениеНаСервере(ДоговорДляКопирования)
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура СкопироватьРаспределенияИзДругогоДоговораЗавершениеНаСервере(ДоговорДляКопирования) 
	
	Если ЗначениеЗаполнено(ДоговорДляКопирования) Тогда 
		Объект.Распределения.Очистить();
		Объект.Распределения.Загрузить(ДоговорДляКопирования.Распределения.Выгрузить());
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуРаспределенияПланНаСервере()
	Для Каждого Стр Из Объект.Распределения Цикл 
		Если Не Стр.ВведеноВручную Тогда 
			Стр.СуммаРаспределения = ПолучитьРеквизитДоговора(Стр.Договор, "СуммаПлан");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммуРаспределенияПлан(Команда)
	ЗаполнитьСуммуРаспределенияПланНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуРаспределенияПоДоговоруНаСервере()
	Для Каждого Стр Из Объект.Распределения Цикл 
		Если Не Стр.ВведеноВручную Тогда 
			Стр.СуммаРаспределения = ПолучитьРеквизитДоговора(Стр.Договор, "СуммаПоДоговору");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСуммуРаспределенияПоДоговору(Команда)
	ЗаполнитьСуммуРаспределенияПоДоговоруНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаспределенияКоэффициентПоСуммеПлан(Команда)
	
	ЗаполнитьРаспределенияКоэффициентНаСервере("СуммаПлан");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаспределенияКоэффициентПоСуммеРаспределения(Команда)
	
	ЗаполнитьРаспределенияКоэффициентНаСервере("СуммаРаспределения");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаспределенияКоэффициентНаСервере(НазваниеКолонки)
	
	ТаблицаРаспределений = Объект.Распределения.Выгрузить();
	
	МассивКоэффициентов = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(100, ТаблицаРаспределений.ВыгрузитьКолонку(НазваниеКолонки));
	
	ТаблицаРаспределений.ЗагрузитьКолонку(МассивКоэффициентов, "Коэффициент");
	
	Объект.Распределения.Загрузить(ТаблицаРаспределений);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределенияУпорядочивание(Команда)
	РаспределенияУпорядочиваниеНаСервере();
КонецПроцедуры

&НаСервере
Процедура РаспределенияУпорядочиваниеНаСервере()
	
	ТабЧасть = Объект.Распределения.Выгрузить(); 
	ТабЧасть.Колонки.Добавить("Проект"); 
	
	Для каждого Стр из ТабЧасть цикл
		Стр.Проект = Стр.Договор.Проект; 
	КонецЦикла;
	
	ТабЧасть.Сортировать("Проект"); 
	Объект.Распределения.Загрузить(ТабЧасть); 
	
КонецПроцедуры

#КонецОбласти

#Область Страница_ПланПоРесурсам

&НаКлиенте
Процедура ЗаполнитьВсеСтатьиЗатрат(Команда)
	ВыбраннаяСтатьяЗатрат = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ПустаяСсылка");
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ЗаполнитьВсеСтатьиЗатратЗавершение", ЭтотОбъект, Новый Структура("ВыбраннаяСтатьяЗатрат", ВыбраннаяСтатьяЗатрат)), ВыбраннаяСтатьяЗатрат,"Выберите статью затрат",Тип("СправочникСсылка.СтатьиЗатрат"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеСтатьиЗатратЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ВыбраннаяСтатьяЗатрат = ?(Значение = Неопределено, ДополнительныеПараметры.ВыбраннаяСтатьяЗатрат, Значение);
	
	Если Значение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницыПланПоРесурсам.ТекущаяСтраница = Элементы.ГруппаПерсонал Тогда 
		ОбрабатываемаяТаблица = Объект.Персонал;
	ИначеЕсли Элементы.ГруппаСтраницыПланПоРесурсам.ТекущаяСтраница = Элементы.ГруппаДеньги Тогда
		ОбрабатываемаяТаблица = Объект.Деньги;
	ИначеЕсли Элементы.ГруппаСтраницыПланПоРесурсам.ТекущаяСтраница = Элементы.ГруппаИнструменты Тогда
		ОбрабатываемаяТаблица = Объект.Инструменты;
	ИначеЕсли Элементы.ГруппаСтраницыПланПоРесурсам.ТекущаяСтраница = Элементы.ГруппаМатериалы Тогда
		ОбрабатываемаяТаблица = Объект.Материалы;
	Иначе
		Возврат
	КонецЕсли;
	
	Для Каждого Стр Из ОбрабатываемаяТаблица Цикл
		Стр.СтатьяЗатрат = ВыбраннаяСтатьяЗатрат;	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыбранныеСтатьиЗатрат(Команда)
	ВыбраннаяСтатьяЗатрат = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ПустаяСсылка");
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ЗаполнитьВыбранныеСтатьиЗатратЗавершение", ЭтотОбъект, Новый Структура("ВыбраннаяСтатьяЗатрат", ВыбраннаяСтатьяЗатрат)), ВыбраннаяСтатьяЗатрат,"Выберите статью затрат",Тип("СправочникСсылка.СтатьиЗатрат"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыбранныеСтатьиЗатратЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ВыбраннаяСтатьяЗатрат = ?(Значение = Неопределено, ДополнительныеПараметры.ВыбраннаяСтатьяЗатрат, Значение);
	
	Если Значение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницыПланПоРесурсам.ТекущаяСтраница = Элементы.ГруппаПерсонал Тогда 
		ОбрабатываемаяТаблица = Объект.Персонал;
		МассивИдентификаторов = Элементы.Персонал.ВыделенныеСтроки;
	ИначеЕсли Элементы.ГруппаСтраницыПланПоРесурсам.ТекущаяСтраница = Элементы.ГруппаДеньги Тогда
		ОбрабатываемаяТаблица = Объект.Деньги;
		МассивИдентификаторов = Элементы.Деньги.ВыделенныеСтроки;
	ИначеЕсли Элементы.ГруппаСтраницыПланПоРесурсам.ТекущаяСтраница = Элементы.ГруппаИнструменты Тогда
		ОбрабатываемаяТаблица = Объект.Инструменты;
		МассивИдентификаторов = Элементы.Инструменты.ВыделенныеСтроки;
	ИначеЕсли Элементы.ГруппаСтраницыПланПоРесурсам.ТекущаяСтраница = Элементы.ГруппаМатериалы Тогда
		ОбрабатываемаяТаблица = Объект.Материалы;
		МассивИдентификаторов = Элементы.Материалы.ВыделенныеСтроки;
	Иначе
		Возврат
	КонецЕсли;
	
	Для Каждого ЭлементМассиваВыделенных Из МассивИдентификаторов Цикл
		Стр = ОбрабатываемаяТаблица.НайтиПоИдентификатору(ЭлементМассиваВыделенных);
		Если Стр <> Неопределено Тогда 
			Стр.СтатьяЗатрат = ВыбраннаяСтатьяЗатрат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПустыеСтатьиЗатрат(Команда)
	ВыбраннаяСтатьяЗатрат = ПредопределенноеЗначение("Справочник.СтатьиЗатрат.ПустаяСсылка");
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ЗаполнитьПустыеСтатьиЗатратЗавершение", ЭтотОбъект, Новый Структура("ВыбраннаяСтатьяЗатрат", ВыбраннаяСтатьяЗатрат)), ВыбраннаяСтатьяЗатрат,"Выберите статью затрат",Тип("СправочникСсылка.СтатьиЗатрат"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПустыеСтатьиЗатратЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ВыбраннаяСтатьяЗатрат = ?(Значение = Неопределено, ДополнительныеПараметры.ВыбраннаяСтатьяЗатрат, Значение);
	
	Если Значение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ГруппаСтраницыПланПоРесурсам.ТекущаяСтраница = Элементы.ГруппаПерсонал Тогда 
		ОбрабатываемаяТаблица = Объект.Персонал;
	ИначеЕсли Элементы.ГруппаСтраницыПланПоРесурсам.ТекущаяСтраница = Элементы.ГруппаДеньги Тогда
		ОбрабатываемаяТаблица = Объект.Деньги;
	ИначеЕсли Элементы.ГруппаСтраницыПланПоРесурсам.ТекущаяСтраница = Элементы.ГруппаИнструменты Тогда
		ОбрабатываемаяТаблица = Объект.Инструменты;
	ИначеЕсли Элементы.ГруппаСтраницыПланПоРесурсам.ТекущаяСтраница = Элементы.ГруппаМатериалы Тогда
		ОбрабатываемаяТаблица = Объект.Материалы;
	Иначе
		Возврат
	КонецЕсли;
	
	Для Каждого Стр Из ОбрабатываемаяТаблица Цикл
		Если Не ЗначениеЗаполнено(Стр.СтатьяЗатрат) Тогда 
			Стр.СтатьяЗатрат = ВыбраннаяСтатьяЗатрат;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#Область ТЧ_Персонал

&НаКлиенте
Процедура ПерсоналДинамическаяПриИзменении(Элемент)
	
	//Если СтрНайти(Элементы.ПерсоналДинамическая.ТекущийЭлемент.Имя, "Месяц") <> 0 Тогда
	//	
	//	ТекДолжность = Элементы.ПерсоналДинамическая.ТекущиеДанные.Должность;
	//	
	//	ТекМесяц = СтрЗаменить(Элементы.ПерсоналДинамическая.ТекущийЭлемент.Имя,"ПерсоналДинамическая","");
	//	
	//	ТекКоличество = Элементы.ПерсоналДинамическая.ТекущиеДанные[ТекМесяц];
	//	
	//	Для Каждого Стр Из ПерсоналДинамическая Цикл
	//		Если Стр.Должность = ТекДолжность Тогда 
	//			Стр[ТекМесяц] = ТекКоличество;
	//		КонецЕсли;		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	//ЗаполнитьДоступныеЧасыПерсонала();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерсоналДолжностьПриИзменении(Элемент)
	Стр			= Элементы.Персонал.ТекущиеДанные;
	Стр.Цена	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Должность, ТекущаяДата()); 
	ОбработатьСтрокуПерсонал();
КонецПроцедуры

&НаКлиенте
Процедура ПерсоналКоличествоСтавокПриИзменении(Элемент)
	ОбработатьСтрокуПерсонал();
КонецПроцедуры

&НаКлиенте
Процедура ПерсоналКоличествоЧасовПриИзменении(Элемент)
	ОбработатьСтрокуПерсонал();
КонецПроцедуры

&НаКлиенте
Процедура ПерсоналКоличествоЧасовВМесяцПриИзменении(Элемент)
	
	ИспользованоЧасов = УжеИспользованоЧасов(Элементы.Персонал.ТекущиеДанные.Должность, Объект.Ссылка, Объект.ДатаНачала, Объект.ДатаОкончания);
	
	Если ИспользованоЧасов >= 8 Тогда 
		Элементы.Персонал.ТекущиеДанные.КоличествоЧасовВДень = 0;
		Сообщить("За выбранный период по этой должности уже использовано 8 часов!");
	ИначеЕсли ИспользованоЧасов + Элементы.Персонал.ТекущиеДанные.КоличествоЧасовВДень > 8 Тогда
		Элементы.Персонал.ТекущиеДанные.КоличествоЧасовВДень = 8 - ИспользованоЧасов;
		Сообщить("За выбранный период по этой должности уже использовано "+Формат(ИспользованоЧасов,"ЧГ=")+" часов. Возможно использовать только "+Формат(Элементы.Персонал.ТекущиеДанные.КоличествоЧасовВДень,"ЧГ=")+" часов!");
	КонецЕсли;
	ОбработатьСтрокуПерсонал();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерсоналЦенаПриИзменении(Элемент)
	ОбработатьСтрокуПерсонал();
КонецПроцедуры

&НаКлиенте
Процедура ПерсоналСуммаПриИзменении(Элемент)
	ОбработатьСтрокуПерсонал();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуПерсонал()
	
	Если УжеИспользованоЧасов(Элементы.Персонал.ТекущиеДанные.Должность, Объект.Ссылка, Объект.ДатаНачала, Объект.ДатаОкончания) = 0 Тогда 
		Коэффициент = 1;
	Иначе
		Коэффициент = Элементы.Персонал.ТекущиеДанные.КоличествоЧасовВДень/8;
	КонецЕсли;
	
	Стр = Элементы.Персонал.ТекущиеДанные;
	Стр.Сумма = Стр.Цена * Стр.КоличествоСтавок * Стр.КоличествоМесяцев * Коэффициент;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицуКолонкиНаСервере()
	
	ОтображатьЦеныПрошлыхПериодов = Константы.ОтображатьЦеныПрошлыхПериодов.Получить();
	
	//Если ОтображатьЦеныПрошлыхПериодов Тогда 
	//	Элементы.ПерсоналДинамическаяЦенаПрошлогоПериода.Видимость				= Истина;	
	//	Элементы.ПерсоналДинамическаяСуммаПрошлогоПериода.Видимость				= Истина;	
	//	Элементы.ПерсоналДинамическаяЦенаПрошлогоПериодаСоСтатьей103.Видимость	= Истина;	
	//	Элементы.ПерсоналДинамическаяСуммаПрошлогоПериодаСоСтатьей103.Видимость	= Истина;	
	//	Элементы.ПерсоналДинамическаяЦенаПрошлогоПериодаСоцПакет.Видимость		= Истина;	
	//	Элементы.ПерсоналДинамическаяСуммаПрошлогоПериодаСоцПакет.Видимость		= Истина;
	//Иначе
	//	Элементы.ПерсоналДинамическаяЦенаПрошлогоПериода.Видимость				= Ложь;	
	//	Элементы.ПерсоналДинамическаяСуммаПрошлогоПериода.Видимость				= Ложь;	
	//	Элементы.ПерсоналДинамическаяЦенаПрошлогоПериодаСоСтатьей103.Видимость	= Ложь;	
	//	Элементы.ПерсоналДинамическаяСуммаПрошлогоПериодаСоСтатьей103.Видимость	= Ложь;	
	//	Элементы.ПерсоналДинамическаяЦенаПрошлогоПериодаСоцПакет.Видимость		= Ложь;	
	//	Элементы.ПерсоналДинамическаяСуммаПрошлогоПериодаСоцПакет.Видимость		= Ложь;		
	//КонецЕсли;
	
	ПерсоналДинамическаяЗначение = РеквизитФормыВЗначение("ПерсоналДинамическая");
    
    МассивРеквизитов = Новый Массив;
    
	Для Каждого Колонка Из ПерсоналДинамическаяЗначение.Колонки Цикл
		Если СтрНайти(Колонка.Имя,"Месяц") <> 0  Тогда 
        	МассивРеквизитов.Добавить("ПерсоналДинамическая." + Колонка.Имя);        
		КонецЕсли;
    КонецЦикла;
    ИзменитьРеквизиты(,МассивРеквизитов);
	
	Для Каждого СтрСоотвествие Из СоответствиеПериодовНазванийКолонок Цикл
		ПерсоналДинамическаяЗначение.Колонки.Удалить(СтрСоотвествие.ИмяКолонки);	
		ПерсоналДинамическаяЗначение.Колонки.Удалить(СтрСоотвествие.ИмяКолонкиИспользовано);
		ПерсоналДинамическаяЗначение.Колонки.Удалить(СтрСоотвествие.ИмяКолонкиСумма);
		ПерсоналДинамическаяЗначение.Колонки.Удалить(СтрСоотвествие.ИмяКолонкиСуммаПрошлыйПериод);
		ПерсоналДинамическаяЗначение.Колонки.Удалить(СтрСоотвествие.ИмяКолонкиСуммаПрошлыйПериод103);
		ПерсоналДинамическаяЗначение.Колонки.Удалить(СтрСоотвествие.ИмяКолонкиСуммаПрошлыйПериодСоцПакет);

		Элементы.Удалить(Элементы.Найти("ПерсоналДинамическая"+СтрСоотвествие.ИмяКолонки));
		Элементы.Удалить(Элементы.Найти("ПерсоналДинамическая"+СтрСоотвествие.ИмяКолонкиИспользовано));
		Элементы.Удалить(Элементы.Найти("ПерсоналДинамическая"+СтрСоотвествие.ИмяКолонкиСумма));
		Элементы.Удалить(Элементы.Найти("ПерсоналДинамическая"+СтрСоотвествие.ИмяКолонкиСуммаПрошлыйПериод));
		Элементы.Удалить(Элементы.Найти("ПерсоналДинамическая"+СтрСоотвествие.ИмяКолонкиСуммаПрошлыйПериод103));
		Элементы.Удалить(Элементы.Найти("ПерсоналДинамическая"+СтрСоотвествие.ИмяКолонкиСуммаПрошлыйПериодСоцПакет));
	КонецЦикла;
	
	СоответствиеПериодовНазванийКолонок.Очистить();
	
	Месяц		= НачалоМесяца(Объект.ДатаНачала);
	НомерМесяца	= 1;
	
	Пока Месяц <= Объект.ДатаОкончания Цикл
		
		ИмяКолонки	= "Месяц" + Формат(НомерМесяца,"ЧГ=");
		ПерсоналДинамическаяЗначение.Колонки.Добавить(ИмяКолонки,,Формат(Месяц,"ДФ='MMMM yyyy'"));
		НоваяКолонка = Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов("Число"), "ТЗ");
		
		ИмяКолонкиИспользовано	= "МесяцИспользовано" + Формат(НомерМесяца,"ЧГ=");
		ПерсоналДинамическаяЗначение.Колонки.Добавить(ИмяКолонкиИспользовано,,"Использовано " + Формат(Месяц,"ДФ='MMMM yyyy'"));
		НоваяКолонка = Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов("Строка"), "ТЗ");
		
		ИмяКолонкиСумма	= "МесяцСумма" + Формат(НомерМесяца,"ЧГ=");
		ПерсоналДинамическаяЗначение.Колонки.Добавить(ИмяКолонкиСумма,,"Сумма " + Формат(Месяц,"ДФ='MMMM yyyy'"));
		НоваяКолонка = Новый РеквизитФормы(ИмяКолонки, Новый ОписаниеТипов("Число"), "ТЗ");
		
		ИмяКолонкиСуммаПрошлыйПериод	= "МесяцСуммаПрошлыйПериод" + Формат(НомерМесяца,"ЧГ=");
		ПерсоналДинамическаяЗначение.Колонки.Добавить(ИмяКолонкиСуммаПрошлыйПериод,,"Сумма " + Формат(Месяц,"ДФ='MMMM yyyy'"));
		НоваяКолонка = Новый РеквизитФормы(ИмяКолонкиСуммаПрошлыйПериод, Новый ОписаниеТипов("Число"), "ТЗ");
		
		ИмяКолонкиСуммаПрошлыйПериод103	= "МесяцСуммаПрошлыйПериод103" + Формат(НомерМесяца,"ЧГ=");
		ПерсоналДинамическаяЗначение.Колонки.Добавить(ИмяКолонкиСуммаПрошлыйПериод103,,"Сумма " + Формат(Месяц,"ДФ='MMMM yyyy'"));
		НоваяКолонка = Новый РеквизитФормы(ИмяКолонкиСуммаПрошлыйПериод103, Новый ОписаниеТипов("Число"), "ТЗ");
		
		ИмяКолонкиСуммаПрошлыйПериодСоцПакет	= "МесяцСуммаПрошлыйПериодСоцПакет" + Формат(НомерМесяца,"ЧГ=");
		ПерсоналДинамическаяЗначение.Колонки.Добавить(ИмяКолонкиСуммаПрошлыйПериодСоцПакет,,"Сумма " + Формат(Месяц,"ДФ='MMMM yyyy'"));
		НоваяКолонка = Новый РеквизитФормы(ИмяКолонкиСуммаПрошлыйПериодСоцПакет, Новый ОписаниеТипов("Число"), "ТЗ");

		
		Стр 					= СоответствиеПериодовНазванийКолонок.Добавить();
		Стр.ИмяКолонки 			= ИмяКолонки;
		Стр.ИмяКолонкиИспользовано 	= ИмяКолонкиИспользовано;
		Стр.ИмяКолонкиСумма 	= ИмяКолонкиСумма;
		Стр.ИмяКолонкиСуммаПрошлыйПериод 	= ИмяКолонкиСуммаПрошлыйПериод;
		Стр.ИмяКолонкиСуммаПрошлыйПериод103 	= ИмяКолонкиСуммаПрошлыйПериод103;
		Стр.ИмяКолонкиСуммаПрошлыйПериодСоцПакет 	= ИмяКолонкиСуммаПрошлыйПериодСоцПакет;
		Стр.Месяц 				= Месяц;
		
		Месяц		= НачалоМесяца(ДобавитьМесяц(Месяц,1));
		НомерМесяца	= НомерМесяца + 1;
		
	КонецЦикла;	
	
	МассивРеквизитов.Очистить();
	Для Каждого Колонка ИЗ ПерсоналДинамическаяЗначение.Колонки Цикл
		Если СтрНайти(Колонка.Имя,"Месяц") <> 0 Тогда
			Если СтрНайти(Колонка.Имя,"МесяцИспользовано") <> 0 Тогда
				НоваяКолонка = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Строка"), "ПерсоналДинамическая");
				МассивРеквизитов.Добавить(НоваяКолонка);
			ИначеЕсли СтрНайти(Колонка.Имя,"МесяцСумма") <> 0 Тогда
				НоваяКолонка = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)), "ПерсоналДинамическая");
				МассивРеквизитов.Добавить(НоваяКолонка);
			Иначе 
				НоваяКолонка = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)), "ПерсоналДинамическая");
				МассивРеквизитов.Добавить(НоваяКолонка);
			КонецЕсли;
		КонецЕсли;    		
	КонецЦикла;      
	ИзменитьРеквизиты(МассивРеквизитов);  
	ЗначениеВРеквизитФормы(ПерсоналДинамическаяЗначение, "ПерсоналДинамическая");
	
	//Элементы формы
	
	ЭлементПерсоналДинамическая = Элементы.ПерсоналДинамическая;
	
	Месяц		= НачалоМесяца(Объект.ДатаНачала);
	НомерМесяца	= 1;
	
	Пока Месяц <= Объект.ДатаОкончания Цикл
		
		НоваяГруппаФормы 				= Элементы.Добавить("ПерсоналДинамическаяГруппа"+НомерМесяца, Тип("ГруппаФормы"), ЭлементПерсоналДинамическая);
		НоваяГруппаФормы.Заголовок		= Формат(Месяц,"ДФ='MMMM yyyy'");
		НоваяГруппаФормы.ОтображатьВШапке	= Истина;
		НоваяГруппаФормы.Группировка	= ГруппировкаКолонок.Вертикальная;
		
		НовыйЭлементФормы 				= Элементы.Добавить("ПерсоналДинамическаяМесяц"+НомерМесяца, Тип("ПолеФормы"), НоваяГруппаФормы);
		НовыйЭлементФормы.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлементФормы.ПутьКДанным 	= "ПерсоналДинамическая.Месяц" + НомерМесяца;
		НовыйЭлементФормы.Заголовок		= "Кол-во часов";
		
		НовыйЭлементФормы 				= Элементы.Добавить("ПерсоналДинамическаяМесяцИспользовано"+НомерМесяца, Тип("ПолеФормы"), НоваяГруппаФормы);
		НовыйЭлементФормы.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлементФормы.ПутьКДанным 	= "ПерсоналДинамическая.МесяцИспользовано" + НомерМесяца;
		НовыйЭлементФормы.Заголовок		= "Использовано";
		НовыйЭлементФормы.ГоризонтальноеПоложение	= ГоризонтальноеПоложениеЭлемента.Право;
		НовыйЭлементФормы.ТолькоПросмотр			= Истина;
		
		НоваяГруппаФормыСуммы 				= Элементы.Добавить("ПерсоналДинамическаяГруппаСуммы"+НомерМесяца, Тип("ГруппаФормы"), НоваяГруппаФормы);
		НоваяГруппаФормыСуммы.Заголовок		= Формат(Месяц,"ДФ='MMMM yyyy'");
		НоваяГруппаФормыСуммы.ОтображатьВШапке	= Ложь;
		НоваяГруппаФормыСуммы.Группировка	= ГруппировкаКолонок.Горизонтальная;
		
		НовыйЭлементФормы 				= Элементы.Добавить("ПерсоналДинамическаяМесяцСумма"+НомерМесяца, Тип("ПолеФормы"), НоваяГруппаФормыСуммы);
		НовыйЭлементФормы.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлементФормы.Видимость 	= Ложь;
		НовыйЭлементФормы.ПутьКДанным 	= "ПерсоналДинамическая.МесяцСумма" + НомерМесяца;
		НовыйЭлементФормы.Заголовок		= "Сумма";
		НовыйЭлементФормы.ТолькоПросмотр			= Истина;
		
		НовыйЭлементФормы 				= Элементы.Добавить("ПерсоналДинамическаяМесяцСуммаПрошлыйПериод"+НомерМесяца, Тип("ПолеФормы"), НоваяГруппаФормыСуммы);
		НовыйЭлементФормы.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлементФормы.Видимость 	= Ложь;
		НовыйЭлементФормы.ПутьКДанным 	= "ПерсоналДинамическая.МесяцСуммаПрошлыйПериод" + НомерМесяца;
		НовыйЭлементФормы.Заголовок		= "Сумма прош. периода";
		НовыйЭлементФормы.ТолькоПросмотр			= Истина;
		
		НовыйЭлементФормы 				= Элементы.Добавить("ПерсоналДинамическаяМесяцСуммаПрошлыйПериод103"+НомерМесяца, Тип("ПолеФормы"), НоваяГруппаФормыСуммы);
		НовыйЭлементФормы.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлементФормы.Видимость 	= Ложь;
		НовыйЭлементФормы.ПутьКДанным 	= "ПерсоналДинамическая.МесяцСуммаПрошлыйПериод103" + НомерМесяца;
		НовыйЭлементФормы.Заголовок		= "Сумма прош. периода + ст. 103";
		НовыйЭлементФормы.ТолькоПросмотр			= Истина;
		
		НовыйЭлементФормы 				= Элементы.Добавить("ПерсоналДинамическаяМесяцСуммаПрошлыйПериодСоцПакет"+НомерМесяца, Тип("ПолеФормы"), НоваяГруппаФормыСуммы);
		НовыйЭлементФормы.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлементФормы.Видимость 	= Ложь;
		НовыйЭлементФормы.ПутьКДанным 	= "ПерсоналДинамическая.МесяцСуммаПрошлыйПериодСоцПакет" + НомерМесяца;
		НовыйЭлементФормы.Заголовок		= "Сумма прош. периода + соц. пакет";
		НовыйЭлементФормы.ТолькоПросмотр			= Истина;
		
		Месяц		= НачалоМесяца(ДобавитьМесяц(Месяц,1));
		НомерМесяца	= НомерМесяца + 1;
		
	КонецЦикла;
	
	Если Не РольДоступна("КЛАДО_ПросмотрЦенПерсонала") Тогда
		//Элементы.ПерсоналДинамическаяСумма.Видимость = Ложь;
		//Элементы.ПерсоналДинамическаяЦена.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьТаблицуНаФормеИзОбъекта()
	
	Для Каждого Стр Из Объект.Персонал Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Месяц", НачалоМесяца(Стр.ДатаПотребности));
		НайденныеСтроки = СоответствиеПериодовНазванийКолонок.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайдСтрока Из НайденныеСтроки Цикл
			НазваниеКолонки = НайдСтрока.ИмяКолонки;
		КонецЦикла;
		
		Если НайденныеСтроки.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;		
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Должность", Стр.Должность);
		ПараметрыОтбора.Вставить("СтатьяЗатрат", Стр.СтатьяЗатрат);
		НайденныеСтроки = ПерсоналДинамическая.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайдСтрока Из НайденныеСтроки Цикл
			НайдСтрока[НазваниеКолонки] = Стр.КоличествоЧасовВДень;	
		КонецЦикла;
		
		Если НайденныеСтроки.Количество() = 0 Тогда 
			СтрНовая					= ПерсоналДинамическая.Добавить();
			СтрНовая.Должность			= Стр.Должность;
			СтрНовая.СтатьяЗатрат		= Стр.СтатьяЗатрат;
			СтрНовая[НазваниеКолонки]	= Стр.КоличествоЧасовВДень;
			СтрНовая.Цена				= Стр.Цена;
			СтрНовая.ЦенаПрошлогоПериода				= Стр.ЦенаПрошлогоПериода;
			СтрНовая.ЦенаПрошлогоПериодаСоСтатьей103	= Стр.ЦенаПрошлогоПериодаСоСтатьей103;
			СтрНовая.ЦенаПрошлогоПериодаСоцПакет		= Стр.ЦенаПрошлогоПериодаСоцПакет;
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПерсоналВОбъекте()
	Объект.Персонал.Очистить();
	Для Каждого Колонка Из СоответствиеПериодовНазванийКолонок Цикл
		Для Каждого Стр Из ПерсоналДинамическая Цикл
			СтрОбъекта 						= Объект.Персонал.Добавить();
			СтрОбъекта.Должность 			= Стр.Должность;
			СтрОбъекта.СтатьяЗатрат			= Стр.СтатьяЗатрат;
			СтрОбъекта.КоличествоСтавок		= 1;
			СтрОбъекта.КоличествоМесяцев	= 1;
			СтрОбъекта.ДатаПотребности		= Колонка.Месяц;
			СтрОбъекта.КоличествоЧасовВДень	= Стр[Колонка.ИмяКолонки];
			СтрОбъекта.Цена					= Стр.Цена;
			СтрОбъекта.ЦенаПрошлогоПериода				= Стр.ЦенаПрошлогоПериода;
			СтрОбъекта.ЦенаПрошлогоПериодаСоСтатьей103	= Стр.ЦенаПрошлогоПериодаСоСтатьей103;
			СтрОбъекта.ЦенаПрошлогоПериодаСоцПакет		= Стр.ЦенаПрошлогоПериодаСоцПакет;
			СтрОбъекта.Сумма							= Стр[Колонка.ИмяКолонкиСумма];	
			СтрОбъекта.СуммаПрошлогоПериода				= Стр[Колонка.ИмяКолонкиСуммаПрошлыйПериод];
			СтрОбъекта.СуммаПрошлогоПериодаСоСтатьей103	= Стр[Колонка.ИмяКолонкиСуммаПрошлыйПериод103];
			СтрОбъекта.СуммаПрошлогоПериодаСоцПакет		= Стр[Колонка.ИмяКолонкиСуммаПрошлыйПериодСоцПакет];
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсе(Команда)
	КоличествоЧасов = 0;
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ЗаполнитьВсеЗавершение", ЭтотОбъект, Новый Структура("КоличествоЧасов", КоличествоЧасов)), КоличествоЧасов,"Введите количество часов:",10,2);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсеЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	Если Число = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	КоличествоЧасов = ?(Число = Неопределено, ДополнительныеПараметры.КоличествоЧасов, Число);
	
	Для Каждого Стр Из ПерсоналДинамическая Цикл
		Для Каждого СтрКолонки Из СоответствиеПериодовНазванийКолонок Цикл 
			Стр[СтрКолонки.ИмяКолонки] = КоличествоЧасов;
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьДоступныеЧасыПерсонала();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыделенныеСтроки(Команда)
	КоличествоЧасов = 0;
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ЗаполнитьВыделенныеСтрокиЗавершение", ЭтотОбъект, Новый Структура("КоличествоЧасов", КоличествоЧасов)), КоличествоЧасов,"Введите количество часов:",10,2);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыделенныеСтрокиЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	Если Число = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КоличествоЧасов = ?(Число = Неопределено, ДополнительныеПараметры.КоличествоЧасов, Число);
	
	МассивДолжностей = Новый Массив;
	
	Для Каждого НомерСтр Из Элементы.ПерсоналДинамическая.ВыделенныеСтроки Цикл
		МассивДолжностей.Добавить(ПерсоналДинамическая.НайтиПоИдентификатору(НомерСтр).Должность);
	КонецЦикла;

	Для Каждого Стр Из ПерсоналДинамическая Цикл
		Если МассивДолжностей.Найти(Стр.Должность) <> Неопределено Тогда 
			Для Каждого СтрКолонки Из СоответствиеПериодовНазванийКолонок Цикл 
				Стр[СтрКолонки.ИмяКолонки] = КоличествоЧасов;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДоступныеЧасыПерсонала();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыделенныеЯчейки(Команда)
	КоличествоЧасов = 0;
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ЗаполнитьВыделенныеЯчейкиЗавершение", ЭтотОбъект, Новый Структура("КоличествоЧасов", КоличествоЧасов)), КоличествоЧасов,"Введите количество часов:",10,2);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыделенныеЯчейкиЗавершение(Число, ДополнительныеПараметры) Экспорт
	
	Если Число = Неопределено Тогда 
		Возврат
	КонецЕсли;
	
	КоличествоЧасов = ?(Число = Неопределено, ДополнительныеПараметры.КоличествоЧасов, Число);
	
	СписокМесяцев = Новый СписокЗначений;
	Для Каждого Стр Из СоответствиеПериодовНазванийКолонок Цикл
		СписокМесяцев.Добавить(Стр.ИмяКолонки,Формат(Стр.Месяц,"ДФ='MMMM yyyy'"));
	КонецЦикла;
	
	СписокМесяцев.ЗаполнитьПометки(Истина);
	СписокМесяцев.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ЗаполнитьВыделенныеЯчейкиЗавершениеЗавершение", ЭтотОбъект, Новый Структура("КоличествоЧасов", КоличествоЧасов)),"Выберите колонки для заполнения:");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВыделенныеЯчейкиЗавершениеЗавершение(СписокМесяцев, ДополнительныеПараметры) Экспорт
	
	Если СписокМесяцев <> Неопределено Тогда 
		
		МассивДолжностей = Новый Массив;
		
		Для Каждого НомерСтр Из Элементы.ПерсоналДинамическая.ВыделенныеСтроки Цикл
			МассивДолжностей.Добавить(ПерсоналДинамическая.НайтиПоИдентификатору(НомерСтр).Должность);
		КонецЦикла;
		
		Для Каждого Стр Из ПерсоналДинамическая Цикл
			Если МассивДолжностей.Найти(Стр.Должность) <> Неопределено Тогда 
				Для Каждого СтрКолонки Из СписокМесяцев Цикл 
					Если СтрКолонки.Пометка Тогда  
						Стр[СтрКолонки.Значение] = ДополнительныеПараметры.КоличествоЧасов;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьДоступныеЧасыПерсонала();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерсоналДинамическаяДолжностьПриИзменении(Элемент)
	Стр			= Элементы.ПерсоналДинамическая.ТекущиеДанные;
	Стр.Цена	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Должность, ТекущаяДата());
	Стр.ЦенаПрошлогоПериода	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Должность, ТекущаяДата(),"ЦенаПрошлогоПериода");
	Стр.ЦенаПрошлогоПериодаСоСтатьей103	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Должность, ТекущаяДата(),"ЦенаПрошлогоПериодаСоСтатьей103");
	Стр.ЦенаПрошлогоПериодаСоцПакет	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Должность, ТекущаяДата(),"ЦенаПрошлогоПериодаСоцПакет");
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦеныПерсонал(Команда)
	ПересчитатьЦеныПерсоналНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныПерсоналНаСервере()
	
	Для Каждого Стр Из ПерсоналДинамическая Цикл
		Стр.Цена	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Должность, ТекущаяДата(),,Стр.СтатьяЗатрат);
	КонецЦикла;
	
	ЗаполнитьДоступныеЧасыПерсонала();
	
КонецПроцедуры

&НаКлиенте
Процедура СортитроватьПерсонал(Команда)
	ПерсоналДинамическая.Сортировать("Должность, СтатьяЗатрат");
КонецПроцедуры

&НаКлиенте
Процедура ПерсоналДинамическаяСтатьяЗатратПриИзменении(Элемент)
	
	ТекСтрока		= Элементы.ПерсоналДинамическая.ТекущиеДанные;
	ТекДолжность	= Элементы.ПерсоналДинамическая.ТекущиеДанные.Должность;
	ТекСтатьяЗатрат	= Элементы.ПерсоналДинамическая.ТекущиеДанные.СтатьяЗатрат;
	
	МассивСвязанныхСтатей = ПолучитьМассивСвязанныхСтатей(ТекСтатьяЗатрат);
	
	Для Каждого ЭлементМассива Из МассивСвязанныхСтатей Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("СтатьяЗатрат", ЭлементМассива);
		ПараметрыОтбора.Вставить("Должность", ТекДолжность);
		НайдСтроки = ПерсоналДинамическая.НайтиСтроки(ПараметрыОтбора);
		Если НайдСтроки.Количество() = 0 Тогда 
			Стр = ПерсоналДинамическая.Добавить();
			ЗаполнитьЗначенияСвойств(Стр,ТекСтрока);
			Стр.СтатьяЗатрат = ЭлементМассива;
		КонецЕсли;
	КонецЦикла;
	
	ОбработатьИспользованиеВОпределенныеМесяцы();
	
	ОбработатьИспользованиеПоПолам();
	
	ПерсоналДинамическая.Сортировать("Должность, СтатьяЗатрат");
	
	ПересчитатьЦеныПерсоналНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерсоналЗаполнитьЗависимыеСтатьиЗатрат(Команда)
	
	Для Каждого СтрПерсонал Из ПерсоналДинамическая Цикл 
		                                                                                                                              
		ТекДолжность	= СтрПерсонал.Должность;
		ТекСтатьяЗатрат	= СтрПерсонал.СтатьяЗатрат;
		
		МассивСвязанныхСтатей = ПолучитьМассивСвязанныхСтатей(ТекСтатьяЗатрат);
		
		Для Каждого ЭлементМассива Из МассивСвязанныхСтатей Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("СтатьяЗатрат", ЭлементМассива);
			ПараметрыОтбора.Вставить("Должность", ТекДолжность);
			НайдСтроки = ПерсоналДинамическая.НайтиСтроки(ПараметрыОтбора);
			Если НайдСтроки.Количество() = 0 Тогда 
				Стр = ПерсоналДинамическая.Добавить();
				ЗаполнитьЗначенияСвойств(Стр,СтрПерсонал);
				Стр.СтатьяЗатрат = ЭлементМассива;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ОбработатьИспользованиеВОпределенныеМесяцы();
	
	ОбработатьИспользованиеПоПолам();
	
	ПерсоналДинамическая.Сортировать("Должность, СтатьяЗатрат");
	
	ПересчитатьЦеныПерсоналНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ТЧ_Деньги

#КонецОбласти

#Область ТЧ_Инструменты

&НаКлиенте
Процедура ИнструментыИнструментПриИзменении(Элемент)
	Стр			= Элементы.Инструменты.ТекущиеДанные;
	Стр.Цена	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Инструмент, ТекущаяДата()); 
	ОбработатьСтрокуИнструменты();
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыКоличествоЧасовПриИзменении(Элемент)
	ОбработатьСтрокуИнструменты();
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыЦенаПриИзменении(Элемент)
	ОбработатьСтрокуИнструменты();
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыСуммаПриИзменении(Элемент)
	ОбработатьСтрокуИнструменты();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуИнструменты()
	Стр = Элементы.Инструменты.ТекущиеДанные;
	Стр.Сумма = Стр.Цена * Стр.КоличествоЧасов;	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицуИнструментыКолонкиНаСервере()
	
	ИнструментыДинамическаяЗначение = РеквизитФормыВЗначение("ИнструментыДинамическая");
    
    МассивРеквизитов = Новый Массив;
    
	Для Каждого Колонка Из ИнструментыДинамическаяЗначение.Колонки Цикл
		Если СтрНайти(Колонка.Имя,"КоличествоДин") <> 0 Или СтрНайти(Колонка.Имя,"СуммаДин") <> 0 Тогда 
        	МассивРеквизитов.Добавить("ИнструментыДинамическая." + Колонка.Имя);        
		КонецЕсли;
    КонецЦикла;
    ИзменитьРеквизиты(,МассивРеквизитов);
	
	ДатаИнструмента		= НачалоДня(Объект.ДатаНачала);
	
	Пока ДатаИнструмента <= Объект.ДатаОкончания Цикл
		
		ИмяКолонки	= "КоличествоДин" + Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд");
		ИнструментыДинамическаяЗначение.Колонки.Добавить(ИмяКолонки,,Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд"));
		
		ИмяКолонкиСумма	= "СуммаДин" + Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд");
		ИнструментыДинамическаяЗначение.Колонки.Добавить(ИмяКолонкиСумма,,"Сумма " + Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд"));
		
		ИмяКолонкиСумма	= "СуммаДинПрошПериод" + Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд");
		ИнструментыДинамическаяЗначение.Колонки.Добавить(ИмяКолонкиСумма,,"Сумма " + Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд"));
		
		ИмяКолонкиСумма	= "СуммаДинПрошПериод103" + Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд");
		ИнструментыДинамическаяЗначение.Колонки.Добавить(ИмяКолонкиСумма,,"Сумма " + Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд"));
		
		ИмяКолонкиСумма	= "СуммаДинПрошПериодСоц" + Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд");
		ИнструментыДинамическаяЗначение.Колонки.Добавить(ИмяКолонкиСумма,,"Сумма " + Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд"));
		
		ДатаИнструмента = ДатаИнструмента + 86400;
		
	КонецЦикла;	
	
	МассивРеквизитов.Очистить();
	
	Для Каждого Колонка ИЗ ИнструментыДинамическаяЗначение.Колонки Цикл
		Если СтрНайти(Колонка.Имя,"КоличествоДин") <> 0 Тогда
			НоваяКолонка = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Число"), "ИнструментыДинамическая");
			МассивРеквизитов.Добавить(НоваяКолонка);
		КонецЕсли; 
		Если СтрНайти(Колонка.Имя,"СуммаДин") <> 0 Тогда
			НоваяКолонка = Новый РеквизитФормы(Колонка.Имя, Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,3)), "ИнструментыДинамическая");
			МассивРеквизитов.Добавить(НоваяКолонка);
		КонецЕсли;
	КонецЦикла;      
	ИзменитьРеквизиты(МассивРеквизитов);  
	ЗначениеВРеквизитФормы(ИнструментыДинамическаяЗначение, "ИнструментыДинамическая");
	
	//Элементы формы
	
	ЭлементИнструментыДинамическая = Элементы.ИнструментыДинамическая;
	
	ТекущийМесяц = Неопределено;
	ДатаИнструмента		= НачалоДня(Объект.ДатаНачала);
	
	Пока ДатаИнструмента <= Объект.ДатаОкончания Цикл
		
		Если ТекущийМесяц <> НачалоМесяца(ДатаИнструмента)  Тогда 
			
			НоваяГруппаФормы 				= Элементы.Добавить("ИнструментыДинамическаяГруппа"+Формат(ДатаИнструмента,"ДФ=ММгггг"), Тип("ГруппаФормы"), ЭлементИнструментыДинамическая);
			НоваяГруппаФормы.Заголовок		= Формат(ДатаИнструмента,"ДФ='MMMM yyyy'");
			НоваяГруппаФормы.ОтображатьВШапке	= Истина;
			НоваяГруппаФормы.Группировка	= ГруппировкаКолонок.Горизонтальная;
			
			ТекущийМесяц = НачалоМесяца(ДатаИнструмента);
			
		КонецЕсли;
		
		НовыйЭлементФормы 				= Элементы.Добавить("ИнструментыДинамическаяКоличествоДин"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд"), Тип("ПолеФормы"), НоваяГруппаФормы);
		НовыйЭлементФормы.Вид 			= ВидПоляФормы.ПолеВвода;
		НовыйЭлементФормы.ПутьКДанным 	= "ИнструментыДинамическая.КоличествоДин" + Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд");
		НовыйЭлементФормы.Заголовок		= Формат(ДатаИнструмента,"ДФ=д");
		НовыйЭлементФормы.Ширина		= 3;
		
		ДатаИнструмента = ДатаИнструмента + 86400;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуИнструментыНаФормеИзОбъекта()
	
	Для Каждого Стр Из Объект.Инструменты Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Инструмент", Стр.Инструмент);
		ПараметрыОтбора.Вставить("СтатьяЗатрат", Стр.СтатьяЗатрат);
		НайденныеСтроки = ИнструментыДинамическая.НайтиСтроки(ПараметрыОтбора);
		
		Для Каждого НайдСтрока Из НайденныеСтроки Цикл
			НайдСтрока["КоличествоДин"+Формат(Стр.ДатаПотребности,"ЧГ=; ДФ=ггггММдд")] = Стр.КоличествоЧасов;	
			НайдСтрока["СуммаДин"+Формат(Стр.ДатаПотребности,"ЧГ=; ДФ=ггггММдд")] = Стр.Сумма;
			НайдСтрока["СуммаДинПрошПериод"+Формат(Стр.ДатаПотребности,"ЧГ=; ДФ=ггггММдд")] = Стр.СуммаПрошлогоПериода;
			НайдСтрока["СуммаДинПрошПериод103"+Формат(Стр.ДатаПотребности,"ЧГ=; ДФ=ггггММдд")] = Стр.СуммаПрошлогоПериодаСоСтатьей103;
			НайдСтрока["СуммаДинПрошПериодСоц"+Формат(Стр.ДатаПотребности,"ЧГ=; ДФ=ггггММдд")] = Стр.СуммаПрошлогоПериодаСоцПакет;
			НайдСтрока.Сумма = НайдСтрока.Сумма + Стр.Сумма;
			НайдСтрока.СуммаПрошлогоПериода = НайдСтрока.СуммаПрошлогоПериода + Стр.СуммаПрошлогоПериода;
			НайдСтрока.СуммаПрошлогоПериодаСоСтатьей103 = НайдСтрока.СуммаПрошлогоПериодаСоСтатьей103 + Стр.СуммаПрошлогоПериодаСоСтатьей103;
			НайдСтрока.СуммаПрошлогоПериодаСоцПакет = НайдСтрока.СуммаПрошлогоПериодаСоцПакет + Стр.СуммаПрошлогоПериодаСоцПакет;
		КонецЦикла;
		
		Если НайденныеСтроки.Количество() = 0 Тогда 
			СтрНовая					= ИнструментыДинамическая.Добавить();
			СтрНовая.Инструмент			= Стр.Инструмент;
			СтрНовая.СтатьяЗатрат		= Стр.СтатьяЗатрат;
			СтрНовая["КоличествоДин"+Формат(Стр.ДатаПотребности,"ЧГ=; ДФ=ггггММдд")] = Стр.КоличествоЧасов;
			СтрНовая["СуммаДин"+Формат(Стр.ДатаПотребности,"ЧГ=; ДФ=ггггММдд")] = Стр.Сумма;
			СтрНовая["СуммаДинПрошПериод"+Формат(Стр.ДатаПотребности,"ЧГ=; ДФ=ггггММдд")] = Стр.СуммаПрошлогоПериода;
			СтрНовая["СуммаДинПрошПериод103"+Формат(Стр.ДатаПотребности,"ЧГ=; ДФ=ггггММдд")] = Стр.СуммаПрошлогоПериодаСоСтатьей103;
			СтрНовая["СуммаДинПрошПериодСоц"+Формат(Стр.ДатаПотребности,"ЧГ=; ДФ=ггггММдд")] = Стр.СуммаПрошлогоПериодаСоцПакет;
			СтрНовая.Цена				= Стр.Цена;
			СтрНовая.ЦенаПрошлогоПериода	= Стр.ЦенаПрошлогоПериода;
			СтрНовая.ЦенаПрошлогоПериодаСоСтатьей103				= Стр.ЦенаПрошлогоПериодаСоСтатьей103;
			СтрНовая.ЦенаПрошлогоПериодаСоцПакет				= Стр.ЦенаПрошлогоПериодаСоцПакет;
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуИнструментыВОбъекте()
	
	Объект.Инструменты.Очистить();
	
	Для Каждого Стр Из ИнструментыДинамическая Цикл
		
		ДатаИнструмента = НачалоДня(Объект.ДатаНачала);
		
		Пока ДатаИнструмента <= Объект.ДатаОкончания Цикл
			
			Если Стр["КоличествоДин"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")] > 0 Тогда 
				
				СтрОбъекта 						= Объект.Инструменты.Добавить();
				СтрОбъекта.Инструмент 			= Стр.Инструмент;
				СтрОбъекта.СтатьяЗатрат			= Стр.СтатьяЗатрат;
				СтрОбъекта.ДатаПотребности		= ДатаИнструмента;
				СтрОбъекта.КоличествоЧасов		= Стр["КоличествоДин"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")];
				СтрОбъекта.Сумма				= Стр["СуммаДин"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")];
				СтрОбъекта.СуммаПрошлогоПериода	= Стр["СуммаДинПрошПериод"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")];
				СтрОбъекта.СуммаПрошлогоПериодаСоСтатьей103	= Стр["СуммаДинПрошПериод103"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")];
				СтрОбъекта.СуммаПрошлогоПериодаСоцПакет		= Стр["СуммаДинПрошПериодСоц"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")];
				СтрОбъекта.Цена					= ?(СтрОбъекта.КоличествоЧасов=0,0,СтрОбъекта.Сумма/СтрОбъекта.КоличествоЧасов);
				СтрОбъекта.ЦенаПрошлогоПериода	= ?(СтрОбъекта.КоличествоЧасов=0,0,СтрОбъекта.СуммаПрошлогоПериода/СтрОбъекта.КоличествоЧасов);
				СтрОбъекта.ЦенаПрошлогоПериодаСоСтатьей103	= ?(СтрОбъекта.КоличествоЧасов=0,0,СтрОбъекта.СуммаПрошлогоПериодаСоСтатьей103/СтрОбъекта.КоличествоЧасов);
				СтрОбъекта.ЦенаПрошлогоПериодаСоцПакет		= ?(СтрОбъекта.КоличествоЧасов=0,0,СтрОбъекта.СуммаПрошлогоПериодаСоцПакет/СтрОбъекта.КоличествоЧасов);
				
			КонецЕсли;
			
			ДатаИнструмента = ДатаИнструмента + 86400;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммыИнструменты()
	
	ОбщаяСумма = 0;
	
	Для Каждого Стр Из ИнструментыДинамическая Цикл
		
		ДатаИнструмента = НачалоДня(Объект.ДатаНачала);
		
		Стр.Сумма = 0;
		Стр.СуммаПрошлогоПериода = 0;
		Стр.СуммаПрошлогоПериодаСоСтатьей103 = 0;
		Стр.СуммаПрошлогоПериодаСоцПакет = 0;
		
		Пока ДатаИнструмента <= Объект.ДатаОкончания Цикл
			
			Стр["СуммаДин"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")] = Стр["КоличествоДин"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")] * Стр.Цена;
			Стр["СуммаДинПрошПериод"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")] = Стр["КоличествоДин"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")] * Стр.ЦенаПрошлогоПериода;
			Стр["СуммаДинПрошПериод103"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")] = Стр["КоличествоДин"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")] * Стр.ЦенаПрошлогоПериодаСоСтатьей103;
			Стр["СуммаДинПрошПериодСоц"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")] = Стр["КоличествоДин"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")] * Стр.ЦенаПрошлогоПериодаСоцПакет;
			Стр.Сумма = Стр.Сумма + Стр["СуммаДин"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")]; 
			Стр.СуммаПрошлогоПериода = Стр.СуммаПрошлогоПериода + Стр["СуммаДинПрошПериод"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")];
			Стр.СуммаПрошлогоПериодаСоСтатьей103 = Стр.СуммаПрошлогоПериодаСоСтатьей103 + Стр["СуммаДинПрошПериод103"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")];
			Стр.СуммаПрошлогоПериодаСоцПакет = Стр.СуммаПрошлогоПериодаСоцПакет + Стр["СуммаДинПрошПериодСоц"+Формат(ДатаИнструмента,"ЧГ=; ДФ=ггггММдд")];
			
			ДатаИнструмента = ДатаИнструмента + 86400;
			
		КонецЦикла;
		
		ОбщаяСумма = ОбщаяСумма + Стр.Сумма;
		
	КонецЦикла;
	
	Элементы.ИнструментыДинамическаяСумма.ТекстПодвала = Формат(ОбщаяСумма, "ЧДЦ=2");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыДинамическаяПриИзменении(Элемент)
	 РассчитатьСуммыИнструменты();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнструментыПоМесяцам(Команда)
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ЗаполнитьИнструментыПоМесяцамЗавершение", ЭтотОбъект), 0,"Введите количество часов:",10,2);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнструментыОпределенныеДни(Команда)
	СтруктураПараметров = Новый Структура("СУчетомВыходных", Ложь);
	ОткрытьФорму("Справочник.Договоры.Форма.ФормаЗаполненияИнструменты",СтруктураПараметров,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнструментыПоМесяцамЗавершение(ВведенноеЧисло, ДополнительныеПараметры) Экспорт
	
	СписокМесяцев = Новый СписокЗначений;
	
	Месяц = НачалоМесяца(Объект.ДатаНачала);
	
	Пока Месяц <= Объект.ДатаОкончания Цикл
		СписокМесяцев.Добавить(Месяц,Формат(Месяц,"ДФ='MMMM yyyy'"));
		Месяц = ДобавитьМесяц(Месяц,1);
	КонецЦикла;
	
	СписокМесяцев.ЗаполнитьПометки(Истина);
	СписокМесяцев.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ЗаполнитьИнструментыПоМесяцамЗавершениеЗавершение", ЭтотОбъект, Новый Структура("КоличествоЧасов", ВведенноеЧисло)),"Выберите месяцы для заполнения:");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнструментыПоМесяцамЗавершениеЗавершение(СписокМесяцев, ДополнительныеПараметры) Экспорт
	
	Если СписокМесяцев <> Неопределено Тогда 
		
		Для Каждого НомерСтр Из Элементы.ИнструментыДинамическая.ВыделенныеСтроки Цикл
			Для Каждого СтрКолонки Из СписокМесяцев Цикл 
				Если СтрКолонки.Пометка Тогда
					ТекДень = НачалоМесяца(СтрКолонки.Значение);
					Пока ТекДень <= КонецМесяца(СтрКолонки.Значение) Цикл
						Если ТекДень < НачалоДня(Объект.ДатаНачала) Или ТекДень > КонецДня(Объект.ДатаОкончания) Тогда
							ТекДень = ТекДень + 86400;
							Продолжить;
						КонецЕсли;
						ИнструментыДинамическая.НайтиПоИдентификатору(НомерСтр)["КоличествоДин"+Формат(ТекДень,"ЧГ=; ДФ=ггггММдд")] = ДополнительныеПараметры.КоличествоЧасов;
						ИнструментыДинамическая.НайтиПоИдентификатору(НомерСтр)["СуммаДин"+Формат(ТекДень,"ЧГ=; ДФ=ггггММдд")] = ДополнительныеПараметры.КоличествоЧасов*ИнструментыДинамическая.НайтиПоИдентификатору(НомерСтр).Цена;
						ТекДень = ТекДень + 86400;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	РассчитатьСуммыИнструменты();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнструментыПоМесяцамСУчетомВыходных(Команда)
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ЗаполнитьИнструментыПоМесяцамЗавершениеСУчетомВыходных", ЭтотОбъект), 0,"Введите количество часов:",10,2);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнструментыОпределенныеДниСУчетомВыходных(Команда)
	СтруктураПараметров = Новый Структура("СУчетомВыходных", Истина);
	ОткрытьФорму("Справочник.Договоры.Форма.ФормаЗаполненияИнструменты",СтруктураПараметров,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнструментыПоМесяцамЗавершениеСУчетомВыходных(ВведенноеЧисло, ДополнительныеПараметры) Экспорт
	
	СписокМесяцев = Новый СписокЗначений;
	
	Месяц = НачалоМесяца(Объект.ДатаНачала);
	
	Пока Месяц <= Объект.ДатаОкончания Цикл
		СписокМесяцев.Добавить(Месяц,Формат(Месяц,"ДФ='MMMM yyyy'"));
		Месяц = ДобавитьМесяц(Месяц,1);
	КонецЦикла;
	
	СписокМесяцев.ЗаполнитьПометки(Истина);
	СписокМесяцев.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ЗаполнитьИнструментыПоМесяцамЗавершениеЗавершениеСУчетомВыходных", ЭтотОбъект, Новый Структура("КоличествоЧасов", ВведенноеЧисло)),"Выберите месяцы для заполнения:");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИнструментыПоМесяцамЗавершениеЗавершениеСУчетомВыходных(СписокМесяцев, ДополнительныеПараметры) Экспорт
	
	Если СписокМесяцев <> Неопределено Тогда 
		
		Для Каждого НомерСтр Из Элементы.ИнструментыДинамическая.ВыделенныеСтроки Цикл
			Для Каждого СтрКолонки Из СписокМесяцев Цикл 
				Если СтрКолонки.Пометка Тогда
					ТекДень = НачалоМесяца(СтрКолонки.Значение);
					Пока ТекДень <= КонецМесяца(СтрКолонки.Значение) Цикл
						Если ТекДень < НачалоДня(Объект.ДатаНачала) Или ТекДень > КонецДня(Объект.ДатаОкончания) Тогда
							ТекДень = ТекДень + 86400;
							Продолжить;
						КонецЕсли;
						Если НЕ ЭтоВыходной(ТекДень) Тогда 
							ИнструментыДинамическая.НайтиПоИдентификатору(НомерСтр)["КоличествоДин"+Формат(ТекДень,"ЧГ=; ДФ=ггггММдд")] = ДополнительныеПараметры.КоличествоЧасов;
							ИнструментыДинамическая.НайтиПоИдентификатору(НомерСтр)["СуммаДин"+Формат(ТекДень,"ЧГ=; ДФ=ггггММдд")] = ДополнительныеПараметры.КоличествоЧасов*ИнструментыДинамическая.НайтиПоИдентификатору(НомерСтр).Цена;
						Иначе
							ИнструментыДинамическая.НайтиПоИдентификатору(НомерСтр)["КоличествоДин"+Формат(ТекДень,"ЧГ=; ДФ=ггггММдд")] = 0;
							ИнструментыДинамическая.НайтиПоИдентификатору(НомерСтр)["СуммаДин"+Формат(ТекДень,"ЧГ=; ДФ=ггггММдд")] = 0;
						КонецЕсли;
						ТекДень = ТекДень + 86400;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	РассчитатьСуммыИнструменты();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыДинамическаяИнструментПриИзменении(Элемент)
	Стр			= Элементы.ИнструментыДинамическая.ТекущиеДанные;
	Стр.Цена	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Инструмент, ТекущаяДата());
	РассчитатьСуммыИнструменты();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦеныИнструменты(Команда)
	Для Каждого Стр Из ИнструментыДинамическая Цикл
		Стр.Цена	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Инструмент, ТекущаяДата());
		Стр.ЦенаПрошлогоПериода	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Инструмент, ТекущаяДата(),"ЦенаПрошлогоПериода");
		Стр.ЦенаПрошлогоПериодаСоСтатьей103	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Инструмент, ТекущаяДата(),"ЦенаПрошлогоПериодаСоСтатьей103");
		Стр.ЦенаПрошлогоПериодаСоцПакет	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Инструмент, ТекущаяДата(),"ЦенаПрошлогоПериодаСоцПакет");
	КонецЦикла;		
	РассчитатьСуммыИнструменты();
КонецПроцедуры

&НаКлиенте
Процедура ПодборИнструменты(Команда)
	СтруктураПараметры = Новый Структура("ЗакрыватьПриВыборе, РежимВыбора, ВыборГруппИЭлементов", Ложь, Истина, ИспользованиеГруппИЭлементов.ГруппыИЭлементы);	
	ОткрытьФорму("Справочник.Инструменты.ФормаВыбора",СтруктураПараметры, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИнструментыГруппы(ГруппаИнструментов)
	
	МассивИнструментов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Инструменты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Инструменты КАК Инструменты
		|ГДЕ
		|	Инструменты.Ссылка В ИЕРАРХИИ(&Ссылка)
		|	И НЕ Инструменты.ПометкаУдаления
		|	И НЕ Инструменты.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Ссылка", ГруппаИнструментов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивИнструментов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	
	Возврат МассивИнструментов;

КонецФункции

&НаКлиенте
Процедура ПоказатьДетальныйОтчетИнструмент(Команда)
	
	Если СтрНайти(Элементы.ИнструментыДинамическая.ТекущийЭлемент.Имя,"ИнструментыДинамическаяКоличествоДин") = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаПотребностиИнструмента = Дата(СтрЗаменить(Элементы.ИнструментыДинамическая.ТекущийЭлемент.Имя,"ИнструментыДинамическаяКоличествоДин",""));
	
	СтрПараметры = Новый Структура;
    СтрПараметры.Вставить("Ссылка", Объект.Ссылка);
	СтрПараметры.Вставить("Инструмент", Элементы.ИнструментыДинамическая.ТекущиеДанные.Инструмент);
	СтрПараметры.Вставить("ДатаПотребности", ДатаПотребностиИнструмента);
    
    ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("ДетальныйОтчетИнструмент",СтрПараметры);
    
    ПараметрыФормы = Новый Структура("ПользовательскиеНастройки, СформироватьПриОткрытии", ПользовательскиеНастройки, Истина);
    
    ОткрытьФорму("Отчет.ДетальныйОтчетИнструмент.Форма", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДоступностьИнструмент(Команда)
	ПроверитьДоступностьИнструментНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьИнструментНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыИнструменты.Инструмент КАК Инструмент,
		|	СУММА(ДоговорыИнструменты.КоличествоЧасов) КАК КоличествоЧасов,
		|	ДоговорыИнструменты.ДатаПотребности КАК ДатаПотребности
		|ИЗ
		|	Справочник.Договоры.Инструменты КАК ДоговорыИнструменты
		|ГДЕ
		|	ДоговорыИнструменты.Ссылка <> &Ссылка
		|	И ДоговорыИнструменты.ДатаПотребности МЕЖДУ &ДатаНачало И &ДатаКонец
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоговорыИнструменты.Инструмент,
		|	ДоговорыИнструменты.ДатаПотребности";
	
	Запрос.УстановитьПараметр("ДатаКонец", Объект.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаНачало", Объект.ДатаНачала);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаИнструментов = РезультатЗапроса.Выгрузить();
	
	ДатаРасчета = НачалоДня(Объект.ДатаНачала);
	
	Для Каждого Стр Из ИнструментыДинамическая Цикл
		
		ДоступноеКоличество = Стр.Инструмент.РежимРаботы.КоличествоЧасовВДень;
		Пока ДатаРасчета <= Объект.ДатаОкончания Цикл
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Инструмент", Стр.Инструмент);
			ПараметрыОтбора.Вставить("ДатаПотребности", ДатаРасчета);
			
			НайденныеСтроки = ТаблицаИнструментов.НайтиСтроки(ПараметрыОтбора);
			
			КоличествоВДругихДоговорах = 0;
			
			Для Каждого НайдСтр Из НайденныеСтроки Цикл
				КоличествоВДругихДоговорах = КоличествоВДругихДоговорах + НайдСтр.КоличествоЧасов;		
			КонецЦикла;
			
			Если ДоступноеКоличество < КоличествоВДругихДоговорах + Стр["КоличествоДин"+Формат(ДатаРасчета,"ЧГ=; ДФ=ггггММдд")] Тогда 
				
				Элемент = УсловноеОформление.Элементы.Добавить();
				
				ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ИнструментыДинамическаяКоличествоДин"+Формат(ДатаРасчета,"ЧГ=; ДФ=ггггММдд"));
				
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИнструментыДинамическая.Инструмент");
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Стр.Инструмент;
				
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Розовый);
				
			КонецЕсли;
			
			ДатаРасчета = ДатаРасчета + 86400; 
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТЧ_Материалы

&НаКлиенте
Процедура МатериалыМатериалПриИзменении(Элемент)
	Стр			= Элементы.Материалы.ТекущиеДанные;
	Стр.Цена	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Материал, ТекущаяДата()); 
	ОбработатьСтрокуМатериалы();
КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоПриИзменении(Элемент)
	ОбработатьСтрокуМатериалы();
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЦенаПриИзменении(Элемент)
	ОбработатьСтрокуМатериалы();
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСуммаПриИзменении(Элемент)
	ОбработатьСтрокуМатериалы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСтрокуМатериалы()
	Стр = Элементы.Материалы.ТекущиеДанные;
	Стр.Сумма = Стр.Цена * Стр.Количество;	
КонецПроцедуры

#КонецОбласти

#Область ТЧ_Субподряд

&НаКлиенте
Процедура СоздатьДоговорСубподряда(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьДоговорСубподрядаЗавершение", ЭтотОбъект), "Преобразовать этот договор в проект?", РежимДиалогаВопрос.ДаНетОтмена);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорСубподрядаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПреобразоватьВПроект = Ложь;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ПреобразоватьВПроект = Истина;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ПреобразоватьВПроект = Ложь;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена Тогда 
		Возврат	
	КонецЕсли;
	
	СписокДт2Дт4 = Новый СписокЗначений;
	СписокДт2Дт4.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ2"), "ДТ2");
	СписокДт2Дт4.Добавить(ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4"), "ДТ4");
	СписокДт2Дт4.Добавить(Неопределено,"Отмена");
	
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьДоговорСубподрядаЗавершениеЗавершение", ЭтотОбъект, Новый Структура("ПреобразоватьВПроект", ПреобразоватьВПроект)), "Выберите тип договора:",СписокДт2Дт4);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорСубподрядаЗавершениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПреобразоватьВПроект = ДополнительныеПараметры.ПреобразоватьВПроект;
	
	Если РезультатВопроса = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СоздатьДоговорСубподрядаНаСервере(РезультатВопроса, ПреобразоватьВПроект);
	
	Если ПреобразоватьВПроект Тогда 
		ПоказатьЗначение(Неопределено, Объект.Проект);	
	КонецЕсли;
	
	Записать();

КонецПроцедуры

&НаСервере
Процедура СоздатьДоговорСубподрядаНаСервере(ТипДоговора, ПреобразоватьВПроект)
	
	НовыйДоговор							= Справочники.Договоры.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйДоговор, Объект);
	НовыйДоговор.Код						= "";
	НовыйДоговор.ТипДоговора				= ТипДоговора;
	НовыйДоговор.СостояниеИсполнения		= Перечисления.СтатусыДоговоровПроектов.Планируемый;
	НовыйДоговор.НомерДоговора				= "";
	НовыйДоговор.Контрагент					= Справочники.Контрагенты.ПустаяСсылка();
	НовыйДоговор.СуммаДоговора				= 0;
	НовыйДоговор.СуммаНачисления			= 0;
	НовыйДоговор.СуммаПлан					= 0;
	НовыйДоговор.СуммаПоДоговору			= 0;
	НовыйДоговор.СуммаПоДоговоруБезУчетаНДС = 0;
	НовыйДоговор.СуммаРаспределенная		= 0;
	НовыйДоговор.Оплаты.Очистить();
	НовыйДоговор.Распределения.Очистить();
	НовыйДоговор.СуммыПоДоговоруПоПериоду.Очистить();
	НовыйДоговор.Записать();
	
	Стр = Объект.Субподряды.Добавить();
	Стр.ДоговорСубподряда = НовыйДоговор.Ссылка;
	
	Если ПреобразоватьВПроект Тогда 
		
		ПроектДоговора = Объект.Проект;
		
		НовыйПроект						= Справочники.Проекты.СоздатьЭлемент();
		НовыйПроект.Администратор		= Объект.Администратор;
		НовыйПроект.ДатаНачала			= Объект.ДатаНачала;
		НовыйПроект.ДатаОкончания		= Объект.ДатаОкончания;
		НовыйПроект.Инициатор			= Объект.Инициатор;
		НовыйПроект.Наименование		= Объект.НаименованиеДоговора;
		НовыйПроект.НаименованиеПолное	= Объект.Наименование;
		НовыйПроект.Организация			= Объект.Организация;
		НовыйПроект.Подразделение		= Объект.Подразделение;
		НовыйПроект.Продукт				= ПроектДоговора.Продукт;
		НовыйПроект.СостояниеИсполнения	= Объект.СостояниеИсполнения;
		НовыйПроект.Записать();
		
		Для Каждого СтрСубподряд Из Объект.Субподряды Цикл
			
			ДоговорСубподрядОбъект			= СтрСубподряд.ДоговорСубподряда.ПолучитьОбъект();
			ДоговорСубподрядОбъект.Проект	= НовыйПроект.Ссылка;
			ДоговорСубподрядОбъект.Записать();
			
		КонецЦикла;
		
		Объект.Проект = НовыйПроект.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Страница_РесурсыПоЗаявкам

&НаКлиенте
Процедура ОбновитьДеревоРесурсов(Команда)
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ЗаполнитьДеревоРесурсовНаСервере();	
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ДеревоРесурсыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыбрСтрока = Элемент.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ВыбрСтрока.ЗаявкаНаРесурсы) Тогда 
		ПоказатьЗначение(Новый ОписаниеОповещения("ДеревоРесурсыВыборЗавершение", ЭтаФорма), ВыбрСтрока.ЗаявкаНаРесурсы);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРесурсыВыборЗавершение(ДополнительныеПараметры) Экспорт
	
	
	
КонецПроцедуры

#КонецОбласти

#Область Тарифы

&НаКлиенте
Процедура ТарифыПриИзменении(Элемент)
	ТекущаяСтр = Элементы.Тарифы.ТекущиеДанные;
	ТекущаяСтр.Сумма = ТекущаяСтр.Цена * ТекущаяСтр.Количество * ТекущаяСтр.Объем;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦеныТарифы(Команда)
	Для Каждого Стр Из Объект.Тарифы Цикл
		Стр.Цена = ПолучитьЦенуТарифа(Стр.НаименованиеРаботы, Стр.Месторождение, Стр.Цех, Объект.ДатаОкончания);
		Стр.Сумма = Стр.Цена * Стр.Количество * Стр.Объем;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуТарифа(НаименованиеРаботы, Месторождение, Цех, ДатаРасчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТарифыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.Тарифы.СрезПоследних(
		|			&ДатаРасчета,
		|			Месторождение = &Месторождение
		|				И НаименованиеРаботы подобно &НаименованиеРаботы
		|				И Цех = &Цех) КАК ТарифыСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаРасчета", ДатаРасчета);
	Запрос.УстановитьПараметр("Месторождение", Месторождение);
	Запрос.УстановитьПараметр("НаименованиеРаботы", "%" + НаименованиеРаботы + "%");
	Запрос.УстановитьПараметр("Цех", Цех);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Цена;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

#КонецОбласти

#Область Расшифровка

&НаКлиенте
Процедура РасшифровкаПриИзменении(Элемент)
	Стр = Элементы.Расшифровка.ТекущиеДанные;
	ЗаполнитьСтрокуРасшифровка(Стр);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуРасшифровка(Стр)
	
	Стр.ТекущийПериод_Сумма				= Стр.ТекущийПериод_Цена * Стр.ТекущийПериод_Количество; 
	Стр.ПредыдущийПериодОценка_Сумма	= Стр.ПредыдущийПериодОценка_Цена * Стр.ПредыдущийПериодОценка_Количество;
	Стр.ПредыдущийПериодПлан_Сумма		= Стр.ПредыдущийПериодПлан_Цена * Стр.ПредыдущийПериодПлан_Количество;
	Стр.ПредыдущийПериодФакт_Сумма		= Стр.ПредыдущийПериодФакт_Цена * Стр.ПредыдущийПериодФакт_Количество;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьОтборыДерева()
	
	Элементы.ЗадачиЗаказчика.Отображение = ОтображениеТаблицы.Дерево;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона1, "СторонаЗадачи", 1);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона1, "ЭтапДоговора", ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Формирование"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона1, "Владелец", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	
	Элементы.ЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Дерево;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона2, "СторонаЗадачи", 2);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона2, "ЭтапДоговора", ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Формирование"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона2, "Владелец", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	
	Элементы.ИЗадачиЗаказчика.Отображение = ОтображениеТаблицы.Дерево;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона1, "СторонаЗадачи", 1);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона1, "ЭтапДоговора", ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Исполнение"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона1, "Владелец", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	
	Элементы.ИЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Дерево;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона2, "СторонаЗадачи", 2);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона2, "ЭтапДоговора", ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Исполнение"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона2, "Владелец", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	Элементы.ГруппаСторона2.Видимость = НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4") И НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ3");
	Элементы.ГруппаСторона4.Видимость = НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4");
	Элементы.Контрагент.Видимость = НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4"); 
	//Элементы.СуммаДоговора.Видимость = Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1") 
	//								ИЛИ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ2"); 
	//Элементы.СуммаДоговора.Заголовок = ?(Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1"), "Доход", "Расход"); 
	Элементы.ГруппаСторона1.Видимость = НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4") И НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ3");
	Элементы.ГруппаСторона3.ОтображатьЗаголовок = НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4");
	Если Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ3") Тогда
		Элементы.ГруппаСторона3.Заголовок = "Сторона 1 (" + ?(ЗначениеЗаполнено(Объект.НаименованиеСтороны1), Объект.НаименованиеСтороны1, "Заказчик") + ")";
		Элементы.ГруппаСторона4.Заголовок = "Сторона 2 (" + ?(ЗначениеЗаполнено(Объект.НаименованиеСтороны2), Объект.НаименованиеСтороны2, "Исполнитель") + ")";
	КонецЕсли;
	Элементы.НаименованиеСтороны1.Видимость = Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ3"); 
	Элементы.НаименованиеСтороны2.Видимость = Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ3"); 
	Элементы.НомерДоговора.Видимость = Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1") 
									ИЛИ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ2"); 
	Элементы.СтатьяЗатрат.Видимость = Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ2") ИЛИ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4"); 
	Элементы.СтатьяЗатратИзУчетнойСистемы.Видимость = Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ2") ИЛИ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4"); 
	//Элементы.ГруппаДоговорОснование.Видимость = Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ2") ИЛИ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1"); 
	Элементы.ГруппаРаспределение.Видимость = НЕ Объект.ВестиУчетПоДопДоговору И НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1"); 
	Элементы.ГруппаРаспределенияДоговоров.Видимость = Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1"); 
	               
	Элементы.ГруппаСуммыПраво.Видимость = НЕ Объект.ВестиУчетПоДопДоговору и Объект.ЕстьПодчиненные;
	Элементы.РаспределенияЗаполнитьРаспределенияПоРодителю.Видимость = НЕ Объект.ВестиУчетПоДопДоговору и ЗначениеЗаполнено(Объект.ДоговорОснование);
	Элементы.ЗаполнитьСуммыПоРодителю.Видимость = НЕ Объект.ВестиУчетПоДопДоговору и ЗначениеЗаполнено(Объект.ДоговорОснование) и НЕ Объект.ЕстьПодчиненные;
	Элементы.ГруппаПодчиненныеДоговоры.Видимость = Объект.ЕстьПодчиненные;
	
	Элементы.СуммаПоДоговоруУчитыватьНДС.Видимость = НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4"); 
	
	Элементы.ГруппаПланПоРесурсам.Видимость = Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1") 
											ИЛИ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4");
											
	Если ТолькоЗаполнениеРесурсов() Тогда 
		Элементы.Наименование.ТолькоПросмотр					= Истина;											
		Элементы.ГруппаШапкаЛево.ТолькоПросмотр					= Истина;
		Элементы.Наименование1.ТолькоПросмотр					= Истина;
		Элементы.ГруппаПериод.ТолькоПросмотр					= Истина;
		Элементы.Администратор.ТолькоПросмотр					= Истина;
		Элементы.Инициатор.ТолькоПросмотр						= Истина;
		Элементы.Группа4.ТолькоПросмотр							= Истина;
		Элементы.ГруппаОплаты.ТолькоПросмотр					= Истина;
		Элементы.ГруппаФормирование.ТолькоПросмотр				= Истина;
		Элементы.ГруппаИсполнение.ТолькоПросмотр				= Истина;
		Элементы.ГруппаРаспределение.ТолькоПросмотр				= Истина;
		Элементы.ГруппаРесурсы.ТолькоПросмотр					= Истина;
		Элементы.ГруппаРаспределенияДоговоров.ТолькоПросмотр	= Истина;
		Элементы.ГруппаПодчиненныеДоговоры.ТолькоПросмотр		= Истина;
		Если НЕ (Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ1")
			ИЛИ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4"))
			ИЛИ НЕ Объект.СостояниеИсполнения = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровПроектов.Планируемый") Тогда 
			Элементы.ГруппаПланПоРесурсам.ТолькоПросмотр		= Истина;
		КонецЕсли;
		Если Не Объект.СостояниеИсполнения = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровПроектов.Планируемый") Тогда
			Элементы.ГруппаПланПоРесурсам.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4") Тогда 
		Элементы.ГруппаРасшифровка.Видимость = Истина;
	Иначе
		Элементы.ГруппаРасшифровка.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименование(ВызовИзКоманды = Ложь)
	//Если НЕ ВызовИзКоманды
	//	И ЗначениеЗаполнено(Объект.Наименование) тогда
	//	Возврат
	//КонецЕсли;
	Объект.Наименование = СтрШаблон("%1 - %2 %3 - %4 - %5 - %6", Объект.ТипДоговора, Объект.НаименованиеДоговора, 
									?(Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4"), "", " - " + Строка(Объект.Контрагент)), 
									Формат(Объект.ДатаНачала, "ДФ=dd.MM.yyyy"),Формат(Объект.ДатаОкончания, "ДФ=dd.MM.yyyy"), Объект.Администратор);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Инструменты") Тогда
		МассивИнструментов = ПолучитьИнструментыГруппы(ВыбранноеЗначение);
		Для Каждого ЭлМассива Из МассивИнструментов Цикл
			Стр = ИнструментыДинамическая.Добавить();
			Стр.Инструмент = ЭлМассива;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделение(Администратор)
	Возврат Администратор.Подразделение;
КонецФункции

&НаКлиенте
Процедура ДобавитьСуммуНачисленияЗавершение(Результат, ДопПараметры) Экспорт
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		РезЗаписи = Записать(Новый Структура("СуммыПроверены", Истина));
		Если РезЗаписи И ДопПараметры.Свойство("ЗаписатьиЗакрыть")
			 И ДопПараметры.ЗаписатьиЗакрыть Тогда
			 Закрыть();
		КонецЕсли;
	Иначе
		Строка = Объект.Оплаты.Добавить();
		Строка.Период = Объект.ДатаОкончания;
		Строка.СуммаНачисления =  ?(Объект.СуммаПоДоговоруБезУчетаНДС, Объект.СуммаПоДоговору, Окр(Объект.СуммаПоДоговору/(ПолучитьСтавкуНДС()+100)*100,2));
		Объект.СуммаНачисления = Строка.СуммаНачисления;
		РезЗаписи = Записать(Новый Структура("СуммыПроверены", Истина));
		Если РезЗаписи
			И ДопПараметры.Свойство("ЗаписатьиЗакрыть")
			 И ДопПараметры.ЗаписатьиЗакрыть Тогда
			 Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтавкуНДС()
	Возврат КЛАДОСлужебныйПовтИсп.СтавкаНДСОрганизации();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОрганизациюПроекта(Проект)
	Если ТипЗнч(Проект) = Тип("СправочникСсылка.Проекты") Тогда 
		Возврат Проект.Организация;
	КонецЕсли;
	Возврат Константы.ОрганизацияПоУмолчанию.Получить();
КонецФункции

&НаСервере
Функция СформироватьАдресТЗ(ИмяТаблицы)
	Возврат ПоместитьВоВременноеХранилище(Объект[ИмяТаблицы].Выгрузить());
КонецФункции

&НаСервере
Функция ЗагрузитьОплатыПоАдресу(АдресТЗ)
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	Объект.Оплаты.Загрузить(ТЗ);
КонецФункции

&НаСервере
Функция ЗагрузитьДоговорыПоАдресу(Результат)
	АдресТЗ = Результат.ТЗ;
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	Если НЕ Результат.РаспределятьОстаток Тогда
		Объект.Распределения.Очистить();
		СуммаРаспределения = Объект.СуммаНачисления;
		СуммаРаспределенияПоДоговору = Объект.СуммаПоДоговору;
		КоэффициентыИтог = 100;
	Иначе
		СуммаРаспределения = Объект.СуммаНачисления - Объект.Распределения.Итог("Сумма");
		СуммаРаспределенияПоДоговору = Объект.СуммаПоДоговору - Объект.Распределения.Итог("СуммаДоговора");
		КоэффициентыИтог = 100 - Объект.Распределения.Итог("Коэффициент");
	КонецЕсли;
	
	//удалим из отбора договоры, которые уже есть в таблице 
	МассивДоговоров = ОбщегоНазначения.ВыгрузитьКолонку(Объект.Распределения, "Договор", Истина);
	Для  ин = -(ТЗ.Количество()-1) По 0 Цикл
		Если МассивДоговоров.Найти(ТЗ[-ин].Договор) <> Неопределено тогда
			ТЗ.Удалить(-ин);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Результат.ВариантРаспределения = 4 Тогда
		СуммаИтог = ТЗ.Итог("Сумма");
		Для Каждого Строка ИЗ ТЗ Цикл
			СтрокаРаспределения = Объект.Распределения.Добавить();
			СтрокаРаспределения.Договор = Строка.Договор;
			Если СуммаИтог <> 0 Тогда
				СтрокаРаспределения.Коэффициент = Окр(Строка.Сумма / СуммаИтог * КоэффициентыИтог, 3);
				СтрокаРаспределения.Сумма = Окр(Строка.Сумма / СуммаИтог  * СуммаРаспределения, 2);
				СтрокаРаспределения.СуммаДоговора = Окр(Строка.Сумма / СуммаИтог  * СуммаРаспределенияПоДоговору, 2);
				СтрокаРаспределения.СуммаРаспределения = Строка.Сумма;
			КонецЕсли;
			//СтрокаРаспределения.Сумма = Окр(Строка.Сумма / СуммаИтог * СуммаРаспределения, 2);
		КонецЦикла;
		Если СуммаИтог <> 0 И СтрокаРаспределения <> Неопределено Тогда
			СтрокаРаспределения.Сумма = СтрокаРаспределения.Сумма + (Объект.СуммаНачисления - Объект.Распределения.Итог("Сумма"));
			СтрокаРаспределения.СуммаДоговора = СтрокаРаспределения.СуммаДоговора + (Объект.СуммаПоДоговору - Объект.Распределения.Итог("СуммаДоговора"));
		КонецЕсли;
		Если КоэффициентыИтог <> 0 И СтрокаРаспределения <> Неопределено Тогда
			СтрокаРаспределения.Коэффициент = СтрокаРаспределения.Коэффициент + (100 - Объект.Распределения.Итог("Коэффициент"));
		КонецЕсли;
	Иначе
		Для Каждого Строка ИЗ ТЗ Цикл
			СтрокаРаспределения = Объект.Распределения.Добавить();
			СтрокаРаспределения.Договор = Строка.Договор;
			СтрокаРаспределения.Коэффициент = Окр(Строка.Коэффициент * 100, 3);
			СтрокаРаспределения.Сумма = Окр(Строка.Коэффициент * СуммаРаспределения, 2);
			СтрокаРаспределения.СуммаДоговора = Окр(Строка.Коэффициент * СуммаРаспределенияПоДоговору, 2);
		КонецЦикла;
		Если Объект.Распределения.Итог("Коэффициент") = 100 
			И Объект.Распределения.Итог("Сумма") <> 0 И СтрокаРаспределения <> Неопределено Тогда
			СтрокаРаспределения.Сумма = СтрокаРаспределения.Сумма + (СуммаРаспределения - Объект.Распределения.Итог("Сумма"));
			СтрокаРаспределения.СуммаДоговора = СтрокаРаспределения.СуммаДоговора + (СуммаРаспределенияПоДоговору - Объект.Распределения.Итог("СуммаДоговора"));
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПодчиненныеДоговоры(СтруктураВозврата, ДоговорОснование)
	
	СтруктураВозврата = Новый Структура("СуммаПланПодчиненная, СуммаПоДоговоруПодчиненная, СуммаНачисленияПодчиненная, СуммаДоговораПодчиненная");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(Договоры.СуммаПлан) КАК СуммаПланПодчиненная,
		|	СУММА(Договоры.СуммаПоДоговору) КАК СуммаПоДоговоруПодчиненная,
		|	СУММА(Договоры.СуммаНачисления) КАК СуммаНачисленияПодчиненная,
		|	СУММА(Договоры.СуммаДоговора) КАК СуммаДоговораПодчиненная
		|ИЗ
		|	Справочник.Договоры КАК Договоры
		|ГДЕ
		|	Договоры.ДоговорОснование = &ДоговорОснование
		|
		|ИМЕЮЩИЕ
		|	НЕ СУММА(Договоры.СуммаПлан) ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("ДоговорОснование", ДоговорОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, ВыборкаДетальныеЗаписи, );
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРеквизитДоговора(Ссылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции

&НаСервере
Функция ЗагрузитьСуммыПоДоговоруПоПериодуПоАдресу(АдресТЗ)
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	Объект.СуммыПоДоговоруПоПериоду.Загрузить(ТЗ);
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоРесурсовНаСервере()
	
	ДеревоРесурсыЗначение = РеквизитФормыВЗначение("ДеревоРесурсы");
	
	ДеревоРесурсыЗначение.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкаНаРесурсыПерсонал.Должность КАК Ресурс,
	|	НЕОПРЕДЕЛЕНО КАК Ресурс2,
	|	ЗаявкаНаРесурсыПерсонал.КоличествоСтавок КАК Показатель1,
	|	ЗаявкаНаРесурсыПерсонал.КоличествоЧасов КАК Показатель2,
	|	ЗаявкаНаРесурсыПерсонал.Ссылка КАК ЗаявкаНаРесурсы,
	|	""Персонал"" КАК ВидРесурса,
	|	ЗаявкаНаРесурсыПерсонал.Цена КАК Цена,
	|	ЗаявкаНаРесурсыПерсонал.Сумма КАК Сумма
	|ИЗ
	|	Документ.ЗаявкаНаРесурсы.Персонал КАК ЗаявкаНаРесурсыПерсонал
	|ГДЕ
	|	ЗаявкаНаРесурсыПерсонал.Ссылка.Проведен
	|	И ЗаявкаНаРесурсыПерсонал.Ссылка.Договор = &Договор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРесурсыДеньги.Контрагент,
	|	ЗаявкаНаРесурсыДеньги.Договор,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаявкаНаРесурсыДеньги.Ссылка,
	|	""Деньги"",
	|	0,
	|	ЗаявкаНаРесурсыДеньги.Сумма
	|ИЗ
	|	Документ.ЗаявкаНаРесурсы.Деньги КАК ЗаявкаНаРесурсыДеньги
	|ГДЕ
	|	ЗаявкаНаРесурсыДеньги.Ссылка.Проведен
	|	И ЗаявкаНаРесурсыДеньги.Ссылка.Договор = &Договор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРесурсыИнструменты.Инструмент,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаявкаНаРесурсыИнструменты.КоличествоЧасов,
	|	ЗаявкаНаРесурсыИнструменты.Ссылка,
	|	""Инструменты"",
	|	ЗаявкаНаРесурсыИнструменты.Цена,
	|	ЗаявкаНаРесурсыИнструменты.Сумма
	|ИЗ
	|	Документ.ЗаявкаНаРесурсы.Инструменты КАК ЗаявкаНаРесурсыИнструменты
	|ГДЕ
	|	ЗаявкаНаРесурсыИнструменты.Ссылка.Проведен
	|	И ЗаявкаНаРесурсыИнструменты.Ссылка.Договор = &Договор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРесурсыМатериалы.Материал,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаявкаНаРесурсыМатериалы.Количество,
	|	ЗаявкаНаРесурсыМатериалы.Ссылка,
	|	""Материалы"",
	|	ЗаявкаНаРесурсыМатериалы.Цена,
	|	ЗаявкаНаРесурсыМатериалы.Сумма
	|ИЗ
	|	Документ.ЗаявкаНаРесурсы.Материалы КАК ЗаявкаНаРесурсыМатериалы
	|ГДЕ
	|	ЗаявкаНаРесурсыМатериалы.Ссылка.Проведен
	|	И ЗаявкаНаРесурсыМатериалы.Ссылка.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		ЗначениеВРеквизитФормы(ДеревоРесурсыЗначение,"ДеревоРесурсы");
		Возврат	
	КонецЕсли;
	
	СтрокаПерсонал				= ДеревоРесурсыЗначение.Строки.Добавить();
	СтрокаПерсонал.Ресурс		= "Персонал";
	СтрокаДеньги				= ДеревоРесурсыЗначение.Строки.Добавить();
	СтрокаДеньги.Ресурс			= "Деньги";
	СтрокаИнструменты			= ДеревоРесурсыЗначение.Строки.Добавить();
	СтрокаИнструменты.Ресурс	= "Инструменты";
	СтрокаМатериалы				= ДеревоРесурсыЗначение.Строки.Добавить();
	СтрокаМатериалы.Ресурс		= "Материалы";
	
	ПерсоналИтогоКоличествоСтавок	= 0;
	ПерсоналИтогоКоличествоЧасов	= 0;
	ДеньгиИтогоСумма				= 0;
	ИнструментыИтогоКоличествоЧасов	= 0;
	МатериалыИтогоКоличество		= 0;
	ПерсоналИтогоСумма				= 0;
	ИнструментыИтогоСумма			= 0;
	МатериалыИтогоСумма				= 0;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Если ВыборкаДетальныеЗаписи.ВидРесурса = "Персонал" Тогда 
			СтрДерева = СтрокаПерсонал.Строки.Добавить();
			ПерсоналИтогоКоличествоСтавок	= ПерсоналИтогоКоличествоСтавок + ВыборкаДетальныеЗаписи.Показатель1;
			ПерсоналИтогоКоличествоЧасов	= ПерсоналИтогоКоличествоЧасов + ВыборкаДетальныеЗаписи.Показатель2;
			ПерсоналИтогоСумма				= ПерсоналИтогоСумма + ВыборкаДетальныеЗаписи.Сумма;
		ИначеЕсли ВыборкаДетальныеЗаписи.ВидРесурса = "Деньги" Тогда 
			СтрДерева = СтрокаДеньги.Строки.Добавить();
			ДеньгиИтогоСумма	= ДеньгиИтогоСумма + ВыборкаДетальныеЗаписи.Сумма;
		ИначеЕсли ВыборкаДетальныеЗаписи.ВидРесурса = "Инструменты" Тогда 
			СтрДерева = СтрокаИнструменты.Строки.Добавить();
			ИнструментыИтогоКоличествоЧасов	= ИнструментыИтогоКоличествоЧасов + ВыборкаДетальныеЗаписи.Показатель2;
			ИнструментыИтогоСумма			= ИнструментыИтогоСумма + ВыборкаДетальныеЗаписи.Сумма;
		ИначеЕсли ВыборкаДетальныеЗаписи.ВидРесурса = "Материалы" Тогда 
			СтрДерева = СтрокаМатериалы.Строки.Добавить();
			МатериалыИтогоКоличество	= МатериалыИтогоКоличество + ВыборкаДетальныеЗаписи.Показатель2; 
			МатериалыИтогоСумма			= МатериалыИтогоСумма + ВыборкаДетальныеЗаписи.Сумма;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрДерева, ВыборкаДетальныеЗаписи);
		
	КонецЦикла;
	
	СтрокаПерсонал.Показатель1		= ПерсоналИтогоКоличествоСтавок; 
	СтрокаПерсонал.Показатель2		= ПерсоналИтогоКоличествоЧасов;
	СтрокаПерсонал.Сумма			= ПерсоналИтогоСумма;
	СтрокаДеньги.Сумма				= ДеньгиИтогоСумма;
	СтрокаИнструменты.Показатель2	= ИнструментыИтогоКоличествоЧасов;
	СтрокаИнструменты.Сумма			= ИнструментыИтогоСумма;
	СтрокаМатериалы.Показатель2		= МатериалыИтогоКоличество;
	СтрокаМатериалы.Сумма			= МатериалыИтогоСумма;
	
	ЗначениеВРеквизитФормы(ДеревоРесурсыЗначение,"ДеревоРесурсы");
	
	Элементы.ДеревоРесурсыСумма.ТекстПодвала = Формат(ПерсоналИтогоСумма+ДеньгиИтогоСумма+ИнструментыИтогоСумма+МатериалыИтогоСумма,"ЧЦ=15; ЧДЦ=2");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммыВРаспределении()
	Для Каждого Стр Из Объект.Распределения Цикл 
		Если Не ЗначениеЗаполнено(Стр.СуммаРаспределения) И Не Стр.ВведеноВручную Тогда 
			Стр.СуммаРаспределения = ПолучитьРеквизитДоговора(Стр.Договор, "СуммаПоДоговору");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуОплаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(ЗатратыИзУчетнойСистемыОбороты.СуммаЗатратОборот, 0)) КАК СуммаЗатратОборот
		|ИЗ
		|	РегистрСведений.СоответствиеДоговоров КАК СоответствиеДоговоров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗатратыИзУчетнойСистемы.Обороты(, , , ) КАК ЗатратыИзУчетнойСистемыОбороты
		|		ПО СоответствиеДоговоров.ДоговорИзУчетнойСистемы = ЗатратыИзУчетнойСистемыОбороты.ДоговорИзУчетнойСистемы
		|ГДЕ
		|	СоответствиеДоговоров.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект.СуммаОплаты= ВыборкаДетальныеЗаписи.СуммаЗатратОборот;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСуммуНачисления()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(НачисленияИзУчетнойСистемыОбороты.СуммаОборот, 0)) КАК СуммаОборот
		|ИЗ
		|	РегистрСведений.СоответствиеДоговоров КАК СоответствиеДоговоров
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НачисленияИзУчетнойСистемы.Обороты(, , , ) КАК НачисленияИзУчетнойСистемыОбороты
		|		ПО СоответствиеДоговоров.ДоговорИзУчетнойСистемы = НачисленияИзУчетнойСистемыОбороты.ДоговорИзУчетнойСистемы
		|ГДЕ
		|	СоответствиеДоговоров.Договор = &Договор";
	
	Запрос.УстановитьПараметр("Договор", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект.СуммаНачисленийИзУС = ВыборкаДетальныеЗаписи.СуммаОборот;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуНаРесурс(Организация, Сценарий, Ресурс, ДатаРасчета = Неопределено, ВидЦеныПерсонала = "Цена", СтатьяЗатрат = Неопределено)  
	
	Если Не ЗначениеЗаполнено(ДатаРасчета) Тогда 
		ДатаРасчета = ТекущаяДата();	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПлановыеЦеныНаРесурсыСрезПоследних.Цена КАК Цена
		|ИЗ
		|	РегистрСведений.ПлановыеЦеныНаРесурсы.СрезПоследних(
		|			&ДатаРасчета,
		|			Организация = &Организация
		|				И Ресурс = &Ресурс
		|				И Сценарий = &Сценарий
		|				И (СтатьяЗатрат = &СтатьяЗатрат
		|					ИЛИ &СтатьяЗатрат = НЕОПРЕДЕЛЕНО)) КАК ПлановыеЦеныНаРесурсыСрезПоследних";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,".Цена","."+ВидЦеныПерсонала);
	
	Запрос.УстановитьПараметр("ДатаРасчета",	ДатаРасчета);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Если ТипЗнч(Ресурс) = Тип("СправочникСсылка.Персонал") Тогда 
		Запрос.УстановитьПараметр("Ресурс",		Ресурс.Должность);
	Иначе 
		Запрос.УстановитьПараметр("Ресурс",		Ресурс);
	КонецЕсли;
	Запрос.УстановитьПараметр("Сценарий",		Сценарий);
	Запрос.УстановитьПараметр("СтатьяЗатрат",	СтатьяЗатрат);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Цена
	КонецЦикла;
	
	Возврат 0

КонецФункции

&НаКлиенте
Процедура ПересчитатьЦены()
	
	Если Объект.Персонал.Количество() = 0 И Объект.Материалы.Количество() = 0 И Объект.Инструменты.Количество() = 0 Тогда 
		Возврат	
	КонецЕсли;
	
	Ответ = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьЦеныЗавершение", ЭтотОбъект), "Изменилась организация и/или сценарий. Пересчитать цены?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьЦеныЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПересчитатьЦеныНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	СценарийПоУмолчанию = Константы.СценарийПоУмолчанию.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого Стр Из Объект.Персонал Цикл
		Стр.Цена = ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Должность, ТекущаяДата());
		Стр.Сумма = Стр.Цена * Стр.КоличествоСтавок * Стр.КоличествоМесяцев;
	КонецЦикла;
	
	Если Объект.Сценарий <> СценарийПоУмолчанию Тогда
		Для Каждого Стр Из Объект.Материалы Цикл
			Стр.Цена = ПолучитьЦенуНаРесурс(Объект.Организация,Объект.Сценарий, Стр.Материал, ТекущаяДата());
			Стр.Сумма = Стр.Цена * Стр.Количество;
		КонецЦикла;
	КонецЕсли; 
		
	Для Каждого Стр Из Объект.Инструменты Цикл
		Стр.Цена = ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Инструмент, ТекущаяДата());
		Стр.Сумма = Стр.Цена * Стр.КоличествоЧасов;
	КонецЦикла;
	
	Для Каждого Стр Из ПерсоналДинамическая Цикл
		Стр.Цена	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Должность, ТекущаяДата(),,Стр.СтатьяЗатрат);
	КонецЦикла;
	
	Для Каждого Стр Из ИнструментыДинамическая Цикл
		Стр.Цена	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Инструмент, ТекущаяДата());
		Стр.ЦенаПрошлогоПериода	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Инструмент, ТекущаяДата(),"ЦенаПрошлогоПериода");
		Стр.ЦенаПрошлогоПериодаСоСтатьей103	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Инструмент, ТекущаяДата(),"ЦенаПрошлогоПериодаСоСтатьей103");
		Стр.ЦенаПрошлогоПериодаСоцПакет	= ПолучитьЦенуНаРесурс(Объект.Организация, Объект.Сценарий, Стр.Инструмент, ТекущаяДата(),"ЦенаПрошлогоПериодаСоцПакет");
	КонецЦикла;
	
	ЗаполнитьДоступныеЧасыПерсонала();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТолькоЗаполнениеРесурсов()
	Возврат РольДоступна("КЛАДО_ТолькоЗаполнениеРесурсов")
КонецФункции

&НаСервереБезКонтекста
Процедура ВывестиСКДВТабличныйДокумент(ТабличныйДокумент, Договор, ПериодВыгрузки) 
	
	МакетСКД = Справочники.Договоры.ПолучитьМакет("СхемаКомпоновкиДанныхВыгрузкаЗадач");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);		
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();  
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Настройки.Отбор.Элементы.Очистить();
	
	Отбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Владелец");
	Отбор.ПравоеЗначение = Договор;
	
	Отбор1 = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаНачала");
	Отбор1.ПравоеЗначение = ПериодВыгрузки.ДатаОкончания;
	Отбор1.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	
	Отбор2 = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОкончания");
	Отбор2.ПравоеЗначение = ПериодВыгрузки.ДатаНачала;
	Отбор2.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(МакетСКД, Настройки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУровеньЗадачи(Задача)
	Возврат Задача.КодовоеНаименование
Конецфункции

&НаСервереБезКонтекста
Функция УжеИспользованоЧасов(Должность, ЭтотДоговор, ДатаНачала, ДатаОкончания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ДоговорыПерсонал.КоличествоЧасовВДень) КАК КоличествоЧасовВДень
		|ИЗ
		|	Справочник.Договоры.Персонал КАК ДоговорыПерсонал
		|ГДЕ
		|	ДоговорыПерсонал.Ссылка <> &Ссылка
		|	И ДоговорыПерсонал.Ссылка.ДатаНачала = &ДатаНачала
		|	И ДоговорыПерсонал.Ссылка.ДатаОкончания = &ДатаОкончания
		|	И ДоговорыПерсонал.Должность = &Должность";
	
	Запрос.УстановитьПараметр("ДатаНачала", 	ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ДатаОкончания);
	Запрос.УстановитьПараметр("Ссылка", 		ЭтотДоговор);
	Запрос.УстановитьПараметр("Должность", 		Должность);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ?(ТипЗнч(ВыборкаДетальныеЗаписи.КоличествоЧасовВДень) = Тип("Число"),ВыборкаДетальныеЗаписи.КоличествоЧасовВДень,0);
	КонецЦикла;
	
	Возврат 0
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДоступныеЧасыПерсонала()
	
	СписокПерсонала = Новый Массив;
	Для Каждого Стр Из ПерсоналДинамическая Цикл
		СписокПерсонала.Добавить(Стр.Должность);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчетВремениПерсоналаОстаткиИОбороты.Должность КАК Должность,
		|	УчетВремениПерсоналаОстаткиИОбороты.Месяц КАК Месяц,
		|	УчетВремениПерсоналаОстаткиИОбороты.КоличествоЧасовПриход КАК КоличествоЧасовПриход,
		|	УчетВремениПерсоналаОстаткиИОбороты.КоличествоЧасовРасход КАК КоличествоЧасовРасход,
		|	УчетВремениПерсоналаОстаткиИОбороты.КоличествоЧасовКонечныйОстаток КАК КоличествоЧасовКонечныйОстаток
		|ИЗ
		|	РегистрНакопления.УчетВремениПерсонала.ОстаткиИОбороты(
		|			,
		|			,
		|			,
		|			,
		|			НЕ Договор = &ТекДоговор
		|				И Должность В (&СписокПерсонала)) КАК УчетВремениПерсоналаОстаткиИОбороты";
	
	Запрос.УстановитьПараметр("СписокПерсонала", СписокПерсонала);
	Запрос.УстановитьПараметр("ТекДоговор", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Должность", ВыборкаДетальныеЗаписи.Должность);
		СтрокиПерсонала = ПерсоналДинамическая.НайтиСтроки(ПараметрыОтбора);
		Для Каждого СтрПерсонал Из СтрокиПерсонала Цикл
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Месяц", ВыборкаДетальныеЗаписи.Месяц);
			СтрокиСоответствия = СоответствиеПериодовНазванийКолонок.НайтиСтроки(ПараметрыОтбора);
			Для Каждого СтрСоответствия Из СтрокиСоответствия Цикл
				СтрПерсонал[СтрСоответствия.ИмяКолонкиИспользовано] = Формат(ВыборкаДетальныеЗаписи.КоличествоЧасовРасход,"ЧН=0; ЧГ=") + "/" + Формат(ВыборкаДетальныеЗаписи.КоличествоЧасовПриход,"ЧН=0; ЧГ=");
				Если ВыборкаДетальныеЗаписи.КоличествоЧасовРасход = 0 Тогда
					Если СтрПерсонал[СтрСоответствия.ИмяКолонки] <> 0 Тогда 
						СтрПерсонал[СтрСоответствия.ИмяКолонкиСумма]	= СтрПерсонал.Цена;
						СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериод]	= СтрПерсонал.ЦенаПрошлогоПериода;
						СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериод103]	= СтрПерсонал.ЦенаПрошлогоПериодаСоСтатьей103;
						СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериодСоцПакет]	= СтрПерсонал.ЦенаПрошлогоПериодаСоцПакет;
					Иначе 
						СтрПерсонал[СтрСоответствия.ИмяКолонкиСумма]	= 0;
						СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериод]	= 0;
						СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериод103]	= 0;
						СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериодСоцПакет]	= 0; 
					КонецЕсли;
				Иначе
					Если ВыборкаДетальныеЗаписи.КоличествоЧасовРасход + СтрПерсонал[СтрСоответствия.ИмяКолонки] >= ВыборкаДетальныеЗаписи.КоличествоЧасовПриход Тогда  
						
						КоличествоЧасовДляРасчета = ВыборкаДетальныеЗаписи.КоличествоЧасовПриход - ВыборкаДетальныеЗаписи.КоличествоЧасовРасход;
						Если КоличествоЧасовДляРасчета < 0 Тогда 
							КоличествоЧасовДляРасчета  = 0;
						КонецЕсли;
						
						СтрПерсонал[СтрСоответствия.ИмяКолонкиСумма]	 = СтрПерсонал.Цена * КоличествоЧасовДляРасчета /(?(ВыборкаДетальныеЗаписи.КоличествоЧасовПриход = 0,8,ВыборкаДетальныеЗаписи.КоличествоЧасовПриход));
						СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериод]	 = СтрПерсонал.ЦенаПрошлогоПериода * КоличествоЧасовДляРасчета /(?(ВыборкаДетальныеЗаписи.КоличествоЧасовПриход = 0,8,ВыборкаДетальныеЗаписи.КоличествоЧасовПриход));
						СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериод103]	 = СтрПерсонал.ЦенаПрошлогоПериодаСоСтатьей103 * КоличествоЧасовДляРасчета /(?(ВыборкаДетальныеЗаписи.КоличествоЧасовПриход = 0,8,ВыборкаДетальныеЗаписи.КоличествоЧасовПриход));
						СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериодСоцПакет]	 = СтрПерсонал.ЦенаПрошлогоПериодаСоцПакет * КоличествоЧасовДляРасчета /(?(ВыборкаДетальныеЗаписи.КоличествоЧасовПриход = 0,8,ВыборкаДетальныеЗаписи.КоличествоЧасовПриход));
					Иначе
						Если ЭтоПервыйДоговор(Объект.Ссылка, ВыборкаДетальныеЗаписи.Месяц, СтрПерсонал.Должность) И СтрПерсонал[СтрСоответствия.ИмяКолонки] <> 0 Тогда
							СтрПерсонал[СтрСоответствия.ИмяКолонкиСумма]	 = СтрПерсонал.Цена * (ВыборкаДетальныеЗаписи.КоличествоЧасовПриход-ВыборкаДетальныеЗаписи.КоличествоЧасовРасход) /(?(ВыборкаДетальныеЗаписи.КоличествоЧасовПриход = 0,8,ВыборкаДетальныеЗаписи.КоличествоЧасовПриход));
							СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериод]	 = СтрПерсонал.ЦенаПрошлогоПериода * (ВыборкаДетальныеЗаписи.КоличествоЧасовПриход-ВыборкаДетальныеЗаписи.КоличествоЧасовРасход) /(?(ВыборкаДетальныеЗаписи.КоличествоЧасовПриход = 0,8,ВыборкаДетальныеЗаписи.КоличествоЧасовПриход));
							СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериод103]	 = СтрПерсонал.ЦенаПрошлогоПериодаСоСтатьей103 * (ВыборкаДетальныеЗаписи.КоличествоЧасовПриход-ВыборкаДетальныеЗаписи.КоличествоЧасовРасход) /(?(ВыборкаДетальныеЗаписи.КоличествоЧасовПриход = 0,8,ВыборкаДетальныеЗаписи.КоличествоЧасовПриход));
							СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериодСоцПакет]	 = СтрПерсонал.ЦенаПрошлогоПериодаСоцПакет * (ВыборкаДетальныеЗаписи.КоличествоЧасовПриход-ВыборкаДетальныеЗаписи.КоличествоЧасовРасход) /(?(ВыборкаДетальныеЗаписи.КоличествоЧасовПриход = 0,8,ВыборкаДетальныеЗаписи.КоличествоЧасовПриход));
						Иначе
							СтрПерсонал[СтрСоответствия.ИмяКолонкиСумма]	 = СтрПерсонал.Цена * СтрПерсонал[СтрСоответствия.ИмяКолонки] /(?(ВыборкаДетальныеЗаписи.КоличествоЧасовПриход = 0,8,ВыборкаДетальныеЗаписи.КоличествоЧасовПриход));
							СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериод]	 = СтрПерсонал.ЦенаПрошлогоПериода * СтрПерсонал[СтрСоответствия.ИмяКолонки] /(?(ВыборкаДетальныеЗаписи.КоличествоЧасовПриход = 0,8,ВыборкаДетальныеЗаписи.КоличествоЧасовПриход));
							СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериод103]	 = СтрПерсонал.ЦенаПрошлогоПериодаСоСтатьей103 * СтрПерсонал[СтрСоответствия.ИмяКолонки] /(?(ВыборкаДетальныеЗаписи.КоличествоЧасовПриход = 0,8,ВыборкаДетальныеЗаписи.КоличествоЧасовПриход));
							СтрПерсонал[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериодСоцПакет]	 = СтрПерсонал.ЦенаПрошлогоПериодаСоцПакет * СтрПерсонал[СтрСоответствия.ИмяКолонки] /(?(ВыборкаДетальныеЗаписи.КоличествоЧасовПриход = 0,8,ВыборкаДетальныеЗаписи.КоличествоЧасовПриход));
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ОбщаяСуммаПерсонал = 0;
	
	Для Каждого Стр Из ПерсоналДинамическая Цикл
		Стр.Сумма = 0;
		Стр.СуммаПрошлогоПериода = 0;
		Стр.СуммаПрошлогоПериодаСоСтатьей103 = 0;
		Стр.СуммаПрошлогоПериодаСоцПакет = 0;
		Для Каждого СтрСоответствия Из СоответствиеПериодовНазванийКолонок Цикл
			Стр.Сумма = Стр.Сумма + Стр[СтрСоответствия.ИмяКолонкиСумма];
			Стр.СуммаПрошлогоПериода = Стр.СуммаПрошлогоПериода + Стр[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериод];
			Стр.СуммаПрошлогоПериодаСоСтатьей103 = Стр.СуммаПрошлогоПериодаСоСтатьей103 + Стр[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериод103];
			Стр.СуммаПрошлогоПериодаСоцПакет = Стр.СуммаПрошлогоПериодаСоцПакет + Стр[СтрСоответствия.ИмяКолонкиСуммаПрошлыйПериодСоцПакет];
		КонецЦикла;
		ОбщаяСуммаПерсонал = ОбщаяСуммаПерсонал + Стр.Сумма;
	КонецЦикла;
	
	Элементы.ПерсоналДинамическаяСумма.ТекстПодвала = Формат(ОбщаяСуммаПерсонал,"ЧДЦ=2");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоПервыйДоговор(СсылкаНаДоговор, Месяц, Должность)
	
	Если НЕ ЗначениеЗаполнено(СсылкаНаДоговор) Тогда 
		Возврат Ложь;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СписаниеВремениПерсоналаВремя.Ссылка.Договор КАК Договор,
	|	СписаниеВремениПерсоналаВремя.Месяц КАК Месяц,
	|	СписаниеВремениПерсоналаВремя.Должность КАК Должность
	|ИЗ
	|	Документ.СписаниеВремениПерсонала.Время КАК СписаниеВремениПерсоналаВремя
	|ГДЕ
	|	СписаниеВремениПерсоналаВремя.Месяц = &Месяц
	|	И СписаниеВремениПерсоналаВремя.Должность = &Должность
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписаниеВремениПерсоналаВремя.Ссылка.Дата";
	
	Запрос.УстановитьПараметр("Должность", Должность);
	Запрос.УстановитьПараметр("Месяц", Месяц);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Договор = СсылкаНаДоговор Тогда 
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеЗадачи(ВыбраннаяЗадача)
	Возврат ВыбраннаяЗадача.Наименование;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверкаНаИспользованиеВВыходные()
	Возврат НЕ Константы.РазрешитьИспользованиеИнструментовВВыходныеИПраздники.Получить();
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоВыходной(ДатаПроверки)
	
	ЭтоВыходной = Ложь;
	
	СписокРабочихВидов = Новый СписокЗначений;
	СписокРабочихВидов.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Рабочий);
	СписокРабочихВидов.Добавить(Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ВидДня КАК ВидДня
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|ГДЕ
		|	ДанныеПроизводственногоКалендаря.Дата = &Дата
		|	И ДанныеПроизводственногоКалендаря.ВидДня В(&СписокРабочихВидов)";
	
	Запрос.УстановитьПараметр("Дата", ДатаПроверки);
	Запрос.УстановитьПараметр("СписокРабочихВидов", СписокРабочихВидов);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда 
		ЭтоВыходной = Истина;
	КонецЕсли;
	
	Возврат ЭтоВыходной;
	
КонецФункции

&НаСервере
Функция УстановитьПользовательскиеНастройкиОтчета(ТипОтчета,СтруктураПараметров)
    СтруктураНастроек = Новый Структура;
    ОтчетОбъект = Отчеты[ТипОтчета].Создать();
    
    ПользовательскиеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
    Для Каждого ЭлПараметр  Из СтруктураПараметров Цикл
        Для Каждого ПараметрСКД Из ПользовательскиеНастройки.Элементы Цикл
            Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда  
                Если строка(ПараметрСКД.Параметр) = ЭлПараметр.Ключ Тогда 
                    ПараметрСКД.Значение = ЭлПараметр.Значение;
                    ПараметрСКД.Использование = Истина;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;    
    КонецЦикла;
        
    Возврат ПользовательскиеНастройки;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивСвязанныхСтатей(ТекСтатьяЗатрат)
	
	МассивСтатей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиЗатратЗависимыеСтатьиЗатрат.СтатьяЗатрат КАК СтатьяЗатрат
		|ИЗ
		|	Справочник.СтатьиЗатрат.ЗависимыеСтатьиЗатрат КАК СтатьиЗатратЗависимыеСтатьиЗатрат
		|ГДЕ
		|	СтатьиЗатратЗависимыеСтатьиЗатрат.Ссылка = &Ссылка
		|	И НЕ СтатьиЗатратЗависимыеСтатьиЗатрат.СтатьяЗатрат.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Ссылка", ТекСтатьяЗатрат);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивСтатей.Добавить(ВыборкаДетальныеЗаписи.СтатьяЗатрат);
	КонецЦикла;
	
	Возврат МассивСтатей;
	
КонецФункции

&НаСервере
Процедура ОбработатьИспользованиеВОпределенныеМесяцы()
	Для Каждого Стр Из ПерсоналДинамическая Цикл
		СтатьяЗатратСтроки = Стр.СтатьяЗатрат;
		Если СтатьяЗатратСтроки.ИспользуетсяТолькоВОпределенныеМесяцы Тогда 
			МесяцыИспользования = СтатьяЗатратСтроки.МесяцыИспользования.ВыгрузитьКолонку("Месяц");
			Для Каждого СтрКолонка Из СоответствиеПериодовНазванийКолонок Цикл
				Если МесяцыИспользования.Найти(Месяц(СтрКолонка.Месяц)) = Неопределено Тогда 
					Стр[СтрКолонка.ИмяКолонки] = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбработатьИспользованиеПоПолам()
	Для Каждого Стр Из ПерсоналДинамическая Цикл
		СтатьяЗатратСтроки = Стр.СтатьяЗатрат;
		Если СтатьяЗатратСтроки.ИспользуетсяТолькоДляПерсоналаОдногоПола 
			И СтатьяЗатратСтроки.Пол <> Стр.Должность.Пол Тогда 
			Для Каждого СтрКолонка Из СоответствиеПериодовНазванийКолонок Цикл
				Стр[СтрКолонка.ИмяКолонки] = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ИзменениеРеквизитов

&НаСервере
Процедура ПолучитьИзмененныеРеквизиты()
	ИзменениеРеквизитовСервер.ПолучитьИзмененныеРеквизиты(РеквизитФормыВЗначение("Объект"), Объект, ИзмененияРеквизитов);
КонецПроцедуры

&НаСервере
Функция ПоместитьИзмененияВХранилище(Знач ИзмененияРеквизитов)
	Возврат ПоместитьВоВременноеХранилище(ИзмененияРеквизитов.Выгрузить(), УникальныйИдентификатор);
КонецФункции

&НаСервере
Функция ЗагрузитьТаблицуИзменений(Адрес)
	ИзмененияРеквизитов.Загрузить(ПолучитьИзВременногоХранилища(Адрес));
КонецФункции

&НаСервере
Процедура УстановитьВидимостьМТО()
	
	Элементы.ГруппаМТО.Видимость = Объект.ТипДоговора = Перечисления.ТипыДоговоров.ДТ2;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьТОИР()
	
	//ДоступныеТипы = Новый Массив;
	//ДоступныеТипы.Добавить(Перечисления.ТипыДоговоров.ДТ1);
	//ДоступныеТипы.Добавить(Перечисления.ТипыДоговоров.ДТ2);
	//ДоступныеТипы.Добавить(Перечисления.ТипыДоговоров.ДТ4);
	//
	//Элементы.ГруппаТОИР.Видимость = ДоступныеТипы.Найти(Объект.ТипДоговора) <> Неопределено;
	
	Элементы.ГруппаТОИР.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыМТОКоличествоПриИзменении(Элемент)
	
	ПересчитатьСтрокуМТО();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыМТОЦенаПриИзменении(Элемент)
	
	ПересчитатьСтрокуМТО();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыМТОСуммаПриИзменении(Элемент)
	
	ПересчитатьСтрокуМТО();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСтрокуМТО()
	
	ТекСтрокаМТО = Элементы.МатериалыМТО.ТекущиеДанные;
	
	ТекСтрокаМТО.Сумма = ТекСтрокаМТО.Количество * ТекСтрокаМТО.Цена;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзЗадач(Команда)
	
	Если Объект.Материалы.Количество() Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВопросаОчиститьМатериалы", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, "Таблица материалов будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет); 
		Возврат;
	КонецЕсли; 
		
	ЗаполнитьИзЗадачНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОчиститьМатериалы(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если Не ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Материалы.Очистить();
	
	ЗаполнитьИзЗадачНаСервере();
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьИзЗадачНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачиМатериалы.Материал КАК Материал,
	|	ЗадачиМатериалы.Количество КАК Количество,
	|	ЗадачиМатериалы.Цена КАК Цена,
	|	ЗадачиМатериалы.Сумма КАК Сумма,
	|	ЗадачиМатериалы.ДатаПотребности КАК ДатаПотребности
	|ИЗ
	|	Справочник.Задачи.Материалы КАК ЗадачиМатериалы
	|ГДЕ
	|	ЗадачиМатериалы.Ссылка.Владелец = &Владелец
	|	И ЗадачиМатериалы.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Владелец", Объект.Ссылка);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Объект.Материалы.Загрузить(РезультатЗапроса);
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти








 
