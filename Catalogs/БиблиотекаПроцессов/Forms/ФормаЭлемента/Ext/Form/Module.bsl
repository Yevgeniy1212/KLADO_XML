
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьОтборыДерева();
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
		МодульПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
		МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьДоступность();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	МодульПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	МодульПодключаемыеКомандыКлиентСервер = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиентСервер");
	МодульПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


&НаСервере
Процедура ЗаполнитьОтборыДерева()
	
	Элементы.ЗадачиЗаказчика.Отображение = ОтображениеТаблицы.Дерево;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона1, "СторонаЗадачи", 1);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона1, "ЭтапДоговора", ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Формирование"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона1, "Владелец", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	
	Элементы.ЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Дерево;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона2, "СторонаЗадачи", 2);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона2, "ЭтапДоговора", ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Формирование"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ФДеревоЗадачиСторона2, "Владелец", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	
	Элементы.ИЗадачиЗаказчика.Отображение = ОтображениеТаблицы.Дерево;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона1, "СторонаЗадачи", 1);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона1, "ЭтапДоговора", ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Исполнение"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона1, "Владелец", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	
	Элементы.ИЗадачиИсполнителя.Отображение = ОтображениеТаблицы.Дерево;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона2, "СторонаЗадачи", 2);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона2, "ЭтапДоговора", ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Исполнение"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ИДеревоЗадачиСторона2, "Владелец", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, Неопределено));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиИсполнителяПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Объект.Ссылка.Пустая() Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачиПередНачаломДобавленияЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Перед добавлением задач необходимо записать договор. 
										|Записать?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередНачаломДобавленияЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да тогда
		Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуЗаказчика(Команда)
	ТекущиеДанные = Элементы.ЗадачиЗаказчика.ТекущиеДанные;
	Родитель = Неопределено;
	Если НЕ ТекущиеДанные = Неопределено тогда
		Родитель = ТекущиеДанные.Ссылка;
	КонецЕсли;
	СоздатьЗадачу(1, ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Формирование"), Родитель, 1);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуЗавершение(Результат, ДопПараметры) Экспорт
	Если ДопПараметры = 1 Тогда	
		Элементы.ЗадачиЗаказчика.Обновить();
	ИначеЕсли ДопПараметры = 2 Тогда	
		Элементы.ЗадачиИсполнителя.Обновить();
	ИначеЕсли ДопПараметры = 3 Тогда	
		Элементы.ИЗадачиЗаказчика.Обновить();
	ИначеЕсли ДопПараметры = 4 Тогда	
		Элементы.ИЗадачиИсполнителя.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачуИсполнителя(Команда)
	ТекущиеДанные = Элементы.ЗадачиИсполнителя.ТекущиеДанные;
	Родитель = Неопределено;
	Если НЕ ТекущиеДанные = Неопределено тогда
		Родитель = ТекущиеДанные.Ссылка;
	КонецЕсли;
	СоздатьЗадачу(2, ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Формирование"), Родитель, 2);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗадачу(Сторона, Этап, Родитель, НомерТаблицы)
	Если Объект.Ссылка.Пустая() Тогда
		Отказ = Истина;
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗадачиПередНачаломДобавленияЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Перед добавлением задач необходимо записать договор. 
										|Записать?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ПараметрыОткрытия = Новый Структура("СторонаЗадачи, Владелец, ЭтапДоговора", Сторона, Объект.Ссылка, Этап);
		Если НЕ Родитель = Неопределено тогда
			ПараметрыОткрытия.Вставить("Родитель", Родитель);
		Иначе
			ПараметрыОткрытия.Вставить("КодовоеНаименование", ПредопределенноеЗначение("Перечисление.УровниClado.РезультатыПервогоУровня"));
		КонецЕсли;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьЗадачуЗавершение", ЭтаФорма, НомерТаблицы);
		ОткрытьФорму("Справочник.Задачи.ФормаОбъекта", Новый Структура("ЗначенияЗаполнения, СозданаИзДоговора", ПараметрыОткрытия, Истина), ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипДоговораПриИзменении(Элемент)
	СформироватьНаименование();
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	Элементы.ГруппаСторона2.Видимость = НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4") И НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ3");
	Элементы.ГруппаСторона4.Видимость = НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4");
	Элементы.ГруппаСторона1.Видимость = НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4") И НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ3");
	Элементы.ГруппаСторона3.ОтображатьЗаголовок = НЕ Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоров.ДТ4");
КонецПроцедуры

&НаКлиенте
Процедура ИСоздатьЗадачуЗаказчика(Команда)
	ТекущиеДанные = Элементы.ИЗадачиЗаказчика.ТекущиеДанные;
	Родитель = Неопределено;
	Если НЕ ТекущиеДанные = Неопределено тогда
		Родитель = ТекущиеДанные.Ссылка;
	КонецЕсли;
	СоздатьЗадачу(1, ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Исполнение"), родитель, 3);
КонецПроцедуры

&НаКлиенте
Процедура ИСоздатьЗадачуИсполнителя(Команда)
	ТекущиеДанные = Элементы.ИЗадачиИсполнителя.ТекущиеДанные;
	Родитель = Неопределено;
	Если НЕ ТекущиеДанные = Неопределено тогда
		Родитель = ТекущиеДанные.Ссылка;
	КонецЕсли;
	СоздатьЗадачу(2, ПредопределенноеЗначение("Перечисление.ЭтапыДоговора.Исполнение"), родитель, 4);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНаименование()
	Объект.Наименование = СтрШаблон("%1 - %2", Объект.ТипДоговора, Объект.НаименованиеДоговора);
КонецПроцедуры

&НаКлиенте
Процедура Наименование1ПриИзменении(Элемент)
	СформироватьНаименование();
КонецПроцедуры


&НаКлиенте
Процедура ЗадачиЗаказчикаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьПеретаскивание(ПараметрыПеретаскивания.Значение, Строка, 1);
	КонецЕсли;
	Элементы.ЗадачиЗаказчика.Обновить();
	Элементы.ЗадачиИсполнителя.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиИсполнителяПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьПеретаскивание(ПараметрыПеретаскивания.Значение, Строка, 2);
	КонецЕсли;
	Элементы.ЗадачиИсполнителя.Обновить();
	Элементы.ЗадачиЗаказчика.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработатьПеретаскивание(ЗадачаИст, ЗадачаРодитель, СторонаПриемник)
	ЗадачаОб = ЗадачаИст.ПолучитьОбъект();
	ЗадачаОб.Родитель = ЗадачаРодитель;
	ЗадачаОб.СторонаЗадачи = СторонаПриемник;
	Если ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.РезультатыПервогоУровня
		И ЗначениеЗаполнено(ЗадачаРодитель) Тогда
		ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.РезультатВторогоУровня;
	ИначеЕсли НЕ ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.РезультатыПервогоУровня
		И НЕ ЗначениеЗаполнено(ЗадачаРодитель) Тогда
		ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.РезультатыПервогоУровня;
	ИначеЕсли ЗадачаРодитель.КодовоеНаименование = Перечисления.УровниClado.РезультатВторогоУровня
		И НЕ ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.ГруппаРезультатовВторогоУровня Тогда
		ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.ГруппаРезультатовВторогоУровня;
	ИначеЕсли ЗадачаРодитель.КодовоеНаименование = Перечисления.УровниClado.РезультатыПервогоУровня
		И НЕ (ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.РезультатВторогоУровня
			ИЛИ ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.ГруппаРезультатовВторогоУровня) Тогда
			ЗадачаОб.КодовоеНаименование = Перечисления.УровниClado.РезультатВторогоУровня;
	КонецЕсли;
	ЗадачаОб.Записать();
КонецФункции


&НаКлиенте
Процедура ИЗадачиЗаказчикаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьПеретаскивание(ПараметрыПеретаскивания.Значение, Строка, 1);
	КонецЕсли;
	Элементы.ИЗадачиЗаказчика.Обновить();
	Элементы.ИЗадачиИсполнителя.Обновить();
КонецПроцедуры


&НаКлиенте
Процедура ИЗадачиИсполнителяПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение) Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьПеретаскивание(ПараметрыПеретаскивания.Значение, Строка, 2);
	КонецЕсли;
	Элементы.ИЗадачиИсполнителя.Обновить();
	Элементы.ИЗадачиЗаказчика.Обновить();
КонецПроцедуры
