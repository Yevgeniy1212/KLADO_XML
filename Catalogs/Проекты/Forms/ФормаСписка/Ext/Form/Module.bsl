
#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ТекущийСотрудник = Пользователи.ТекущийПользователь().Сотрудник;
	Если Не ЗначениеЗаполнено(ТекущийСотрудник) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Необходимо заполнить текущего сотрудника пользователя!");
	КонецЕсли;
	ОтображатьВсеДанные = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийСотрудник, "Должность.ОтображатьВсеДанные"); 
	Если Не ЗначениеЗаполнено(ОтображатьВсеДанные) Тогда
		//добавляем отбор по объектам
		СписокПроектов = КЛАДО_ОбщийМодульСервер.ПолучитьСписокПроектовТекущегоСотрудника(ТекущийСотрудник);
		ГруппаОтборов = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(Список.Отбор.Элементы, "Отбор по сотруднику", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтборов, "Администратор", ТекущийСотрудник);  
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтборов, "Ссылка", СписокПроектов, ВидСравненияКомпоновкиДанных.ВСписке);  
	КонецЕсли;
	ДобавитьОтборыПоПараметрамСеанса();
	//РольПолныеПрава          = Пользователи.РолиДоступны("КЛАДО_ГенеральныйДиректор");
	//Элементы.СписокСоздать.Доступность = РольПолныеПрава;
	//Элементы.ФормаСкопировать.Доступность = РольПолныеПрава;
	//Элементы.ФормаИзменитьИнициатора.Доступность = РольПолныеПрава;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Для Каждого эл из Список.Отбор.Элементы Цикл
		Эл.Использование = ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьОтборыПоПараметрамСеанса" Тогда
		ДобавитьОтборыПоПараметрамСеанса();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура СгруппироватьПоПодразделению(Команда)
	Элементы.СписокСгруппироватьПоПодразделению.Пометка = НЕ Элементы.СписокСгруппироватьПоПодразделению.Пометка;
	ТекГруппировка = Неопределено;
	Для Каждого ЭлГруппировки ИЗ Список.Группировка.Элементы Цикл
		Если ЭлГруппировки.Поле = Новый ПолеКомпоновкиДанных("Подразделение") Тогда
			ТекГруппировка = ЭлГруппировки;
			ТекГруппировка.Использование = Элементы.СписокСгруппироватьПоПодразделению.Пометка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ТекГруппировка = Неопределено Тогда
		ТекГруппировка = Список.Группировка.Элементы.Добавить(тип("ПолеГруппировкиКомпоновкиДанных"));
		ТекГруппировка.Поле = Новый ПолеКомпоновкиДанных("Подразделение");
		ТекГруппировка.Использование = Элементы.СписокСгруппироватьПоПодразделению.Пометка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Создать(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновлениеДанныхСписка", ЭтаФорма);
	ОткрытьФорму("Справочник.Проекты.Форма.ФормаЭлемента",,,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновлениеДанныхСписка", ЭтаФорма);
	ОткрытьФорму("Справочник.Проекты.Форма.ФормаЭлемента",Новый Структура("ЗначениеКопирования", ТекущиеДанные.Ссылка),,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновлениеДанныхСписка", ЭтаФорма);
	ОткрытьФорму("Справочник.Проекты.Форма.ФормаЭлемента",Новый Структура("Ключ", ТекущиеДанные.Ссылка),,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	//СтандартнаяОбработка = Ложь;
	//ТекущиеДанные = Элементы.Список.ТекущаяСтрока;
	//Если ТекущиеДанные = Неопределено 
	//	ИЛИ ТипЗнч(ТекущиеДанные) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
	//	Возврат;
	//КонецЕсли;
	//ОписаниеОповещения = Новый ОписаниеОповещения("ОбновлениеДанныхСписка", ЭтаФорма);
	//ОткрытьФорму("Справочник.Проекты.Форма.ФормаЭлемента",Новый Структура("Ключ", ТекущиеДанные),,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ТекущиеДанные = Элементы.Список.ТекущаяСтрока;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущиеДанные) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Договоры, "Проект", ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИнициатора(Команда)
	ВыбранныеСтроки = Элементы.Список.ВыделенныеСтроки;
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьИнициатораЗавершение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.ФормаИзменениеИнициатора", Новый Структура("МассивСсылок, ТипСсылок", ВыбранныеСтроки, "СписокПроектов"), ЭтаФорма,,,,ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИнициатораЗавершение(Рез, ДопПараметры) Экспорт
	Элементы.Список.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура Тест(Команда)
	ОтображатьТолькоТест = Истина;
	ОбновитьОтображениеПланФакт();
КонецПроцедуры

&НаКлиенте
Процедура План(Команда)
	ОтображатьТолькоПлан = Истина;
	ОтображатьТолькоТест = Ложь;
	ОбновитьОтображениеПланФакт();
КонецПроцедуры

&НаКлиенте
Процедура Факт(Команда)
	ОтображатьТолькоПлан = Ложь;
	ОтображатьТолькоТест = Ложь;
	ОбновитьОтображениеПланФакт();
КонецПроцедуры

&НаКлиенте
Процедура ТестДоговоры(Команда)
	ОтображатьТолькоТестДоговоры = Истина;
	ОбновитьОтображениеПланФактДоговоры();
КонецПроцедуры

&НаКлиенте
Процедура ПланДоговоры(Команда)
	ОтображатьТолькоПланДоговоры = Истина;
	ОтображатьТолькоТестДоговоры = Ложь;
	ОбновитьОтображениеПланФактДоговоры();
КонецПроцедуры

&НаКлиенте
Процедура ФактДоговоры(Команда)
	ОтображатьТолькоПланДоговоры = Ложь;
	ОтображатьТолькоТестДоговоры = Ложь;
	ОбновитьОтображениеПланФактДоговоры();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ДобавитьОтборыПоПараметрамСеанса()
	
	КЛАДО_ОбщийМодульСервер.ДобавитьОтборыПоПараметрамСеанса(Список, Новый ПолеКомпоновкиДанных("Администратор"), ПараметрыСеанса.СотрудникОтбор, ЗначениеЗаполнено(ПараметрыСеанса.СотрудникОтбор));
	КЛАДО_ОбщийМодульСервер.ДобавитьОтборыПоПараметрамСеанса(Список, Новый ПолеКомпоновкиДанных("Организация"), ПараметрыСеанса.ОрганизацияОтбор, ЗначениеЗаполнено(ПараметрыСеанса.ОрганизацияОтбор));
	
	СтатусОтбор	= ПараметрыСеанса.СтатусОтбор;
	Если СтатусОтбор = 1 Тогда
		ОтображатьТолькоПлан = Истина;
		ОтображатьТолькоПланДоговоры = Истина;
	КонецЕсли;
	ОбновитьОтображениеПланФакт();
	ОбновитьОтображениеПланФактДоговоры();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновлениеДанныхСписка(Рез, ДопПараметры) Экспорт
	Элементы.Список.Обновить();
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПланФакт()
	
	Если ОтображатьТолькоПлан Тогда 
		Элементы.ФормаПлан.Пометка = Истина;
		Элементы.ФормаФакт.Пометка = Ложь;
		Элементы.ФормаТест.Пометка = Ложь;
		КЛАДО_ОбщийМодульСервер.ДобавитьОтборыПоПараметрамСеанса(Список, Новый ПолеКомпоновкиДанных("СостояниеИсполнения"), Перечисления.СтатусыДоговоровПроектов.Планируемый, Истина, ВидСравненияКомпоновкиДанных.Равно);
	Иначе 
		Элементы.ФормаПлан.Пометка = Ложь;
		Элементы.ФормаФакт.Пометка = Истина;
		Элементы.ФормаТест.Пометка = Ложь;
		КЛАДО_ОбщийМодульСервер.ДобавитьОтборыПоПараметрамСеанса(Список, Новый ПолеКомпоновкиДанных("СостояниеИсполнения"), Перечисления.СтатусыДоговоровПроектов.Исполняемый, Истина, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Если ОтображатьТолькоТест Тогда 
		Элементы.ФормаПлан.Пометка = Ложь;
		Элементы.ФормаФакт.Пометка = Ложь;
		Элементы.ФормаТест.Пометка = Истина;
		КЛАДО_ОбщийМодульСервер.ДобавитьОтборыПоПараметрамСеанса(Список, Новый ПолеКомпоновкиДанных("СостояниеИсполнения"), Перечисления.СтатусыДоговоровПроектов.Тестируемый, Истина, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеПланФактДоговоры()
	
	Если ОтображатьТолькоПланДоговоры Тогда 
		Элементы.ФормаПлан1.Пометка = Истина;
		Элементы.ФормаФакт1.Пометка = Ложь;
		Элементы.ФормаТест1.Пометка = Ложь;
		КЛАДО_ОбщийМодульСервер.ДобавитьОтборыПоПараметрамСеанса(Договоры, Новый ПолеКомпоновкиДанных("СостояниеИсполнения"), Перечисления.СтатусыДоговоровПроектов.Планируемый, Истина, ВидСравненияКомпоновкиДанных.Равно);
	Иначе 
		Элементы.ФормаПлан1.Пометка = Ложь;
		Элементы.ФормаФакт1.Пометка = Истина;
		Элементы.ФормаТест1.Пометка = Ложь;
		КЛАДО_ОбщийМодульСервер.ДобавитьОтборыПоПараметрамСеанса(Договоры, Новый ПолеКомпоновкиДанных("СостояниеИсполнения"), Перечисления.СтатусыДоговоровПроектов.Исполняемый, Истина, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	Если ОтображатьТолькоТестДоговоры Тогда 
		Элементы.ФормаПлан1.Пометка = Ложь;
		Элементы.ФормаФакт1.Пометка = Ложь;
		Элементы.ФормаТест1.Пометка = Истина;
		КЛАДО_ОбщийМодульСервер.ДобавитьОтборыПоПараметрамСеанса(Договоры, Новый ПолеКомпоновкиДанных("СостояниеИсполнения"), Перечисления.СтатусыДоговоровПроектов.Тестируемый, Истина, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


